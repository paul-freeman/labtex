/* The following code was generated by JFlex 1.6.1 */

/* JFlex file: Labtex language lexer specification */
/* http://www.jflex.de/manual.html#CUPWork */

package nz.ac.auckland.labtex.generated;
import java_cup.runtime.*;

/**
 * A lexer class for the custom Labtex language used by Lablet
 */

public class LabLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TITLE = 2;
  public static final int TITLED = 4;
  public static final int SHEET = 6;
  public static final int ELEMENT = 8;
  public static final int ELEMENTS = 10;
  public static final int TITLE_COMMENT = 12;
  public static final int SHEET_COMMENT = 14;
  public static final int ELEMENT_COMMENT = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  2,  2,  5,  5,  6,  6, 
     7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\41\1\1\1\1\22\0\1\3\2\0\1\35"+
    "\1\34\1\2\1\33\23\0\1\12\3\0\1\4\2\0\32\40\1\0"+
    "\1\17\1\0\1\16\1\36\1\0\1\6\1\7\1\40\1\27\1\10"+
    "\1\30\1\20\1\15\1\13\2\40\1\5\1\40\1\21\1\25\1\40"+
    "\1\23\1\31\1\14\1\11\1\24\2\40\1\32\2\40\1\22\1\0"+
    "\1\26\1\37\6\0\1\41\u1fa2\0\1\41\1\41\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\3\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\3\16\1\17"+
    "\1\20\1\6\1\21\1\0\1\22\1\23\3\0\3\24"+
    "\2\21\2\22\2\23\2\0\2\24\1\21\1\22\1\23"+
    "\2\0\2\24\1\21\1\22\1\23\2\0\1\24\1\25"+
    "\1\21\1\22\1\23\2\0\1\24\1\21\1\22\1\23"+
    "\2\0\1\21\1\22\1\23\3\0\1\21\1\22\1\23"+
    "\3\0\1\21\1\22\1\23\3\0\1\21\1\22\1\23"+
    "\5\0\3\21\3\22\3\23\6\0\4\21\4\22\4\23"+
    "\6\0\4\21\4\22\4\23\1\26\5\0\1\26\3\21"+
    "\1\26\3\22\1\26\3\23\1\27\1\30\3\0\1\27"+
    "\1\30\1\21\1\27\1\30\1\22\1\27\1\30\1\23"+
    "\1\31\2\0\3\31\23\0\1\32\3\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u0132\0\u0110\0\u0154"+
    "\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110"+
    "\0\u0132\0\u0154\0\u0132\0\u0132\0\u01ba\0\u01dc\0\u0154\0\u01fe"+
    "\0\u0220\0\u0132\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec"+
    "\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da\0\u03fc"+
    "\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6\0\u04c8\0\u04ea\0\u050c"+
    "\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6\0\u05d8\0\u0286\0\u05fa"+
    "\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\u070a"+
    "\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4\0\u07d6\0\u07f8\0\u081a"+
    "\0\u083c\0\u085e\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908\0\u092a"+
    "\0\u094c\0\u096e\0\u0990\0\u09b2\0\u09d4\0\u09f6\0\u0a18\0\u0a3a"+
    "\0\u0a5c\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a"+
    "\0\u0b6c\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a"+
    "\0\u0c7c\0\u0c9e\0\u0cc0\0\u0ce2\0\u0d04\0\u0d26\0\u0d48\0\u0d6a"+
    "\0\u0d8c\0\u0dae\0\u0dd0\0\u0df2\0\u0e14\0\u0e36\0\u0e58\0\u0e7a"+
    "\0\u0e9c\0\u0ebe\0\u0ee0\0\u0f02\0\u0f24\0\u0f46\0\u0f68\0\u0f8a"+
    "\0\u0fac\0\u0fce\0\u0ff0\0\u1012\0\u1034\0\u1056\0\u1078\0\u109a"+
    "\0\u10bc\0\u0110\0\u10de\0\u1100\0\u1122\0\u1144\0\u1166\0\u02ec"+
    "\0\u1188\0\u11aa\0\u11cc\0\u0330\0\u11ee\0\u1210\0\u1232\0\u0374"+
    "\0\u1254\0\u1276\0\u1298\0\u0110\0\u0110\0\u12ba\0\u12dc\0\u12fe"+
    "\0\u02ec\0\u02ec\0\u1320\0\u0330\0\u0330\0\u1342\0\u0374\0\u0374"+
    "\0\u1364\0\u0110\0\u1386\0\u13a8\0\u02ec\0\u0330\0\u0374\0\u13ca"+
    "\0\u13ec\0\u140e\0\u1430\0\u1452\0\u1474\0\u1496\0\u14b8\0\u14da"+
    "\0\u14fc\0\u151e\0\u1540\0\u1562\0\u1584\0\u15a6\0\u15c8\0\u15ea"+
    "\0\u160c\0\u162e\0\u0110\0\u1650\0\u1672\0\u1694\0\u0110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\11\1\12\14\11\1\13\22\11\1\14\1\15\1\16"+
    "\1\15\12\14\1\17\1\20\2\14\1\21\3\14\1\22"+
    "\4\14\1\23\1\24\1\25\1\26\1\27\2\14\2\30"+
    "\1\31\14\30\1\32\22\30\1\14\1\15\1\33\1\15"+
    "\12\14\1\17\1\20\2\14\1\21\3\14\1\22\4\14"+
    "\1\23\1\24\1\25\1\26\1\27\3\14\1\15\1\34"+
    "\1\15\12\14\1\17\1\35\2\14\1\21\3\14\1\22"+
    "\4\14\1\23\1\24\1\25\1\26\1\27\2\14\2\0"+
    "\1\36\14\0\1\37\24\0\1\40\14\0\1\37\24\0"+
    "\1\41\14\0\1\37\67\0\1\42\1\43\44\0\1\44"+
    "\32\0\1\14\3\0\12\14\2\0\2\14\1\0\3\14"+
    "\1\0\4\14\5\0\2\14\1\0\1\15\1\0\1\15"+
    "\43\0\2\45\1\46\2\45\1\0\2\45\1\47\2\0"+
    "\2\45\1\0\3\45\1\0\4\45\3\0\1\45\1\0"+
    "\1\45\1\0\1\50\1\0\1\50\1\36\1\51\34\50"+
    "\1\0\1\52\1\0\1\52\1\40\1\53\34\52\1\0"+
    "\1\54\1\0\1\54\1\41\1\55\34\54\5\0\1\56"+
    "\45\0\1\57\36\0\5\45\1\0\3\45\2\0\2\45"+
    "\1\0\3\45\1\0\4\45\3\0\1\45\1\0\1\45"+
    "\6\0\3\45\1\60\1\45\1\0\3\45\2\0\2\45"+
    "\1\0\3\45\1\0\4\45\3\0\1\45\1\0\1\45"+
    "\6\0\5\45\1\0\3\45\2\0\2\45\1\0\3\45"+
    "\1\0\2\45\1\61\1\45\3\0\1\45\1\0\1\45"+
    "\1\0\1\50\1\0\37\50\1\0\1\50\1\0\2\50"+
    "\1\62\34\50\1\0\1\52\1\0\37\52\1\0\1\52"+
    "\1\0\2\52\1\63\34\52\1\0\1\54\1\0\37\54"+
    "\1\0\1\54\1\0\2\54\1\64\34\54\4\0\1\56"+
    "\1\0\1\65\54\0\1\66\26\0\5\45\1\0\3\45"+
    "\2\0\1\67\1\45\1\0\3\45\1\0\4\45\3\0"+
    "\1\45\1\0\1\45\6\0\3\45\1\70\1\45\1\0"+
    "\3\45\2\0\2\45\1\0\3\45\1\0\4\45\3\0"+
    "\1\45\1\0\1\45\1\0\1\50\1\0\1\50\1\62"+
    "\1\50\1\71\33\50\1\0\1\52\1\0\1\52\1\63"+
    "\1\52\1\72\33\52\1\0\1\54\1\0\1\54\1\64"+
    "\1\54\1\73\33\54\7\0\1\74\46\0\1\75\33\0"+
    "\5\45\1\0\1\76\2\45\2\0\2\45\1\0\3\45"+
    "\1\0\4\45\3\0\1\45\1\0\1\45\6\0\5\45"+
    "\1\0\3\45\2\0\2\45\1\0\3\45\1\0\1\45"+
    "\1\77\2\45\3\0\1\45\1\0\1\45\1\0\1\50"+
    "\1\0\4\50\1\100\32\50\1\0\1\52\1\0\4\52"+
    "\1\101\32\52\1\0\1\54\1\0\4\54\1\102\32\54"+
    "\10\0\1\103\53\0\1\104\25\0\5\45\1\0\3\45"+
    "\2\0\1\45\1\105\1\0\3\45\1\0\4\45\3\0"+
    "\1\45\1\0\1\45\1\0\1\50\1\0\5\50\1\106"+
    "\31\50\1\0\1\52\1\0\5\52\1\107\31\52\1\0"+
    "\1\54\1\0\5\54\1\110\31\54\6\0\1\111\56\0"+
    "\1\112\24\0\5\45\1\0\3\45\2\0\2\45\1\112"+
    "\3\45\1\0\4\45\3\0\1\45\1\0\1\45\1\0"+
    "\1\50\1\0\3\50\1\113\33\50\1\0\1\52\1\0"+
    "\3\52\1\114\33\52\1\0\1\54\1\0\3\54\1\115"+
    "\33\54\11\0\1\116\41\0\1\117\17\0\1\120\11\0"+
    "\1\50\1\0\6\50\1\121\30\50\1\0\1\52\1\0"+
    "\6\52\1\122\30\52\1\0\1\54\1\0\6\54\1\123"+
    "\30\54\12\0\1\124\53\0\1\125\31\0\1\126\26\0"+
    "\1\50\1\0\7\50\1\127\27\50\1\0\1\52\1\0"+
    "\7\52\1\130\27\52\1\0\1\54\1\0\7\54\1\131"+
    "\27\54\13\0\1\132\53\0\1\133\35\0\1\134\21\0"+
    "\1\50\1\0\10\50\1\135\26\50\1\0\1\52\1\0"+
    "\10\52\1\136\26\52\1\0\1\54\1\0\10\54\1\137"+
    "\26\54\12\0\1\140\2\0\1\141\1\142\32\0\1\143"+
    "\57\0\1\144\15\0\1\50\1\0\7\50\1\145\2\50"+
    "\1\146\1\147\23\50\1\0\1\52\1\0\7\52\1\150"+
    "\2\52\1\151\1\152\23\52\1\0\1\54\1\0\7\54"+
    "\1\153\2\54\1\154\1\155\23\54\11\0\1\156\2\0"+
    "\1\157\43\0\1\160\34\0\1\161\42\0\1\162\61\0"+
    "\1\163\10\0\1\50\1\0\6\50\1\164\2\50\1\165"+
    "\25\50\1\0\1\50\1\0\13\50\1\166\23\50\1\0"+
    "\1\50\1\0\6\50\1\167\30\50\1\0\1\52\1\0"+
    "\6\52\1\170\2\52\1\171\25\52\1\0\1\52\1\0"+
    "\13\52\1\172\23\52\1\0\1\52\1\0\6\52\1\173"+
    "\30\52\1\0\1\54\1\0\6\54\1\174\2\54\1\175"+
    "\25\54\1\0\1\54\1\0\13\54\1\176\23\54\1\0"+
    "\1\54\1\0\6\54\1\177\30\54\33\0\1\200\20\0"+
    "\1\201\40\0\1\202\37\0\1\203\46\0\1\204\36\0"+
    "\1\205\31\0\1\50\1\0\30\50\1\206\6\50\1\0"+
    "\1\50\1\0\7\50\1\207\27\50\1\0\1\50\1\0"+
    "\6\50\1\210\30\50\1\0\1\50\1\0\4\50\1\211"+
    "\32\50\1\0\1\52\1\0\30\52\1\212\6\52\1\0"+
    "\1\52\1\0\7\52\1\213\27\52\1\0\1\52\1\0"+
    "\6\52\1\214\30\52\1\0\1\52\1\0\4\52\1\215"+
    "\32\52\1\0\1\54\1\0\30\54\1\216\6\54\1\0"+
    "\1\54\1\0\7\54\1\217\27\54\1\0\1\54\1\0"+
    "\6\54\1\220\30\54\1\0\1\54\1\0\4\54\1\221"+
    "\32\54\12\0\1\222\35\0\1\223\44\0\1\224\60\0"+
    "\1\225\37\0\1\226\42\0\1\227\13\0\1\50\1\0"+
    "\7\50\1\230\27\50\1\0\1\50\1\0\3\50\1\231"+
    "\33\50\1\0\1\50\1\0\6\50\1\232\30\50\1\0"+
    "\1\50\1\0\25\50\1\233\11\50\1\0\1\52\1\0"+
    "\7\52\1\234\27\52\1\0\1\52\1\0\3\52\1\235"+
    "\33\52\1\0\1\52\1\0\6\52\1\236\30\52\1\0"+
    "\1\52\1\0\25\52\1\237\11\52\1\0\1\54\1\0"+
    "\7\54\1\240\27\54\1\0\1\54\1\0\3\54\1\241"+
    "\33\54\1\0\1\54\1\0\6\54\1\242\30\54\1\0"+
    "\1\54\1\0\25\54\1\243\11\54\11\0\1\244\42\0"+
    "\1\245\40\0\1\246\52\0\1\247\20\0\17\227\1\250"+
    "\22\227\1\50\1\0\6\50\1\251\30\50\1\0\1\50"+
    "\1\0\7\50\1\252\27\50\1\0\1\50\1\0\6\50"+
    "\1\253\30\50\1\0\1\52\1\0\6\52\1\254\30\52"+
    "\1\0\1\52\1\0\7\52\1\255\27\52\1\0\1\52"+
    "\1\0\6\52\1\256\30\52\1\0\1\54\1\0\6\54"+
    "\1\257\30\54\1\0\1\54\1\0\7\54\1\260\27\54"+
    "\1\0\1\54\1\0\6\54\1\261\30\54\32\0\1\262"+
    "\36\0\1\263\13\0\10\227\1\264\6\227\1\250\22\227"+
    "\1\50\1\0\27\50\1\265\7\50\1\0\1\52\1\0"+
    "\27\52\1\266\7\52\1\0\1\54\1\0\27\54\1\267"+
    "\7\54\1\0\17\263\1\270\22\263\17\227\1\250\1\227"+
    "\1\271\20\227\10\263\1\272\6\263\1\270\22\263\17\227"+
    "\1\250\7\227\1\273\12\227\17\263\1\270\1\263\1\274"+
    "\20\263\17\227\1\250\2\227\1\275\17\227\17\263\1\270"+
    "\7\263\1\276\12\263\17\227\1\250\10\227\1\277\11\227"+
    "\17\263\1\270\2\263\1\300\17\263\13\227\1\301\3\227"+
    "\1\250\22\227\10\263\1\302\6\263\1\270\22\263\17\227"+
    "\1\250\1\303\21\227\17\263\1\270\3\263\1\304\16\263"+
    "\17\227\1\250\4\227\1\305\15\227\17\263\1\270\4\263"+
    "\1\306\15\263\17\227\1\250\11\227\1\307\10\227\6\263"+
    "\1\310\10\263\1\270\22\263\10\227\1\311\6\227\1\250"+
    "\22\227\11\263\1\312\5\263\1\270\22\263\17\227\1\250"+
    "\6\227\1\313\13\227\13\263\1\314\3\263\1\270\41\263"+
    "\1\270\5\263\1\315\33\263\1\270\1\263\1\316\37\263"+
    "\1\270\6\263\1\317\13\263";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5814];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\5\1\1\11\1\1\10\11\6\1\1\0"+
    "\2\1\3\0\11\1\2\0\5\1\2\0\5\1\2\0"+
    "\5\1\2\0\4\1\2\0\3\1\3\0\3\1\3\0"+
    "\3\1\3\0\3\1\5\0\11\1\6\0\14\1\6\0"+
    "\14\1\1\11\5\0\14\1\2\11\3\0\11\1\1\11"+
    "\2\0\3\1\23\0\1\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();
	int prior_state = 0;

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	private String escapeForLua(String str) {
	    return str.replace("\"", "\\\"").replace("\'", "\\\'").replace("[", "\\[").replace("]", "\\]");
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LabLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(LabParserSym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* System.out.println("(IGNORE)"+yytext()); */
            }
          case 28: break;
          case 2: 
            { System.out.println("(LATEXSTRING)"+yytext().replaceAll("(\\r|\\n)", ""));
                              return symbol(LabParserSym.LATEXSTRING, escapeForLua(yytext()));
            }
          case 29: break;
          case 3: 
            { System.out.println("(WHITESPACE)"); return symbol(LabParserSym.WHITESPACE);
            }
          case 30: break;
          case 4: 
            { yypushback(1); yybegin(TITLE_COMMENT);
            }
          case 31: break;
          case 5: 
            { System.out.println("(CARROT)"+yytext()); return symbol(LabParserSym.CARROT);
            }
          case 32: break;
          case 6: 
            { System.out.println("(BACKSLASH)"+yytext()); return symbol(LabParserSym.BACKSLASH);
            }
          case 33: break;
          case 7: 
            { System.out.println("(LEFTCURLYBRACE)"+yytext()); return symbol(LabParserSym.LEFTCURLYBRACE);
            }
          case 34: break;
          case 8: 
            { System.out.println("(RIGHTCURLYBRACE)"+yytext()); return symbol(LabParserSym.RIGHTCURLYBRACE);
            }
          case 35: break;
          case 9: 
            { System.out.println("(AMPERSAND)"+yytext()); return symbol(LabParserSym.AMPERSAND);
            }
          case 36: break;
          case 10: 
            { System.out.println("(DOLLARSIGN)"+yytext()); return symbol(LabParserSym.DOLLARSIGN);
            }
          case 37: break;
          case 11: 
            { System.out.println("(HASHMARK)"+yytext()); return symbol(LabParserSym.HASHMARK);
            }
          case 38: break;
          case 12: 
            { System.out.println("(UNDERSCORE)"+yytext()); return symbol(LabParserSym.UNDERSCORE);
            }
          case 39: break;
          case 13: 
            { System.out.println("(TILDE)"+yytext()); return symbol(LabParserSym.TILDE);
            }
          case 40: break;
          case 14: 
            { /* ignore */
            }
          case 41: break;
          case 15: 
            { yypushback(1); yybegin(SHEET_COMMENT);
            }
          case 42: break;
          case 16: 
            { yypushback(1); yybegin(ELEMENT_COMMENT);
            }
          case 43: break;
          case 17: 
            { yybegin(TITLE);
            }
          case 44: break;
          case 18: 
            { yybegin(SHEET);
            }
          case 45: break;
          case 19: 
            { yybegin(ELEMENT);
            }
          case 46: break;
          case 20: 
            { System.out.println("(LATEX_CMD)"+yytext()); return symbol(LabParserSym.LATEX_CMD, yytext());
            }
          case 47: break;
          case 21: 
            { System.out.println("(LATEX_HREF)"+yytext()); return symbol(LabParserSym.LATEX_HREF, yytext());
            }
          case 48: break;
          case 22: 
            { yybegin(ELEMENT); System.out.println("(CMD_TEXT)text"); return symbol(LabParserSym.CMD_TEXT);
            }
          case 49: break;
          case 23: 
            { yybegin(TITLE); System.out.println("(CMD_TITLE)title"); return symbol(LabParserSym.CMD_TITLE);
            }
          case 50: break;
          case 24: 
            { yybegin(SHEET); System.out.println("(CMD_SHEET)sheet"); return symbol(LabParserSym.CMD_SHEET);
            }
          case 51: break;
          case 25: 
            { yybegin(ELEMENT); System.out.println("(CMD_HEADER)header"); return symbol(LabParserSym.CMD_HEADER);
            }
          case 52: break;
          case 26: 
            { System.out.println("(FIGURE)(figure omitted)"); return symbol(LabParserSym.LATEXSTRING, "(figure omitted)");
            }
          case 53: break;
          case 27: 
            { System.out.println("(EQUATION)(equation omitted)"); return symbol(LabParserSym.LATEXSTRING, "(equation omitted)");
            }
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
