/* The following code was generated by JFlex 1.6.1 */

/* JFlex file: Labtex language lexer specification */
/* http://www.jflex.de/manual.html#CUPWork */

package nz.ac.auckland.labtex.generated;
import java_cup.runtime.*;

/**
 * A lexer class for the custom Labtex language used by Lablet
 */

public class LabLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TITLE = 2;
  public static final int TITLED = 4;
  public static final int SHEET = 6;
  public static final int ELEMENT = 8;
  public static final int ELEMENTS = 10;
  public static final int TITLE_COMMENT = 12;
  public static final int SHEET_COMMENT = 14;
  public static final int ELEMENT_COMMENT = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  2,  2,  5,  5,  6,  6, 
     7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\2\1\55\1\3\1\1\22\0\1\5\2\0\1\50"+
    "\1\47\1\4\1\46\5\0\1\54\15\0\1\14\3\0\1\6\2\0"+
    "\32\53\1\32\1\21\1\33\1\20\1\51\1\0\1\10\1\11\1\40"+
    "\1\31\1\12\1\34\1\22\1\17\1\15\1\53\1\43\1\7\1\37"+
    "\1\23\1\27\1\44\1\25\1\35\1\16\1\13\1\26\1\36\1\53"+
    "\1\42\1\41\1\45\1\24\1\0\1\30\1\52\6\0\1\55\u1fa2\0"+
    "\1\55\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\3\1\1\2\3\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\3\16\3\3"+
    "\1\17\1\20\1\6\10\0\1\21\1\22\1\23\1\24"+
    "\5\25\1\0\4\26\2\0\4\27\2\0\4\30\4\0"+
    "\2\25\1\26\1\0\1\27\1\0\1\30\3\0\1\31"+
    "\2\25\1\26\1\0\1\27\1\0\1\30\3\0\1\25"+
    "\1\32\5\0\1\25\226\0\1\33\14\0\1\33\12\0"+
    "\1\33\12\0\1\33\12\0\1\34\1\35\2\0\1\36"+
    "\2\0\1\37\4\0\1\34\1\35\2\0\1\36\2\0"+
    "\1\37\2\0\1\34\1\35\2\0\1\36\2\0\1\37"+
    "\2\0\1\34\1\35\2\0\1\36\2\0\1\37\1\0"+
    "\1\40\1\41\7\0\1\40\1\41\5\0\1\40\1\41"+
    "\5\0\1\40\1\41\123\0\1\42\1\43\2\0\1\44"+
    "\3\0\1\42\1\43\2\0\1\44\1\0\1\42\1\43"+
    "\2\0\1\44\1\0\1\42\1\43\2\0\1\44\2\0"+
    "\1\45\4\0\1\45\2\0\1\45\2\0\1\45\12\0"+
    "\1\46\3\0\1\46\1\0\1\46\1\0\1\46\17\0"+
    "\1\47\15\0\1\50\1\0\3\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[538];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u019e"+
    "\0\u0170\0\u02b2\0\u0170\0\u0170\0\u0170\0\u0170\0\u0170\0\u0170"+
    "\0\u0170\0\u0170\0\u019e\0\u01cc\0\u02e0\0\u030e\0\u033c\0\u019e"+
    "\0\u019e\0\u036a\0\u0398\0\u01cc\0\u03c6\0\u03f4\0\u019e\0\u0422"+
    "\0\u0450\0\u047e\0\u04ac\0\u0170\0\u0170\0\u04da\0\u0508\0\u0536"+
    "\0\u0564\0\u047e\0\u0170\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u0398"+
    "\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u03c6\0\u0730\0\u075e"+
    "\0\u078c\0\u07ba\0\u07e8\0\u03f4\0\u0816\0\u0844\0\u0872\0\u08a0"+
    "\0\u08ce\0\u08fc\0\u0592\0\u092a\0\u0678\0\u0958\0\u075e\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0170\0\u0a10\0\u0a3e\0\u092a\0\u0a6c\0\u0958"+
    "\0\u0a9a\0\u0986\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0508\0\u0b80"+
    "\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0"+
    "\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60"+
    "\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0"+
    "\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140"+
    "\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0"+
    "\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420"+
    "\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590"+
    "\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700"+
    "\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870"+
    "\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0"+
    "\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50"+
    "\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0"+
    "\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30"+
    "\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u1fa0"+
    "\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110"+
    "\0\u213e\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280"+
    "\0\u22ae\0\u22dc\0\u230a\0\u2338\0\u2366\0\u2394\0\u23c2\0\u23f0"+
    "\0\u241e\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532\0\u2560"+
    "\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2674\0\u26a2\0\u26d0"+
    "\0\u26fe\0\u272c\0\u275a\0\u0170\0\u2788\0\u27b6\0\u27e4\0\u2812"+
    "\0\u2840\0\u286e\0\u289c\0\u28ca\0\u28f8\0\u2926\0\u2954\0\u2982"+
    "\0\u0592\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96\0\u2ac4"+
    "\0\u2af2\0\u2b20\0\u2b4e\0\u0678\0\u2b7c\0\u2baa\0\u2bd8\0\u2c06"+
    "\0\u2c34\0\u2c62\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\u075e\0\u2d48"+
    "\0\u2d76\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8"+
    "\0\u2ee6\0\u0170\0\u0170\0\u2f14\0\u2f42\0\u2f70\0\u2f9e\0\u2fcc"+
    "\0\u0170\0\u2ffa\0\u3028\0\u3056\0\u3084\0\u0592\0\u0592\0\u30b2"+
    "\0\u30e0\0\u310e\0\u313c\0\u316a\0\u0592\0\u3198\0\u31c6\0\u0678"+
    "\0\u0678\0\u31f4\0\u3222\0\u3250\0\u327e\0\u32ac\0\u0678\0\u32da"+
    "\0\u3308\0\u075e\0\u075e\0\u3336\0\u3364\0\u3392\0\u33c0\0\u33ee"+
    "\0\u075e\0\u341c\0\u0170\0\u0170\0\u344a\0\u3478\0\u34a6\0\u34d4"+
    "\0\u3502\0\u3530\0\u355e\0\u0592\0\u0592\0\u358c\0\u35ba\0\u35e8"+
    "\0\u3616\0\u3644\0\u0678\0\u0678\0\u3672\0\u36a0\0\u36ce\0\u36fc"+
    "\0\u372a\0\u075e\0\u075e\0\u3758\0\u3786\0\u37b4\0\u37e2\0\u3810"+
    "\0\u383e\0\u386c\0\u389a\0\u38c8\0\u38f6\0\u3924\0\u3952\0\u3980"+
    "\0\u39ae\0\u39dc\0\u3a0a\0\u3a38\0\u3a66\0\u3a94\0\u3ac2\0\u3af0"+
    "\0\u3b1e\0\u3b4c\0\u3b7a\0\u3ba8\0\u3bd6\0\u3c04\0\u3c32\0\u3c60"+
    "\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18\0\u3d46\0\u3d74\0\u3da2\0\u3dd0"+
    "\0\u3dfe\0\u3e2c\0\u3e5a\0\u3e88\0\u3eb6\0\u3ee4\0\u3f12\0\u3f40"+
    "\0\u3f6e\0\u3f9c\0\u3fca\0\u3ff8\0\u4026\0\u4054\0\u4082\0\u40b0"+
    "\0\u40de\0\u410c\0\u413a\0\u4168\0\u4196\0\u41c4\0\u41f2\0\u4220"+
    "\0\u424e\0\u427c\0\u42aa\0\u42d8\0\u4306\0\u4334\0\u4362\0\u4390"+
    "\0\u43be\0\u43ec\0\u441a\0\u4448\0\u4476\0\u44a4\0\u44d2\0\u4500"+
    "\0\u452e\0\u455c\0\u458a\0\u45b8\0\u45e6\0\u4614\0\u0170\0\u0170"+
    "\0\u4642\0\u4670\0\u0170\0\u469e\0\u46cc\0\u46fa\0\u0592\0\u0592"+
    "\0\u4728\0\u4756\0\u0592\0\u4784\0\u0678\0\u0678\0\u47b2\0\u47e0"+
    "\0\u0678\0\u480e\0\u075e\0\u075e\0\u483c\0\u486a\0\u075e\0\u4898"+
    "\0\u48c6\0\u0170\0\u48f4\0\u4922\0\u4950\0\u497e\0\u0592\0\u49ac"+
    "\0\u49da\0\u0678\0\u4a08\0\u4a36\0\u075e\0\u4a64\0\u4a92\0\u4ac0"+
    "\0\u4aee\0\u4b1c\0\u4b4a\0\u4b78\0\u4ba6\0\u4bd4\0\u4c02\0\u0170"+
    "\0\u4c30\0\u4c5e\0\u4c8c\0\u0592\0\u4cba\0\u0678\0\u4ce8\0\u075e"+
    "\0\u4d16\0\u4d44\0\u4d72\0\u4da0\0\u4dce\0\u4dfc\0\u4e2a\0\u4e58"+
    "\0\u4e86\0\u4eb4\0\u4ee2\0\u4f10\0\u4f3e\0\u4f6c\0\u4f9a\0\u0170"+
    "\0\u4fc8\0\u4ff6\0\u5024\0\u5052\0\u5080\0\u50ae\0\u50dc\0\u510a"+
    "\0\u5138\0\u5166\0\u5194\0\u51c2\0\u51f0\0\u0170\0\u521e\0\u0592"+
    "\0\u0678\0\u075e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[538];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\4\11\1\12\14\11\1\13\34\11\1\14\1\15\1\16"+
    "\1\17\1\20\1\17\12\14\1\21\1\22\2\14\1\23"+
    "\3\14\1\24\15\14\1\25\1\26\1\27\1\30\1\31"+
    "\3\14\4\32\1\33\14\32\1\34\34\32\1\14\1\35"+
    "\1\36\1\37\1\40\1\37\12\14\1\21\1\22\2\14"+
    "\1\23\3\14\1\24\15\14\1\25\1\26\1\27\1\30"+
    "\1\31\4\14\1\15\1\16\1\17\1\41\1\17\12\14"+
    "\1\21\1\42\2\14\1\23\3\14\1\24\15\14\1\25"+
    "\1\26\1\27\1\30\1\31\3\14\4\0\1\43\14\0"+
    "\1\44\40\0\1\45\14\0\1\44\40\0\1\46\14\0"+
    "\1\44\117\0\1\47\1\50\60\0\1\51\20\0\1\52"+
    "\23\0\1\14\5\0\12\14\2\0\2\14\1\0\3\14"+
    "\1\0\15\14\5\0\3\14\1\0\1\53\2\16\1\0"+
    "\1\16\51\0\2\53\1\16\1\0\1\16\51\0\1\15"+
    "\1\16\1\17\1\0\1\17\54\0\1\54\4\0\1\51"+
    "\7\0\1\55\10\0\1\52\24\0\1\56\2\36\1\0"+
    "\1\36\51\0\2\56\1\36\1\0\1\36\51\0\1\35"+
    "\1\36\1\37\1\0\1\37\54\0\1\54\2\0\2\57"+
    "\1\60\2\57\1\0\2\57\1\61\1\0\1\55\2\57"+
    "\1\0\3\57\1\0\1\57\1\62\1\63\12\57\3\0"+
    "\1\57\1\0\1\57\1\63\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\70\1\71\46\64\1\0\1\72\1\73"+
    "\1\74\1\75\1\72\1\76\1\77\46\72\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\104\1\105\46\100\7\0"+
    "\1\106\61\0\1\107\43\0\21\52\1\110\34\52\1\0"+
    "\3\53\1\0\1\53\51\0\3\56\1\0\1\56\57\0"+
    "\5\57\1\0\3\57\2\0\2\57\1\0\3\57\1\0"+
    "\1\57\2\0\12\57\3\0\1\57\1\0\1\57\11\0"+
    "\3\57\1\111\1\57\1\0\3\57\2\0\2\57\1\0"+
    "\3\57\1\0\1\57\2\0\12\57\3\0\1\57\1\0"+
    "\1\57\11\0\5\57\1\0\3\57\2\0\2\57\1\0"+
    "\3\57\1\0\1\57\2\0\1\57\1\112\10\57\3\0"+
    "\1\57\1\0\1\57\2\0\1\64\1\65\1\66\1\67"+
    "\1\64\1\113\47\64\3\0\2\66\1\0\1\66\53\0"+
    "\1\66\1\0\1\66\51\0\1\65\1\66\1\67\1\0"+
    "\1\67\50\0\1\64\1\65\1\66\1\67\1\64\1\113"+
    "\1\114\46\64\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\47\72\3\0\2\74\1\0\1\74\53\0\1\74"+
    "\1\0\1\74\51\0\1\73\1\74\1\75\1\0\1\75"+
    "\50\0\1\72\1\73\1\74\1\75\1\72\1\115\1\116"+
    "\46\72\1\0\1\100\1\101\1\102\1\103\1\100\1\117"+
    "\47\100\3\0\2\102\1\0\1\102\53\0\1\102\1\0"+
    "\1\102\51\0\1\101\1\102\1\103\1\0\1\103\50\0"+
    "\1\100\1\101\1\102\1\103\1\100\1\117\1\120\46\100"+
    "\6\0\1\106\1\0\1\121\70\0\1\122\33\0\21\52"+
    "\1\110\11\52\1\123\22\52\7\0\5\57\1\0\3\57"+
    "\2\0\1\124\1\57\1\0\3\57\1\0\1\57\2\0"+
    "\12\57\3\0\1\57\1\0\1\57\11\0\3\57\1\125"+
    "\1\57\1\0\3\57\2\0\2\57\1\0\3\57\1\0"+
    "\1\57\2\0\12\57\3\0\1\57\1\0\1\57\2\0"+
    "\1\64\1\65\1\66\1\67\1\64\1\126\1\64\1\127"+
    "\45\64\1\0\1\72\1\73\1\74\1\75\1\72\1\130"+
    "\1\72\1\131\45\72\1\0\1\100\1\101\1\102\1\103"+
    "\1\100\1\132\1\100\1\133\45\100\11\0\1\134\62\0"+
    "\1\135\47\0\5\57\1\0\1\136\2\57\2\0\2\57"+
    "\1\0\3\57\1\0\1\57\2\0\12\57\3\0\1\57"+
    "\1\0\1\57\11\0\5\57\1\0\3\57\2\0\2\57"+
    "\1\0\3\57\1\0\1\57\2\0\1\137\11\57\3\0"+
    "\1\57\1\0\1\57\2\0\1\64\1\65\1\66\1\67"+
    "\1\64\1\113\2\64\1\140\44\64\1\0\1\72\1\73"+
    "\1\74\1\75\1\72\1\115\2\72\1\141\44\72\1\0"+
    "\1\100\1\101\1\102\1\103\1\100\1\117\2\100\1\142"+
    "\44\100\12\0\1\143\67\0\1\144\41\0\5\57\1\0"+
    "\3\57\2\0\1\57\1\145\1\0\3\57\1\0\1\57"+
    "\2\0\12\57\3\0\1\57\1\0\1\57\2\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\3\64\1\146\43\64"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\3\72"+
    "\1\147\43\72\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\3\100\1\150\43\100\10\0\1\151\72\0\1\152"+
    "\40\0\5\57\1\0\3\57\2\0\2\57\1\152\3\57"+
    "\1\0\1\57\2\0\12\57\3\0\1\57\1\0\1\57"+
    "\2\0\1\64\1\65\1\66\1\67\1\64\1\113\1\64"+
    "\1\153\45\64\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\1\72\1\154\45\72\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\1\100\1\155\45\100\13\0\1\156"+
    "\55\0\1\157\21\0\1\160\21\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\4\64\1\161\42\64\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\4\72\1\162\42\72"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\4\100"+
    "\1\163\42\100\14\0\1\164\67\0\1\165\45\0\1\166"+
    "\40\0\1\64\1\65\1\66\1\67\1\64\1\113\5\64"+
    "\1\167\41\64\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\5\72\1\170\41\72\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\5\100\1\171\41\100\15\0\1\172"+
    "\67\0\1\173\51\0\1\174\33\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\6\64\1\175\40\64\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\6\72\1\176\40\72"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\6\100"+
    "\1\177\40\100\13\0\1\200\1\201\2\0\1\202\1\203"+
    "\16\0\1\204\1\205\1\206\25\0\1\207\73\0\1\210"+
    "\27\0\1\64\1\65\1\66\1\67\1\64\1\113\4\64"+
    "\1\211\1\212\2\64\1\213\1\214\16\64\1\215\1\216"+
    "\1\217\14\64\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\4\72\1\220\1\221\2\72\1\222\1\223\16\72"+
    "\1\224\1\225\1\226\14\72\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\4\100\1\227\1\230\2\100\1\231"+
    "\1\232\16\100\1\233\1\234\1\235\14\100\24\0\1\236"+
    "\16\0\1\237\25\0\1\240\2\0\1\241\57\0\1\242"+
    "\50\0\1\243\14\0\1\244\43\0\1\245\67\0\1\246"+
    "\36\0\1\247\6\0\1\250\51\0\1\251\77\0\1\252"+
    "\20\0\1\64\1\65\1\66\1\67\1\64\1\113\15\64"+
    "\1\253\16\64\1\254\12\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\4\64\1\255\2\64\1\256\37\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\11\64"+
    "\1\257\35\64\1\0\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\4\64\1\260\14\64\1\261\25\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\7\64\1\262\37\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\21\64"+
    "\1\263\25\64\1\0\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\2\64\1\264\6\64\1\265\35\64\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\15\72\1\266\16\72"+
    "\1\267\12\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\4\72\1\270\2\72\1\271\37\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\11\72\1\272\35\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\4\72"+
    "\1\273\14\72\1\274\25\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\7\72\1\275\37\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\21\72\1\276\25\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\2\72"+
    "\1\277\6\72\1\300\35\72\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\15\100\1\301\16\100\1\302\12\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\4\100"+
    "\1\303\2\100\1\304\37\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\11\100\1\305\35\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\4\100\1\306\14\100"+
    "\1\307\25\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\7\100\1\310\37\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\21\100\1\311\25\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\2\100\1\312\6\100"+
    "\1\313\35\100\32\0\1\314\70\0\1\315\53\0\1\316"+
    "\26\0\1\317\54\0\1\320\53\0\1\321\102\0\1\322"+
    "\51\0\1\323\37\0\1\324\51\0\1\325\60\0\1\326"+
    "\60\0\1\327\52\0\1\330\43\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\23\64\1\331\23\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\36\64\1\332\10\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\34\64"+
    "\1\333\12\64\1\0\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\5\64\1\334\41\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\4\64\1\335\42\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\2\64\1\336\44\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\27\64"+
    "\1\337\17\64\1\0\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\23\64\1\340\23\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\5\64\1\341\41\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\1\64\1\342\45\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\4\64"+
    "\1\343\42\64\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\23\72\1\344\23\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\36\72\1\345\10\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\34\72\1\346\12\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\5\72"+
    "\1\347\41\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\4\72\1\350\42\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\2\72\1\351\44\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\27\72\1\352\17\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\23\72"+
    "\1\353\23\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\5\72\1\354\41\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\1\72\1\355\45\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\4\72\1\356\42\72"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\23\100"+
    "\1\357\23\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\36\100\1\360\10\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\34\100\1\361\12\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\5\100\1\362\41\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\4\100"+
    "\1\363\42\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\2\100\1\364\44\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\27\100\1\365\17\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\23\100\1\366\23\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\5\100"+
    "\1\367\41\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\1\100\1\370\45\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\4\100\1\371\42\100\20\0\1\372"+
    "\65\0\1\373\41\0\1\374\51\0\1\375\60\0\1\376"+
    "\74\0\1\377\41\0\1\u0100\52\0\1\u0101\60\0\1\u0102"+
    "\100\0\1\u0103\55\0\1\u0104\44\0\1\u0105\56\0\1\u0106"+
    "\25\0\1\64\1\65\1\66\1\67\1\64\1\113\11\64"+
    "\1\u0107\35\64\1\0\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\21\64\1\u0108\25\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\5\64\1\u0109\41\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\1\64\1\u010a\45\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\4\64"+
    "\1\u010b\42\64\1\0\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\23\64\1\u010c\23\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\7\64\1\u010d\37\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\4\64\1\u010e\42\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\7\64"+
    "\1\u010f\37\64\1\0\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\32\64\1\u0110\14\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\32\64\1\u0111\14\64\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\11\72\1\u0112\35\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\21\72"+
    "\1\u0113\25\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\5\72\1\u0114\41\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\1\72\1\u0115\45\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\4\72\1\u0116\42\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\23\72"+
    "\1\u0117\23\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\7\72\1\u0118\37\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\4\72\1\u0119\42\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\7\72\1\u011a\37\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\32\72"+
    "\1\u011b\14\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\32\72\1\u011c\14\72\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\11\100\1\u011d\35\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\21\100\1\u011e\25\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\5\100"+
    "\1\u011f\41\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\1\100\1\u0120\45\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\4\100\1\u0121\42\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\23\100\1\u0122\23\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\7\100"+
    "\1\u0123\37\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\4\100\1\u0124\42\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\7\100\1\u0125\37\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\32\100\1\u0126\14\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\32\100"+
    "\1\u0127\14\100\30\0\1\u0128\63\0\1\u0129\32\0\1\u012a"+
    "\56\0\1\u012b\54\0\1\u012c\110\0\1\u012d\37\0\1\u012e"+
    "\55\0\1\u012f\67\0\1\u0130\57\0\1\u0131\35\0\1\u0132"+
    "\32\0\21\u0106\1\u0133\34\u0106\1\64\1\65\1\66\1\67"+
    "\1\64\1\113\21\64\1\u0134\25\64\1\0\1\64\1\65"+
    "\1\66\1\67\1\64\1\113\27\64\1\u0135\17\64\1\0"+
    "\1\64\1\65\1\66\1\67\1\64\1\113\4\64\1\u0136"+
    "\42\64\1\0\1\64\1\65\1\66\1\67\1\64\1\113"+
    "\5\64\1\u0137\41\64\1\0\1\64\1\65\1\66\1\67"+
    "\1\64\1\113\4\64\1\u0138\42\64\1\0\1\64\1\65"+
    "\1\66\1\67\1\64\1\113\37\64\1\u0139\7\64\1\0"+
    "\1\64\1\65\1\66\1\67\1\64\1\113\21\64\1\u013a"+
    "\25\64\1\0\1\64\1\65\1\66\1\67\1\64\1\113"+
    "\21\64\1\u013b\25\64\1\0\1\64\1\65\1\66\1\67"+
    "\1\64\1\113\33\64\1\u013c\13\64\1\0\1\64\1\65"+
    "\1\66\1\67\1\64\1\113\35\64\1\u013d\11\64\1\0"+
    "\1\72\1\73\1\74\1\75\1\72\1\115\21\72\1\u013e"+
    "\25\72\1\0\1\72\1\73\1\74\1\75\1\72\1\115"+
    "\27\72\1\u013f\17\72\1\0\1\72\1\73\1\74\1\75"+
    "\1\72\1\115\4\72\1\u0140\42\72\1\0\1\72\1\73"+
    "\1\74\1\75\1\72\1\115\5\72\1\u0141\41\72\1\0"+
    "\1\72\1\73\1\74\1\75\1\72\1\115\4\72\1\u0142"+
    "\42\72\1\0\1\72\1\73\1\74\1\75\1\72\1\115"+
    "\37\72\1\u0143\7\72\1\0\1\72\1\73\1\74\1\75"+
    "\1\72\1\115\21\72\1\u0144\25\72\1\0\1\72\1\73"+
    "\1\74\1\75\1\72\1\115\21\72\1\u0145\25\72\1\0"+
    "\1\72\1\73\1\74\1\75\1\72\1\115\33\72\1\u0146"+
    "\13\72\1\0\1\72\1\73\1\74\1\75\1\72\1\115"+
    "\35\72\1\u0147\11\72\1\0\1\100\1\101\1\102\1\103"+
    "\1\100\1\117\21\100\1\u0148\25\100\1\0\1\100\1\101"+
    "\1\102\1\103\1\100\1\117\27\100\1\u0149\17\100\1\0"+
    "\1\100\1\101\1\102\1\103\1\100\1\117\4\100\1\u014a"+
    "\42\100\1\0\1\100\1\101\1\102\1\103\1\100\1\117"+
    "\5\100\1\u014b\41\100\1\0\1\100\1\101\1\102\1\103"+
    "\1\100\1\117\4\100\1\u014c\42\100\1\0\1\100\1\101"+
    "\1\102\1\103\1\100\1\117\37\100\1\u014d\7\100\1\0"+
    "\1\100\1\101\1\102\1\103\1\100\1\117\21\100\1\u014e"+
    "\25\100\1\0\1\100\1\101\1\102\1\103\1\100\1\117"+
    "\21\100\1\u014f\25\100\1\0\1\100\1\101\1\102\1\103"+
    "\1\100\1\117\33\100\1\u0150\13\100\1\0\1\100\1\101"+
    "\1\102\1\103\1\100\1\117\35\100\1\u0151\11\100\36\0"+
    "\1\u0152\33\0\1\u0153\77\0\1\u0154\47\0\1\u0155\44\0"+
    "\1\u0156\62\0\1\u0157\50\0\1\u0158\67\0\1\u0159\25\0"+
    "\12\u0106\1\u015a\6\u0106\1\u0133\34\u0106\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\27\64\1\u015b\17\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\5\64\1\u015c\41\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\27\64"+
    "\1\u015d\17\64\1\0\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\21\64\1\u015e\25\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\10\64\1\u015f\36\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\15\64\1\u0160\31\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\10\64"+
    "\1\u0161\36\64\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\27\72\1\u0162\17\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\5\72\1\u0163\41\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\27\72\1\u0164\17\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\21\72"+
    "\1\u0165\25\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\10\72\1\u0166\36\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\15\72\1\u0167\31\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\10\72\1\u0168\36\72"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\27\100"+
    "\1\u0169\17\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\5\100\1\u016a\41\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\27\100\1\u016b\17\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\21\100\1\u016c\25\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\10\100"+
    "\1\u016d\36\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\15\100\1\u016e\31\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\10\100\1\u016f\36\100\16\0\1\u0170"+
    "\63\0\1\u0171\51\0\1\u0172\46\0\1\u0173\5\0\1\u0174"+
    "\56\0\1\u0175\36\0\21\u0159\1\u0176\34\u0159\21\u0106\1\u0133"+
    "\1\u0106\1\u0177\32\u0106\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\7\64\1\u0178\37\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\15\64\1\u0179\31\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\11\64\1\u017a\35\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\2\64"+
    "\1\u017b\5\64\1\u017c\36\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\11\64\1\u017d\35\64\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\7\72\1\u017e\37\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\15\72"+
    "\1\u017f\31\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\11\72\1\u0180\35\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\2\72\1\u0181\5\72\1\u0182\36\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\11\72"+
    "\1\u0183\35\72\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\7\100\1\u0184\37\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\15\100\1\u0185\31\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\11\100\1\u0186\35\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\2\100"+
    "\1\u0187\5\100\1\u0188\36\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\11\100\1\u0189\35\100\46\0\1\u018a"+
    "\23\0\1\u018b\54\0\1\u018c\66\0\1\u018d\51\0\1\u018e"+
    "\50\0\1\u018f\43\0\12\u0159\1\u0190\6\u0159\1\u0176\34\u0159"+
    "\21\u0106\1\u0133\7\u0106\1\u0191\24\u0106\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\37\64\1\u0192\7\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\5\64\1\u0193\41\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\4\64"+
    "\1\u0194\42\64\1\0\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\15\64\1\u0195\31\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\11\64\1\u0196\35\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\4\64\1\u0197\42\64"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\37\72"+
    "\1\u0198\7\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\5\72\1\u0199\41\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\4\72\1\u019a\42\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\15\72\1\u019b\31\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\11\72"+
    "\1\u019c\35\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\4\72\1\u019d\42\72\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\37\100\1\u019e\7\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\5\100\1\u019f\41\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\4\100"+
    "\1\u01a0\42\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\15\100\1\u01a1\31\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\11\100\1\u01a2\35\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\4\100\1\u01a3\42\100"+
    "\30\0\1\u01a4\36\0\1\u01a5\57\0\1\u01a6\53\0\1\u01a7"+
    "\57\0\1\u01a8\55\0\1\u01a9\43\0\21\u0159\1\u0176\1\u0159"+
    "\1\u01aa\32\u0159\21\u0106\1\u0133\2\u0106\1\u01ab\31\u0106\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\21\64\1\u01ac\25\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\2\64"+
    "\1\u01ad\44\64\1\0\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\4\64\1\u01ae\42\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\2\64\1\u01af\44\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\4\64\1\u01b0\42\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\4\64"+
    "\1\u01b1\42\64\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\21\72\1\u01b2\25\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\2\72\1\u01b3\44\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\4\72\1\u01b4\42\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\2\72"+
    "\1\u01b5\44\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\4\72\1\u01b6\42\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\4\72\1\u01b7\42\72\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\21\100\1\u01b8\25\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\2\100"+
    "\1\u01b9\44\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\4\100\1\u01ba\42\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\2\100\1\u01bb\44\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\4\100\1\u01bc\42\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\4\100"+
    "\1\u01bd\42\100\24\0\1\u01be\41\0\1\u01bf\61\0\1\u01c0"+
    "\51\0\1\u01c1\60\0\1\u01c2\56\0\1\u01c3\42\0\21\u0159"+
    "\1\u0176\7\u0159\1\u01c4\24\u0159\21\u0106\1\u0133\12\u0106\1\u01c5"+
    "\21\u0106\1\64\1\65\1\66\1\67\1\64\1\113\15\64"+
    "\1\u01c6\31\64\1\0\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\1\64\1\u01c7\45\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\5\64\1\u01c8\41\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\1\64\1\u01c9\45\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\4\64"+
    "\1\u01ca\42\64\1\0\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\5\64\1\u01cb\41\64\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\15\72\1\u01cc\31\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\1\72\1\u01cd\45\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\5\72"+
    "\1\u01ce\41\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\1\72\1\u01cf\45\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\4\72\1\u01d0\42\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\5\72\1\u01d1\41\72"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\15\100"+
    "\1\u01d2\31\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\1\100\1\u01d3\45\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\5\100\1\u01d4\41\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\1\100\1\u01d5\45\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\4\100"+
    "\1\u01d6\42\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\5\100\1\u01d7\41\100\14\0\1\u01d8\103\0\1\u01d9"+
    "\27\0\1\u01da\42\0\21\u0159\1\u0176\2\u0159\1\u01db\31\u0159"+
    "\15\u0106\1\u01dc\3\u0106\1\u0133\34\u0106\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\5\64\1\u01dd\41\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\33\64\1\u01de\13\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\5\64"+
    "\1\u01df\41\64\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\5\72\1\u01e0\41\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\33\72\1\u01e1\13\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\5\72\1\u01e2\41\72"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\5\100"+
    "\1\u01e3\41\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\33\100\1\u01e4\13\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\5\100\1\u01e5\41\100\11\0\1\u01e6"+
    "\63\0\1\u01e7\37\0\12\u0159\1\u01e8\6\u0159\1\u0176\34\u0159"+
    "\21\u0106\1\u0133\1\u01e9\33\u0106\1\64\1\65\1\66\1\67"+
    "\1\64\1\113\2\64\1\u01ea\44\64\1\0\1\64\1\65"+
    "\1\66\1\67\1\64\1\113\10\64\1\u01eb\36\64\1\0"+
    "\1\72\1\73\1\74\1\75\1\72\1\115\2\72\1\u01ec"+
    "\44\72\1\0\1\72\1\73\1\74\1\75\1\72\1\115"+
    "\10\72\1\u01ed\36\72\1\0\1\100\1\101\1\102\1\103"+
    "\1\100\1\117\2\100\1\u01ee\44\100\1\0\1\100\1\101"+
    "\1\102\1\103\1\100\1\117\10\100\1\u01ef\36\100\10\0"+
    "\1\u01f0\63\0\1\u01f1\40\0\21\u0159\1\u0176\3\u0159\1\u01f2"+
    "\30\u0159\21\u0106\1\u0133\4\u0106\1\u01f3\27\u0106\1\64\1\65"+
    "\1\66\1\67\1\64\1\113\1\64\1\u01f4\45\64\1\0"+
    "\1\64\1\65\1\66\1\67\1\64\1\113\7\64\1\u01f5"+
    "\37\64\1\0\1\72\1\73\1\74\1\75\1\72\1\115"+
    "\1\72\1\u01f6\45\72\1\0\1\72\1\73\1\74\1\75"+
    "\1\72\1\115\7\72\1\u01f7\37\72\1\0\1\100\1\101"+
    "\1\102\1\103\1\100\1\117\1\100\1\u01f8\45\100\1\0"+
    "\1\100\1\101\1\102\1\103\1\100\1\117\7\100\1\u01f9"+
    "\37\100\17\0\1\u01fa\37\0\21\u0159\1\u0176\4\u0159\1\u01fb"+
    "\27\u0159\21\u0106\1\u0133\13\u0106\1\u01fc\20\u0106\1\64\1\65"+
    "\1\66\1\67\1\64\1\113\10\64\1\u01fd\36\64\1\0"+
    "\1\72\1\73\1\74\1\75\1\72\1\115\10\72\1\u01fe"+
    "\36\72\1\0\1\100\1\101\1\102\1\103\1\100\1\117"+
    "\10\100\1\u01ff\36\100\23\0\1\u0200\33\0\10\u0159\1\u0201"+
    "\10\u0159\1\u0176\34\u0159\12\u0106\1\u0202\6\u0106\1\u0133\34\u0106"+
    "\1\64\1\65\1\66\1\67\1\64\1\113\14\64\1\u0203"+
    "\32\64\1\0\1\72\1\73\1\74\1\75\1\72\1\115"+
    "\14\72\1\u0204\32\72\1\0\1\100\1\101\1\102\1\103"+
    "\1\100\1\117\14\100\1\u0205\32\100\36\0\1\u0206\20\0"+
    "\13\u0159\1\u0207\5\u0159\1\u0176\34\u0159\21\u0106\1\u0133\6\u0106"+
    "\1\u0208\25\u0106\1\64\1\65\1\66\1\67\1\64\1\113"+
    "\27\64\1\u0209\17\64\1\0\1\72\1\73\1\74\1\75"+
    "\1\72\1\115\27\72\1\u020a\17\72\1\0\1\100\1\101"+
    "\1\102\1\103\1\100\1\117\27\100\1\u020b\17\100\11\0"+
    "\1\u020c\45\0\15\u0159\1\u020d\3\u0159\1\u0176\34\u0159\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\2\64\1\u020e\44\64"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\2\72"+
    "\1\u020f\44\72\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\2\100\1\u0210\44\100\45\0\1\u0211\11\0\21\u0159"+
    "\1\u0176\5\u0159\1\u0212\26\u0159\1\64\1\65\1\66\1\67"+
    "\1\64\1\113\36\64\1\u0213\10\64\1\0\1\72\1\73"+
    "\1\74\1\75\1\72\1\115\36\72\1\u0214\10\72\1\0"+
    "\1\100\1\101\1\102\1\103\1\100\1\117\36\100\1\u0215"+
    "\10\100\20\0\1\u0216\36\0\21\u0159\1\u0176\1\u0159\1\u0217"+
    "\32\u0159\1\64\1\65\1\66\1\67\1\64\1\113\11\64"+
    "\1\u0218\35\64\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\11\72\1\u0219\35\72\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\11\100\1\u021a\35\100\1\0\21\u0159"+
    "\1\u0176\6\u0159\1\123\25\u0159";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21068];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\7\1\1\11\1\1\10\11\10\1\10\0"+
    "\1\1\2\11\5\1\1\11\1\0\4\1\2\0\4\1"+
    "\2\0\4\1\4\0\3\1\1\0\1\1\1\0\1\1"+
    "\3\0\1\11\3\1\1\0\1\1\1\0\1\1\3\0"+
    "\2\1\5\0\1\1\226\0\1\11\14\0\1\1\12\0"+
    "\1\1\12\0\1\1\12\0\2\11\2\0\1\1\2\0"+
    "\1\11\4\0\2\1\2\0\1\1\2\0\1\1\2\0"+
    "\2\1\2\0\1\1\2\0\1\1\2\0\2\1\2\0"+
    "\1\1\2\0\1\1\1\0\2\11\7\0\2\1\5\0"+
    "\2\1\5\0\2\1\123\0\2\11\2\0\1\11\3\0"+
    "\2\1\2\0\1\1\1\0\2\1\2\0\1\1\1\0"+
    "\2\1\2\0\1\1\2\0\1\11\4\0\1\1\2\0"+
    "\1\1\2\0\1\1\12\0\1\11\3\0\1\1\1\0"+
    "\1\1\1\0\1\1\17\0\1\11\15\0\1\11\1\0"+
    "\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[538];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();
	int prior_state = 0;

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	private String escapeForLua(String str) {
	    return str.replace("\"", "\\\"")
	              .replace("\'", "\\\'")
	              .replace("[", "\\[")
	              .replace("]", "\\]")
	              .replace("``", "\\\"");
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LabLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(LabParserSym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* System.out.println("(IGNORE)"+yytext()); */
            }
          case 41: break;
          case 2: 
            { System.out.println("(LATEXSTRING)"+yytext().replaceAll("(\\r|\\n)", ""));
                              return symbol(LabParserSym.LATEXSTRING, escapeForLua(yytext()));
            }
          case 42: break;
          case 3: 
            { System.out.println("(WHITESPACE)"); return symbol(LabParserSym.WHITESPACE);
            }
          case 43: break;
          case 4: 
            { yypushback(1); yybegin(TITLE_COMMENT);
            }
          case 44: break;
          case 5: 
            { System.out.println("(CARROT)"+yytext()); return symbol(LabParserSym.CARROT);
            }
          case 45: break;
          case 6: 
            { System.out.println("(BACKSLASH)"+yytext()); return symbol(LabParserSym.BACKSLASH);
            }
          case 46: break;
          case 7: 
            { System.out.println("(LEFTCURLYBRACE)"+yytext()); return symbol(LabParserSym.LEFTCURLYBRACE);
            }
          case 47: break;
          case 8: 
            { System.out.println("(RIGHTCURLYBRACE)"+yytext()); return symbol(LabParserSym.RIGHTCURLYBRACE);
            }
          case 48: break;
          case 9: 
            { System.out.println("(AMPERSAND)"+yytext()); return symbol(LabParserSym.AMPERSAND);
            }
          case 49: break;
          case 10: 
            { System.out.println("(DOLLARSIGN)"+yytext()); return symbol(LabParserSym.DOLLARSIGN);
            }
          case 50: break;
          case 11: 
            { System.out.println("(HASHMARK)"+yytext()); return symbol(LabParserSym.HASHMARK);
            }
          case 51: break;
          case 12: 
            { System.out.println("(UNDERSCORE)"+yytext()); return symbol(LabParserSym.UNDERSCORE);
            }
          case 52: break;
          case 13: 
            { System.out.println("(TILDE)"+yytext()); return symbol(LabParserSym.TILDE);
            }
          case 53: break;
          case 14: 
            { /* ignore */
            }
          case 54: break;
          case 15: 
            { yypushback(1); yybegin(SHEET_COMMENT);
            }
          case 55: break;
          case 16: 
            { yypushback(1); yybegin(ELEMENT_COMMENT);
            }
          case 56: break;
          case 17: 
            { yybegin(TITLED); System.out.println("(BLANKLINE)"); return symbol(LabParserSym.BLANKLINE);
            }
          case 57: break;
          case 18: 
            { System.out.println("(PERCENT)"+yytext()); return symbol(LabParserSym.PERCENT);
            }
          case 58: break;
          case 19: 
            { System.out.println("(ESCAPED_BACKSLASH)"+yytext()); return symbol(LabParserSym.ESCAPED_BACKSLASH);
            }
          case 59: break;
          case 20: 
            { yybegin(ELEMENTS); System.out.println("(BLANKLINE)");
            }
          case 60: break;
          case 21: 
            { System.out.println("(LATEX_CMD)"+yytext()); return symbol(LabParserSym.LATEX_CMD, yytext());
            }
          case 61: break;
          case 22: 
            { yybegin(TITLE);
            }
          case 62: break;
          case 23: 
            { yybegin(SHEET);
            }
          case 63: break;
          case 24: 
            { yybegin(ELEMENT);
            }
          case 64: break;
          case 25: 
            { System.out.println("(EQUATION)(equation omitted)"); return symbol(LabParserSym.LATEXSTRING, "(equation omitted)");
            }
          case 65: break;
          case 26: 
            { System.out.println("(LATEX_HREF)"+yytext()); return symbol(LabParserSym.LATEX_HREF, yytext());
            }
          case 66: break;
          case 27: 
            { yybegin(ELEMENT); System.out.println("(CMD_TEXT)text"); return symbol(LabParserSym.CMD_TEXT);
            }
          case 67: break;
          case 28: 
            { yybegin(TITLE); System.out.println("(CMD_TITLE)title"); return symbol(LabParserSym.CMD_TITLE);
            }
          case 68: break;
          case 29: 
            { yybegin(SHEET); System.out.println("(CMD_SHEET)sheet"); return symbol(LabParserSym.CMD_SHEET);
            }
          case 69: break;
          case 30: 
            { yybegin(ELEMENT); System.out.println("(CMD_VIDEO)video"); return symbol(LabParserSym.CMD_VIDEO);
            }
          case 70: break;
          case 31: 
            { yybegin(ELEMENT); System.out.println("(CMD_CHECK)check"); return symbol(LabParserSym.CMD_CHECK);
            }
          case 71: break;
          case 32: 
            { yybegin(ELEMENT); System.out.println("(CMD_EXPORT)export"); return symbol(LabParserSym.CMD_EXPORT);
            }
          case 72: break;
          case 33: 
            { yybegin(ELEMENT); System.out.println("(CMD_HEADER)header"); return symbol(LabParserSym.CMD_HEADER);
            }
          case 73: break;
          case 34: 
            { yybegin(ELEMENT); System.out.println("(CMD_HORIZONTAL)horizontal"); return symbol(LabParserSym.CMD_HORIZONTAL);
            }
          case 74: break;
          case 35: 
            { yybegin(SHEET); System.out.println("(CMD_VIDEOSHEET)videosheet"); return symbol(LabParserSym.CMD_VIDEOSHEET);
            }
          case 75: break;
          case 36: 
            { yybegin(SHEET); System.out.println("(CMD_CALCYSHEET)calcysheet"); return symbol(LabParserSym.CMD_CALCYSHEET);
            }
          case 76: break;
          case 37: 
            { yybegin(SHEET); System.out.println("(CMD_MOTIONSHEET)motionsheet"); return symbol(LabParserSym.CMD_MOTIONSHEET);
            }
          case 77: break;
          case 38: 
            { yybegin(ELEMENT); System.out.println("(CMD_ENDHORIZONTAL)endhorizontal"); return symbol(LabParserSym.CMD_ENDHORIZONTAL);
            }
          case 78: break;
          case 39: 
            { System.out.println("(FIGURE)(figure omitted)"); return symbol(LabParserSym.LATEXSTRING, "(figure omitted)");
            }
          case 79: break;
          case 40: 
            { yybegin(ELEMENT); System.out.println("(CMD_MOTIONANALYSISGRAPH)"); return symbol(LabParserSym.CMD_MOTIONANALYSISGRAPH);
            }
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
