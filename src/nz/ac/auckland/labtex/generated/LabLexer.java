/* The following code was generated by JFlex 1.6.1 */

/* JFlex file: Labtex language lexer specification */
/* http://www.jflex.de/manual.html#CUPWork */

package nz.ac.auckland.labtex.generated;
import java_cup.runtime.*;

/**
 * A lexer class for the custom Labtex language used by Lablet
 */

public class LabLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TITLE = 2;
  public static final int TITLED = 4;
  public static final int SHEET = 6;
  public static final int ELEMENT = 8;
  public static final int ELEMENTS = 10;
  public static final int TITLE_COMMENT = 12;
  public static final int SHEET_COMMENT = 14;
  public static final int ELEMENT_COMMENT = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  2,  2,  5,  5,  6,  6, 
     7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\2\1\54\1\3\1\1\22\0\1\5\2\0\1\47"+
    "\1\46\1\4\1\45\5\0\1\53\15\0\1\14\3\0\1\6\2\0"+
    "\32\52\1\30\1\16\1\31\1\15\1\50\1\0\1\10\1\11\1\37"+
    "\1\27\1\12\1\32\1\17\1\35\1\20\1\52\1\42\1\7\1\36"+
    "\1\21\1\25\1\44\1\23\1\33\1\34\1\13\1\24\1\43\1\52"+
    "\1\41\1\40\1\52\1\22\1\0\1\26\1\51\6\0\1\54\u1fa2\0"+
    "\1\54\1\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\3\1\1\2\3\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\3\16\3\3"+
    "\1\17\1\20\1\6\10\0\1\21\1\22\1\23\1\24"+
    "\6\25\1\0\4\26\2\0\4\27\2\0\4\30\4\0"+
    "\3\25\1\26\1\0\1\27\1\0\1\30\3\0\1\31"+
    "\3\25\1\26\1\0\1\27\1\0\1\30\3\0\2\25"+
    "\1\32\5\0\2\25\5\0\1\25\6\0\1\25\6\0"+
    "\1\33\164\0\1\34\12\0\1\34\10\0\1\34\10\0"+
    "\1\34\10\0\1\35\1\36\3\0\1\37\1\40\3\0"+
    "\1\35\1\36\3\0\1\37\1\40\1\0\1\35\1\36"+
    "\3\0\1\37\1\40\1\0\1\35\1\36\3\0\1\37"+
    "\1\40\1\41\1\42\4\0\1\41\1\42\2\0\1\41"+
    "\1\42\2\0\1\41\1\42\56\0\1\43\4\0\1\43"+
    "\2\0\1\43\2\0\1\43\1\0\1\44\3\0\1\44"+
    "\1\0\1\44\1\0\1\44\32\0\1\45\15\0\1\46"+
    "\1\0\3\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u0195"+
    "\0\u0168\0\u02a3\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168"+
    "\0\u0168\0\u0168\0\u0195\0\u01c2\0\u02d0\0\u02fd\0\u032a\0\u0195"+
    "\0\u0195\0\u0357\0\u0384\0\u01c2\0\u03b1\0\u03de\0\u0195\0\u040b"+
    "\0\u0438\0\u0465\0\u0492\0\u0168\0\u0168\0\u04bf\0\u04ec\0\u0519"+
    "\0\u0465\0\u0168\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627"+
    "\0\u0384\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u03b1\0\u0735"+
    "\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u03de\0\u0816\0\u0843\0\u0870"+
    "\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u05a0\0\u0951\0\u0681\0\u097e"+
    "\0\u0762\0\u09ab\0\u09d8\0\u0a05\0\u0168\0\u0a32\0\u0a5f\0\u0a8c"+
    "\0\u0951\0\u0ab9\0\u097e\0\u0ae6\0\u09ab\0\u0b13\0\u0b40\0\u0b6d"+
    "\0\u0b9a\0\u0bc7\0\u04ec\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8"+
    "\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10"+
    "\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78"+
    "\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u04ec\0\u1086\0\u10b3"+
    "\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b"+
    "\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383"+
    "\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb"+
    "\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653"+
    "\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb"+
    "\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923"+
    "\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b"+
    "\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3"+
    "\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b"+
    "\0\u1d88\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3"+
    "\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b"+
    "\0\u2058\0\u2085\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193"+
    "\0\u21c0\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb"+
    "\0\u2328\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463"+
    "\0\u2490\0\u24bd\0\u0168\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e"+
    "\0\u25cb\0\u25f8\0\u2625\0\u2652\0\u267f\0\u05a0\0\u26ac\0\u26d9"+
    "\0\u2706\0\u2733\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u0681\0\u2814"+
    "\0\u2841\0\u286e\0\u289b\0\u28c8\0\u28f5\0\u2922\0\u294f\0\u0762"+
    "\0\u297c\0\u29a9\0\u29d6\0\u2a03\0\u2a30\0\u2a5d\0\u2a8a\0\u2ab7"+
    "\0\u0168\0\u0168\0\u2ae4\0\u2b11\0\u2b3e\0\u0168\0\u0168\0\u2b6b"+
    "\0\u2b98\0\u2bc5\0\u05a0\0\u05a0\0\u2bf2\0\u2c1f\0\u2c4c\0\u05a0"+
    "\0\u05a0\0\u2c79\0\u0681\0\u0681\0\u2ca6\0\u2cd3\0\u2d00\0\u0681"+
    "\0\u0681\0\u2d2d\0\u0762\0\u0762\0\u2d5a\0\u2d87\0\u2db4\0\u0762"+
    "\0\u0762\0\u0168\0\u0168\0\u2de1\0\u2e0e\0\u2e3b\0\u2e68\0\u05a0"+
    "\0\u05a0\0\u2e95\0\u2ec2\0\u0681\0\u0681\0\u2eef\0\u2f1c\0\u0762"+
    "\0\u0762\0\u2f49\0\u2f76\0\u2fa3\0\u2fd0\0\u2ffd\0\u302a\0\u3057"+
    "\0\u3084\0\u30b1\0\u30de\0\u310b\0\u3138\0\u3165\0\u3192\0\u31bf"+
    "\0\u31ec\0\u3219\0\u3246\0\u3273\0\u32a0\0\u32cd\0\u32fa\0\u3327"+
    "\0\u3354\0\u3381\0\u33ae\0\u33db\0\u3408\0\u3435\0\u3462\0\u348f"+
    "\0\u34bc\0\u34e9\0\u3516\0\u3543\0\u3570\0\u359d\0\u35ca\0\u35f7"+
    "\0\u3624\0\u3651\0\u367e\0\u36ab\0\u36d8\0\u3705\0\u3732\0\u0168"+
    "\0\u375f\0\u378c\0\u37b9\0\u37e6\0\u05a0\0\u3813\0\u3840\0\u0681"+
    "\0\u386d\0\u389a\0\u0762\0\u38c7\0\u0168\0\u38f4\0\u3921\0\u394e"+
    "\0\u05a0\0\u397b\0\u0681\0\u39a8\0\u0762\0\u39d5\0\u3a02\0\u3a2f"+
    "\0\u3a5c\0\u3a89\0\u3ab6\0\u3ae3\0\u3b10\0\u3b3d\0\u3b6a\0\u3b97"+
    "\0\u3bc4\0\u3bf1\0\u3c1e\0\u3c4b\0\u3c78\0\u3ca5\0\u3cd2\0\u3cff"+
    "\0\u3d2c\0\u3d59\0\u3d86\0\u3db3\0\u3de0\0\u3e0d\0\u3e3a\0\u0168"+
    "\0\u3e67\0\u3e94\0\u3ec1\0\u3eee\0\u3f1b\0\u3f48\0\u3f75\0\u3fa2"+
    "\0\u3fcf\0\u3ffc\0\u4029\0\u4056\0\u4083\0\u0168\0\u40b0\0\u05a0"+
    "\0\u0681\0\u0762";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\4\11\1\12\11\11\1\13\36\11\1\14\1\15\1\16"+
    "\1\17\1\20\1\17\7\14\1\21\1\22\3\14\1\23"+
    "\3\14\1\24\16\14\1\25\1\26\1\27\1\30\1\31"+
    "\3\14\4\32\1\33\11\32\1\34\36\32\1\14\1\35"+
    "\1\36\1\37\1\40\1\37\7\14\1\21\1\22\3\14"+
    "\1\23\3\14\1\24\16\14\1\25\1\26\1\27\1\30"+
    "\1\31\4\14\1\15\1\16\1\17\1\41\1\17\7\14"+
    "\1\21\1\42\3\14\1\23\3\14\1\24\16\14\1\25"+
    "\1\26\1\27\1\30\1\31\3\14\4\0\1\43\11\0"+
    "\1\44\42\0\1\45\11\0\1\44\42\0\1\46\11\0"+
    "\1\44\120\0\1\47\1\50\57\0\1\51\16\0\1\52"+
    "\24\0\1\14\5\0\7\14\2\0\3\14\1\0\3\14"+
    "\1\0\16\14\5\0\3\14\1\0\1\53\2\16\1\0"+
    "\1\16\50\0\2\53\1\16\1\0\1\16\50\0\1\15"+
    "\1\16\1\17\1\0\1\17\53\0\1\54\4\0\1\51"+
    "\4\0\1\55\11\0\1\52\25\0\1\56\2\36\1\0"+
    "\1\36\50\0\2\56\1\36\1\0\1\36\50\0\1\35"+
    "\1\36\1\37\1\0\1\37\53\0\1\54\2\0\2\57"+
    "\1\60\2\57\2\0\1\55\3\57\1\0\3\57\1\0"+
    "\1\57\1\61\1\62\1\63\2\57\1\64\7\57\3\0"+
    "\1\57\1\0\1\57\1\62\1\0\1\65\1\66\1\67"+
    "\1\70\1\65\1\71\1\72\45\65\1\0\1\73\1\74"+
    "\1\75\1\76\1\73\1\77\1\100\45\73\1\0\1\101"+
    "\1\102\1\103\1\104\1\101\1\105\1\106\45\101\7\0"+
    "\1\107\60\0\1\110\42\0\16\52\1\111\36\52\1\0"+
    "\3\53\1\0\1\53\50\0\3\56\1\0\1\56\56\0"+
    "\5\57\3\0\3\57\1\0\3\57\1\0\1\57\2\0"+
    "\13\57\3\0\1\57\1\0\1\57\11\0\3\57\1\112"+
    "\1\57\3\0\3\57\1\0\3\57\1\0\1\57\2\0"+
    "\13\57\3\0\1\57\1\0\1\57\11\0\5\57\3\0"+
    "\3\57\1\0\2\57\1\113\1\0\1\57\2\0\13\57"+
    "\3\0\1\57\1\0\1\57\11\0\5\57\3\0\3\57"+
    "\1\0\3\57\1\0\1\57\2\0\1\57\1\114\11\57"+
    "\3\0\1\57\1\0\1\57\2\0\1\65\1\66\1\67"+
    "\1\70\1\65\1\115\46\65\3\0\2\67\1\0\1\67"+
    "\52\0\1\67\1\0\1\67\50\0\1\66\1\67\1\70"+
    "\1\0\1\70\47\0\1\65\1\66\1\67\1\70\1\65"+
    "\1\115\1\116\45\65\1\0\1\73\1\74\1\75\1\76"+
    "\1\73\1\117\46\73\3\0\2\75\1\0\1\75\52\0"+
    "\1\75\1\0\1\75\50\0\1\74\1\75\1\76\1\0"+
    "\1\76\47\0\1\73\1\74\1\75\1\76\1\73\1\117"+
    "\1\120\45\73\1\0\1\101\1\102\1\103\1\104\1\101"+
    "\1\121\46\101\3\0\2\103\1\0\1\103\52\0\1\103"+
    "\1\0\1\103\50\0\1\102\1\103\1\104\1\0\1\104"+
    "\47\0\1\101\1\102\1\103\1\104\1\101\1\121\1\122"+
    "\45\101\6\0\1\107\1\0\1\123\64\0\1\124\35\0"+
    "\16\52\1\111\12\52\1\125\23\52\7\0\5\57\3\0"+
    "\1\126\2\57\1\0\3\57\1\0\1\57\2\0\13\57"+
    "\3\0\1\57\1\0\1\57\11\0\5\57\3\0\3\57"+
    "\1\0\2\57\1\127\1\0\1\57\2\0\13\57\3\0"+
    "\1\57\1\0\1\57\11\0\3\57\1\130\1\57\3\0"+
    "\3\57\1\0\3\57\1\0\1\57\2\0\13\57\3\0"+
    "\1\57\1\0\1\57\2\0\1\65\1\66\1\67\1\70"+
    "\1\65\1\131\1\65\1\132\44\65\1\0\1\73\1\74"+
    "\1\75\1\76\1\73\1\133\1\73\1\134\44\73\1\0"+
    "\1\101\1\102\1\103\1\104\1\101\1\135\1\101\1\136"+
    "\44\101\11\0\1\137\64\0\1\140\43\0\5\57\3\0"+
    "\1\57\1\141\1\57\1\0\3\57\1\0\1\57\2\0"+
    "\13\57\3\0\1\57\1\0\1\57\11\0\4\57\1\142"+
    "\3\0\3\57\1\0\3\57\1\0\1\57\2\0\13\57"+
    "\3\0\1\57\1\0\1\57\11\0\5\57\3\0\3\57"+
    "\1\0\3\57\1\0\1\57\2\0\1\143\12\57\3\0"+
    "\1\57\1\0\1\57\2\0\1\65\1\66\1\67\1\70"+
    "\1\65\1\115\2\65\1\144\43\65\1\0\1\73\1\74"+
    "\1\75\1\76\1\73\1\117\2\73\1\145\43\73\1\0"+
    "\1\101\1\102\1\103\1\104\1\101\1\121\2\101\1\146"+
    "\43\101\12\0\1\147\64\0\1\150\42\0\5\57\3\0"+
    "\2\57\1\151\1\0\3\57\1\0\1\57\2\0\13\57"+
    "\3\0\1\57\1\0\1\57\11\0\5\57\3\0\2\57"+
    "\1\152\1\0\3\57\1\0\1\57\2\0\13\57\3\0"+
    "\1\57\1\0\1\57\2\0\1\65\1\66\1\67\1\70"+
    "\1\65\1\115\3\65\1\153\42\65\1\0\1\73\1\74"+
    "\1\75\1\76\1\73\1\117\3\73\1\154\42\73\1\0"+
    "\1\101\1\102\1\103\1\104\1\101\1\121\3\101\1\155"+
    "\42\101\10\0\1\156\67\0\1\157\41\0\5\57\3\0"+
    "\3\57\1\157\3\57\1\0\1\57\2\0\13\57\3\0"+
    "\1\57\1\0\1\57\11\0\5\57\3\0\3\57\1\0"+
    "\2\57\1\160\1\0\1\57\2\0\13\57\3\0\1\57"+
    "\1\0\1\57\2\0\1\65\1\66\1\67\1\70\1\65"+
    "\1\115\1\65\1\161\44\65\1\0\1\73\1\74\1\75"+
    "\1\76\1\73\1\117\1\73\1\162\44\73\1\0\1\101"+
    "\1\102\1\103\1\104\1\101\1\121\1\101\1\163\44\101"+
    "\13\0\1\164\54\0\1\165\17\0\1\166\31\0\4\57"+
    "\1\167\3\0\3\57\1\0\3\57\1\0\1\57\2\0"+
    "\13\57\3\0\1\57\1\0\1\57\2\0\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\4\65\1\170\41\65\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\4\73\1\171"+
    "\41\73\1\0\1\101\1\102\1\103\1\104\1\101\1\121"+
    "\4\101\1\172\41\101\14\0\1\173\64\0\1\174\51\0"+
    "\1\175\43\0\3\57\1\176\1\57\3\0\3\57\1\0"+
    "\3\57\1\0\1\57\2\0\13\57\3\0\1\57\1\0"+
    "\1\57\2\0\1\65\1\66\1\67\1\70\1\65\1\115"+
    "\5\65\1\177\40\65\1\0\1\73\1\74\1\75\1\76"+
    "\1\73\1\117\5\73\1\200\40\73\1\0\1\101\1\102"+
    "\1\103\1\104\1\101\1\121\5\101\1\201\40\101\15\0"+
    "\1\202\64\0\1\203\47\0\1\204\35\0\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\6\65\1\205\37\65\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\6\73\1\206"+
    "\37\73\1\0\1\101\1\102\1\103\1\104\1\101\1\121"+
    "\6\101\1\207\37\101\13\0\1\210\1\211\20\0\1\212"+
    "\1\213\1\214\1\215\3\0\1\216\21\0\1\217\70\0"+
    "\1\220\30\0\1\65\1\66\1\67\1\70\1\65\1\115"+
    "\4\65\1\221\1\222\20\65\1\223\1\224\1\225\1\226"+
    "\3\65\1\227\10\65\1\0\1\73\1\74\1\75\1\76"+
    "\1\73\1\117\4\73\1\230\1\231\20\73\1\232\1\233"+
    "\1\234\1\235\3\73\1\236\10\73\1\0\1\101\1\102"+
    "\1\103\1\104\1\101\1\121\4\101\1\237\1\240\20\101"+
    "\1\241\1\242\1\243\1\244\3\101\1\245\10\101\42\0"+
    "\1\246\25\0\1\247\5\0\1\250\71\0\1\251\31\0"+
    "\1\252\67\0\1\253\37\0\1\254\24\0\1\255\37\0"+
    "\1\256\47\0\1\257\74\0\1\260\21\0\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\33\65\1\261\12\65\1\0"+
    "\1\65\1\66\1\67\1\70\1\65\1\115\4\65\1\262"+
    "\5\65\1\263\33\65\1\0\1\65\1\66\1\67\1\70"+
    "\1\65\1\115\27\65\1\264\16\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\4\65\1\265\41\65\1\0"+
    "\1\65\1\66\1\67\1\70\1\65\1\115\17\65\1\266"+
    "\26\65\1\0\1\65\1\66\1\67\1\70\1\65\1\115"+
    "\2\65\1\267\24\65\1\270\16\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\12\65\1\271\33\65\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\33\73\1\272"+
    "\12\73\1\0\1\73\1\74\1\75\1\76\1\73\1\117"+
    "\4\73\1\273\5\73\1\274\33\73\1\0\1\73\1\74"+
    "\1\75\1\76\1\73\1\117\27\73\1\275\16\73\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\4\73\1\276"+
    "\41\73\1\0\1\73\1\74\1\75\1\76\1\73\1\117"+
    "\17\73\1\277\26\73\1\0\1\73\1\74\1\75\1\76"+
    "\1\73\1\117\2\73\1\300\24\73\1\301\16\73\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\12\73\1\302"+
    "\33\73\1\0\1\101\1\102\1\103\1\104\1\101\1\121"+
    "\33\101\1\303\12\101\1\0\1\101\1\102\1\103\1\104"+
    "\1\101\1\121\4\101\1\304\5\101\1\305\33\101\1\0"+
    "\1\101\1\102\1\103\1\104\1\101\1\121\27\101\1\306"+
    "\16\101\1\0\1\101\1\102\1\103\1\104\1\101\1\121"+
    "\4\101\1\307\41\101\1\0\1\101\1\102\1\103\1\104"+
    "\1\101\1\121\17\101\1\310\26\101\1\0\1\101\1\102"+
    "\1\103\1\104\1\101\1\121\2\101\1\311\24\101\1\312"+
    "\16\101\1\0\1\101\1\102\1\103\1\104\1\101\1\121"+
    "\12\101\1\313\33\101\45\0\1\314\51\0\1\315\26\0"+
    "\1\316\53\0\1\317\52\0\1\320\57\0\1\321\50\0"+
    "\1\322\57\0\1\323\71\0\1\324\45\0\1\325\46\0"+
    "\1\326\42\0\1\65\1\66\1\67\1\70\1\65\1\115"+
    "\36\65\1\327\7\65\1\0\1\65\1\66\1\67\1\70"+
    "\1\65\1\115\33\65\1\330\12\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\5\65\1\331\40\65\1\0"+
    "\1\65\1\66\1\67\1\70\1\65\1\115\4\65\1\332"+
    "\41\65\1\0\1\65\1\66\1\67\1\70\1\65\1\115"+
    "\2\65\1\333\43\65\1\0\1\65\1\66\1\67\1\70"+
    "\1\65\1\115\5\65\1\334\40\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\1\65\1\335\44\65\1\0"+
    "\1\65\1\66\1\67\1\70\1\65\1\115\4\65\1\336"+
    "\41\65\1\0\1\65\1\66\1\67\1\70\1\65\1\115"+
    "\21\65\1\337\24\65\1\0\1\73\1\74\1\75\1\76"+
    "\1\73\1\117\36\73\1\340\7\73\1\0\1\73\1\74"+
    "\1\75\1\76\1\73\1\117\33\73\1\341\12\73\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\5\73\1\342"+
    "\40\73\1\0\1\73\1\74\1\75\1\76\1\73\1\117"+
    "\4\73\1\343\41\73\1\0\1\73\1\74\1\75\1\76"+
    "\1\73\1\117\2\73\1\344\43\73\1\0\1\73\1\74"+
    "\1\75\1\76\1\73\1\117\5\73\1\345\40\73\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\1\73\1\346"+
    "\44\73\1\0\1\73\1\74\1\75\1\76\1\73\1\117"+
    "\4\73\1\347\41\73\1\0\1\73\1\74\1\75\1\76"+
    "\1\73\1\117\21\73\1\350\24\73\1\0\1\101\1\102"+
    "\1\103\1\104\1\101\1\121\36\101\1\351\7\101\1\0"+
    "\1\101\1\102\1\103\1\104\1\101\1\121\33\101\1\352"+
    "\12\101\1\0\1\101\1\102\1\103\1\104\1\101\1\121"+
    "\5\101\1\353\40\101\1\0\1\101\1\102\1\103\1\104"+
    "\1\101\1\121\4\101\1\354\41\101\1\0\1\101\1\102"+
    "\1\103\1\104\1\101\1\121\2\101\1\355\43\101\1\0"+
    "\1\101\1\102\1\103\1\104\1\101\1\121\5\101\1\356"+
    "\40\101\1\0\1\101\1\102\1\103\1\104\1\101\1\121"+
    "\1\101\1\357\44\101\1\0\1\101\1\102\1\103\1\104"+
    "\1\101\1\121\4\101\1\360\41\101\1\0\1\101\1\102"+
    "\1\103\1\104\1\101\1\121\21\101\1\361\24\101\26\0"+
    "\1\362\42\0\1\363\50\0\1\364\57\0\1\365\71\0"+
    "\1\366\45\0\1\367\73\0\1\370\54\0\1\371\27\0"+
    "\1\372\67\0\1\373\55\0\1\374\26\0\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\17\65\1\375\26\65\1\0"+
    "\1\65\1\66\1\67\1\70\1\65\1\115\5\65\1\376"+
    "\40\65\1\0\1\65\1\66\1\67\1\70\1\65\1\115"+
    "\1\65\1\377\44\65\1\0\1\65\1\66\1\67\1\70"+
    "\1\65\1\115\4\65\1\u0100\41\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\21\65\1\u0101\24\65\1\0"+
    "\1\65\1\66\1\67\1\70\1\65\1\115\12\65\1\u0102"+
    "\33\65\1\0\1\65\1\66\1\67\1\70\1\65\1\115"+
    "\31\65\1\u0103\14\65\1\0\1\65\1\66\1\67\1\70"+
    "\1\65\1\115\31\65\1\u0104\14\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\4\65\1\u0105\41\65\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\17\73\1\u0106"+
    "\26\73\1\0\1\73\1\74\1\75\1\76\1\73\1\117"+
    "\5\73\1\u0107\40\73\1\0\1\73\1\74\1\75\1\76"+
    "\1\73\1\117\1\73\1\u0108\44\73\1\0\1\73\1\74"+
    "\1\75\1\76\1\73\1\117\4\73\1\u0109\41\73\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\21\73\1\u010a"+
    "\24\73\1\0\1\73\1\74\1\75\1\76\1\73\1\117"+
    "\12\73\1\u010b\33\73\1\0\1\73\1\74\1\75\1\76"+
    "\1\73\1\117\31\73\1\u010c\14\73\1\0\1\73\1\74"+
    "\1\75\1\76\1\73\1\117\31\73\1\u010d\14\73\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\4\73\1\u010e"+
    "\41\73\1\0\1\101\1\102\1\103\1\104\1\101\1\121"+
    "\17\101\1\u010f\26\101\1\0\1\101\1\102\1\103\1\104"+
    "\1\101\1\121\5\101\1\u0110\40\101\1\0\1\101\1\102"+
    "\1\103\1\104\1\101\1\121\1\101\1\u0111\44\101\1\0"+
    "\1\101\1\102\1\103\1\104\1\101\1\121\4\101\1\u0112"+
    "\41\101\1\0\1\101\1\102\1\103\1\104\1\101\1\121"+
    "\21\101\1\u0113\24\101\1\0\1\101\1\102\1\103\1\104"+
    "\1\101\1\121\12\101\1\u0114\33\101\1\0\1\101\1\102"+
    "\1\103\1\104\1\101\1\121\31\101\1\u0115\14\101\1\0"+
    "\1\101\1\102\1\103\1\104\1\101\1\121\31\101\1\u0116"+
    "\14\101\1\0\1\101\1\102\1\103\1\104\1\101\1\121"+
    "\4\101\1\u0117\41\101\34\0\1\u0118\33\0\1\u0119\55\0"+
    "\1\u011a\53\0\1\u011b\67\0\1\u011c\67\0\1\u011d\56\0"+
    "\1\u011e\37\0\1\u011f\50\0\1\u0120\33\0\16\374\1\u0121"+
    "\36\374\1\65\1\66\1\67\1\70\1\65\1\115\25\65"+
    "\1\u0122\20\65\1\0\1\65\1\66\1\67\1\70\1\65"+
    "\1\115\4\65\1\u0123\41\65\1\0\1\65\1\66\1\67"+
    "\1\70\1\65\1\115\5\65\1\u0124\40\65\1\0\1\65"+
    "\1\66\1\67\1\70\1\65\1\115\4\65\1\u0125\41\65"+
    "\1\0\1\65\1\66\1\67\1\70\1\65\1\115\17\65"+
    "\1\u0126\26\65\1\0\1\65\1\66\1\67\1\70\1\65"+
    "\1\115\32\65\1\u0127\13\65\1\0\1\65\1\66\1\67"+
    "\1\70\1\65\1\115\34\65\1\u0128\11\65\1\0\1\65"+
    "\1\66\1\67\1\70\1\65\1\115\17\65\1\u0129\26\65"+
    "\1\0\1\73\1\74\1\75\1\76\1\73\1\117\25\73"+
    "\1\u012a\20\73\1\0\1\73\1\74\1\75\1\76\1\73"+
    "\1\117\4\73\1\u012b\41\73\1\0\1\73\1\74\1\75"+
    "\1\76\1\73\1\117\5\73\1\u012c\40\73\1\0\1\73"+
    "\1\74\1\75\1\76\1\73\1\117\4\73\1\u012d\41\73"+
    "\1\0\1\73\1\74\1\75\1\76\1\73\1\117\17\73"+
    "\1\u012e\26\73\1\0\1\73\1\74\1\75\1\76\1\73"+
    "\1\117\32\73\1\u012f\13\73\1\0\1\73\1\74\1\75"+
    "\1\76\1\73\1\117\34\73\1\u0130\11\73\1\0\1\73"+
    "\1\74\1\75\1\76\1\73\1\117\17\73\1\u0131\26\73"+
    "\1\0\1\101\1\102\1\103\1\104\1\101\1\121\25\101"+
    "\1\u0132\20\101\1\0\1\101\1\102\1\103\1\104\1\101"+
    "\1\121\4\101\1\u0133\41\101\1\0\1\101\1\102\1\103"+
    "\1\104\1\101\1\121\5\101\1\u0134\40\101\1\0\1\101"+
    "\1\102\1\103\1\104\1\101\1\121\4\101\1\u0135\41\101"+
    "\1\0\1\101\1\102\1\103\1\104\1\101\1\121\17\101"+
    "\1\u0136\26\101\1\0\1\101\1\102\1\103\1\104\1\101"+
    "\1\121\32\101\1\u0137\13\101\1\0\1\101\1\102\1\103"+
    "\1\104\1\101\1\121\34\101\1\u0138\11\101\1\0\1\101"+
    "\1\102\1\103\1\104\1\101\1\121\17\101\1\u0139\26\101"+
    "\14\0\1\u013a\74\0\1\u013b\42\0\1\u013c\67\0\1\u013d"+
    "\46\0\1\u013e\26\0\12\374\1\u013f\3\374\1\u0121\36\374"+
    "\1\65\1\66\1\67\1\70\1\65\1\115\5\65\1\u0140"+
    "\40\65\1\0\1\65\1\66\1\67\1\70\1\65\1\115"+
    "\25\65\1\u0141\20\65\1\0\1\65\1\66\1\67\1\70"+
    "\1\65\1\115\13\65\1\u0142\32\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\26\65\1\u0143\17\65\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\5\73\1\u0144"+
    "\40\73\1\0\1\73\1\74\1\75\1\76\1\73\1\117"+
    "\25\73\1\u0145\20\73\1\0\1\73\1\74\1\75\1\76"+
    "\1\73\1\117\13\73\1\u0146\32\73\1\0\1\73\1\74"+
    "\1\75\1\76\1\73\1\117\26\73\1\u0147\17\73\1\0"+
    "\1\101\1\102\1\103\1\104\1\101\1\121\5\101\1\u0148"+
    "\40\101\1\0\1\101\1\102\1\103\1\104\1\101\1\121"+
    "\25\101\1\u0149\20\101\1\0\1\101\1\102\1\103\1\104"+
    "\1\101\1\121\13\101\1\u014a\32\101\1\0\1\101\1\102"+
    "\1\103\1\104\1\101\1\121\26\101\1\u014b\17\101\11\0"+
    "\1\u014c\23\0\1\u014d\55\0\1\u014e\17\0\16\u013e\1\u014f"+
    "\36\u013e\16\374\1\u0121\2\374\1\u0150\33\374\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\2\65\1\u0151\23\65\1\u0152"+
    "\17\65\1\0\1\65\1\66\1\67\1\70\1\65\1\115"+
    "\27\65\1\u0153\16\65\1\0\1\73\1\74\1\75\1\76"+
    "\1\73\1\117\2\73\1\u0154\23\73\1\u0155\17\73\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\27\73\1\u0156"+
    "\16\73\1\0\1\101\1\102\1\103\1\104\1\101\1\121"+
    "\2\101\1\u0157\23\101\1\u0158\17\101\1\0\1\101\1\102"+
    "\1\103\1\104\1\101\1\121\27\101\1\u0159\16\101\22\0"+
    "\1\u015a\70\0\1\u015b\31\0\1\u015c\42\0\12\u013e\1\u015d"+
    "\3\u013e\1\u014f\36\u013e\16\374\1\u0121\10\374\1\u015e\25\374"+
    "\1\65\1\66\1\67\1\70\1\65\1\115\13\65\1\u015f"+
    "\32\65\1\0\1\65\1\66\1\67\1\70\1\65\1\115"+
    "\27\65\1\u0160\16\65\1\0\1\65\1\66\1\67\1\70"+
    "\1\65\1\115\4\65\1\u0161\41\65\1\0\1\73\1\74"+
    "\1\75\1\76\1\73\1\117\13\73\1\u0162\32\73\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\27\73\1\u0163"+
    "\16\73\1\0\1\73\1\74\1\75\1\76\1\73\1\117"+
    "\4\73\1\u0164\41\73\1\0\1\101\1\102\1\103\1\104"+
    "\1\101\1\121\13\101\1\u0165\32\101\1\0\1\101\1\102"+
    "\1\103\1\104\1\101\1\121\27\101\1\u0166\16\101\1\0"+
    "\1\101\1\102\1\103\1\104\1\101\1\121\4\101\1\u0167"+
    "\41\101\11\0\1\u0168\56\0\1\u0169\54\0\1\u016a\42\0"+
    "\16\u013e\1\u014f\2\u013e\1\u016b\33\u013e\16\374\1\u0121\3\374"+
    "\1\u016c\32\374\1\65\1\66\1\67\1\70\1\65\1\115"+
    "\2\65\1\u016d\43\65\1\0\1\65\1\66\1\67\1\70"+
    "\1\65\1\115\4\65\1\u016e\41\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\4\65\1\u016f\41\65\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\2\73\1\u0170"+
    "\43\73\1\0\1\73\1\74\1\75\1\76\1\73\1\117"+
    "\4\73\1\u0171\41\73\1\0\1\73\1\74\1\75\1\76"+
    "\1\73\1\117\4\73\1\u0172\41\73\1\0\1\101\1\102"+
    "\1\103\1\104\1\101\1\121\2\101\1\u0173\43\101\1\0"+
    "\1\101\1\102\1\103\1\104\1\101\1\121\4\101\1\u0174"+
    "\41\101\1\0\1\101\1\102\1\103\1\104\1\101\1\121"+
    "\4\101\1\u0175\41\101\10\0\1\u0176\57\0\1\u0177\55\0"+
    "\1\u0178\41\0\16\u013e\1\u014f\10\u013e\1\u0179\25\u013e\16\374"+
    "\1\u0121\13\374\1\u017a\22\374\1\65\1\66\1\67\1\70"+
    "\1\65\1\115\1\65\1\u017b\44\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\4\65\1\u017c\41\65\1\0"+
    "\1\65\1\66\1\67\1\70\1\65\1\115\5\65\1\u017d"+
    "\40\65\1\0\1\73\1\74\1\75\1\76\1\73\1\117"+
    "\1\73\1\u017e\44\73\1\0\1\73\1\74\1\75\1\76"+
    "\1\73\1\117\4\73\1\u017f\41\73\1\0\1\73\1\74"+
    "\1\75\1\76\1\73\1\117\5\73\1\u0180\40\73\1\0"+
    "\1\101\1\102\1\103\1\104\1\101\1\121\1\101\1\u0181"+
    "\44\101\1\0\1\101\1\102\1\103\1\104\1\101\1\121"+
    "\4\101\1\u0182\41\101\1\0\1\101\1\102\1\103\1\104"+
    "\1\101\1\121\5\101\1\u0183\40\101\41\0\1\u0184\27\0"+
    "\1\u0185\41\0\16\u013e\1\u014f\3\u013e\1\u0186\32\u013e\16\374"+
    "\1\u0121\1\374\1\u0187\34\374\1\65\1\66\1\67\1\70"+
    "\1\65\1\115\32\65\1\u0188\13\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\65\1\115\5\65\1\u0189\40\65\1\0"+
    "\1\73\1\74\1\75\1\76\1\73\1\117\32\73\1\u018a"+
    "\13\73\1\0\1\73\1\74\1\75\1\76\1\73\1\117"+
    "\5\73\1\u018b\40\73\1\0\1\101\1\102\1\103\1\104"+
    "\1\101\1\121\32\101\1\u018c\13\101\1\0\1\101\1\102"+
    "\1\103\1\104\1\101\1\121\5\101\1\u018d\40\101\35\0"+
    "\1\u018e\20\0\12\u013e\1\u018f\3\u013e\1\u014f\36\u013e\16\374"+
    "\1\u0121\1\u0190\35\374\1\65\1\66\1\67\1\70\1\65"+
    "\1\115\26\65\1\u0191\17\65\1\0\1\73\1\74\1\75"+
    "\1\76\1\73\1\117\26\73\1\u0192\17\73\1\0\1\101"+
    "\1\102\1\103\1\104\1\101\1\121\26\101\1\u0193\17\101"+
    "\21\0\1\u0194\34\0\16\u013e\1\u014f\4\u013e\1\u0195\31\u013e"+
    "\16\374\1\u0121\5\374\1\u0196\30\374\1\65\1\66\1\67"+
    "\1\70\1\65\1\115\12\65\1\u0197\33\65\1\0\1\73"+
    "\1\74\1\75\1\76\1\73\1\117\12\73\1\u0198\33\73"+
    "\1\0\1\101\1\102\1\103\1\104\1\101\1\121\12\101"+
    "\1\u0199\33\101\35\0\1\u019a\20\0\16\u013e\1\u014f\5\u013e"+
    "\1\u019b\30\u013e\16\374\1\u0121\14\374\1\u019c\21\374\1\65"+
    "\1\66\1\67\1\70\1\65\1\115\26\65\1\u019d\17\65"+
    "\1\0\1\73\1\74\1\75\1\76\1\73\1\117\26\73"+
    "\1\u019e\17\73\1\0\1\101\1\102\1\103\1\104\1\101"+
    "\1\121\26\101\1\u019f\17\101\20\0\1\u01a0\35\0\10\u013e"+
    "\1\u01a1\5\u013e\1\u014f\36\u013e\12\374\1\u01a2\3\374\1\u0121"+
    "\36\374\1\65\1\66\1\67\1\70\1\65\1\115\11\65"+
    "\1\u01a3\34\65\1\0\1\73\1\74\1\75\1\76\1\73"+
    "\1\117\11\73\1\u01a4\34\73\1\0\1\101\1\102\1\103"+
    "\1\104\1\101\1\121\11\101\1\u01a5\34\101\34\0\1\u01a6"+
    "\21\0\13\u013e\1\u01a7\2\u013e\1\u014f\36\u013e\16\374\1\u0121"+
    "\7\374\1\u01a8\26\374\1\65\1\66\1\67\1\70\1\65"+
    "\1\115\25\65\1\u01a9\20\65\1\0\1\73\1\74\1\75"+
    "\1\76\1\73\1\117\25\73\1\u01aa\20\73\1\0\1\101"+
    "\1\102\1\103\1\104\1\101\1\121\25\101\1\u01ab\20\101"+
    "\11\0\1\u01ac\44\0\16\u013e\1\u014f\1\u013e\1\u01ad\34\u013e"+
    "\1\65\1\66\1\67\1\70\1\65\1\115\2\65\1\u01ae"+
    "\43\65\1\0\1\73\1\74\1\75\1\76\1\73\1\117"+
    "\2\73\1\u01af\43\73\1\0\1\101\1\102\1\103\1\104"+
    "\1\101\1\121\2\101\1\u01b0\43\101\45\0\1\u01b1\10\0"+
    "\16\u013e\1\u014f\6\u013e\1\u01b2\27\u013e\1\65\1\66\1\67"+
    "\1\70\1\65\1\115\36\65\1\u01b3\7\65\1\0\1\73"+
    "\1\74\1\75\1\76\1\73\1\117\36\73\1\u01b4\7\73"+
    "\1\0\1\101\1\102\1\103\1\104\1\101\1\121\36\101"+
    "\1\u01b5\7\101\36\0\1\u01b6\17\0\16\u013e\1\u014f\2\u013e"+
    "\1\u01b7\33\u013e\1\65\1\66\1\67\1\70\1\65\1\115"+
    "\27\65\1\u01b8\16\65\1\0\1\73\1\74\1\75\1\76"+
    "\1\73\1\117\27\73\1\u01b9\16\73\1\0\1\101\1\102"+
    "\1\103\1\104\1\101\1\121\27\101\1\u01ba\16\101\1\0"+
    "\16\u013e\1\u014f\7\u013e\1\125\26\u013e";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16605];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\7\1\1\11\1\1\10\11\10\1\10\0"+
    "\1\1\2\11\4\1\1\11\2\1\1\0\4\1\2\0"+
    "\4\1\2\0\4\1\4\0\4\1\1\0\1\1\1\0"+
    "\1\1\3\0\1\11\4\1\1\0\1\1\1\0\1\1"+
    "\3\0\3\1\5\0\2\1\5\0\1\1\6\0\1\1"+
    "\6\0\1\1\164\0\1\11\12\0\1\1\10\0\1\1"+
    "\10\0\1\1\10\0\2\11\3\0\2\11\3\0\2\1"+
    "\3\0\2\1\1\0\2\1\3\0\2\1\1\0\2\1"+
    "\3\0\2\1\2\11\4\0\2\1\2\0\2\1\2\0"+
    "\2\1\56\0\1\11\4\0\1\1\2\0\1\1\2\0"+
    "\1\1\1\0\1\11\3\0\1\1\1\0\1\1\1\0"+
    "\1\1\32\0\1\11\15\0\1\11\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();
	int prior_state = 0;

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	private String escapeForLua(String str) {
	    return str.replace("\"", "\\\"")
	              .replace("\'", "\\\'")
	              .replace("[", "\\[")
	              .replace("]", "\\]")
	              .replace("``", "\\\"");
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LabLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(LabParserSym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* System.out.println("(IGNORE)"+yytext()); */
            }
          case 39: break;
          case 2: 
            { System.out.println("(LATEXSTRING)"+yytext().replaceAll("(\\r|\\n)", ""));
                              return symbol(LabParserSym.LATEXSTRING, escapeForLua(yytext()));
            }
          case 40: break;
          case 3: 
            { System.out.println("(WHITESPACE)"); return symbol(LabParserSym.WHITESPACE);
            }
          case 41: break;
          case 4: 
            { yypushback(1); yybegin(TITLE_COMMENT);
            }
          case 42: break;
          case 5: 
            { System.out.println("(CARROT)"+yytext()); return symbol(LabParserSym.CARROT);
            }
          case 43: break;
          case 6: 
            { System.out.println("(BACKSLASH)"+yytext()); return symbol(LabParserSym.BACKSLASH);
            }
          case 44: break;
          case 7: 
            { System.out.println("(LEFTCURLYBRACE)"+yytext()); return symbol(LabParserSym.LEFTCURLYBRACE);
            }
          case 45: break;
          case 8: 
            { System.out.println("(RIGHTCURLYBRACE)"+yytext()); return symbol(LabParserSym.RIGHTCURLYBRACE);
            }
          case 46: break;
          case 9: 
            { System.out.println("(AMPERSAND)"+yytext()); return symbol(LabParserSym.AMPERSAND);
            }
          case 47: break;
          case 10: 
            { System.out.println("(DOLLARSIGN)"+yytext()); return symbol(LabParserSym.DOLLARSIGN);
            }
          case 48: break;
          case 11: 
            { System.out.println("(HASHMARK)"+yytext()); return symbol(LabParserSym.HASHMARK);
            }
          case 49: break;
          case 12: 
            { System.out.println("(UNDERSCORE)"+yytext()); return symbol(LabParserSym.UNDERSCORE);
            }
          case 50: break;
          case 13: 
            { System.out.println("(TILDE)"+yytext()); return symbol(LabParserSym.TILDE);
            }
          case 51: break;
          case 14: 
            { /* ignore */
            }
          case 52: break;
          case 15: 
            { yypushback(1); yybegin(SHEET_COMMENT);
            }
          case 53: break;
          case 16: 
            { yypushback(1); yybegin(ELEMENT_COMMENT);
            }
          case 54: break;
          case 17: 
            { yybegin(TITLED); System.out.println("(BLANKLINE)"); return symbol(LabParserSym.BLANKLINE);
            }
          case 55: break;
          case 18: 
            { System.out.println("(PERCENT)"+yytext()); return symbol(LabParserSym.PERCENT);
            }
          case 56: break;
          case 19: 
            { System.out.println("(ESCAPED_BACKSLASH)"+yytext()); return symbol(LabParserSym.ESCAPED_BACKSLASH);
            }
          case 57: break;
          case 20: 
            { yybegin(ELEMENTS); System.out.println("(BLANKLINE)");
            }
          case 58: break;
          case 21: 
            { System.out.println("(LATEX_CMD)"+yytext()); return symbol(LabParserSym.LATEX_CMD, yytext());
            }
          case 59: break;
          case 22: 
            { yybegin(TITLE);
            }
          case 60: break;
          case 23: 
            { yybegin(SHEET);
            }
          case 61: break;
          case 24: 
            { yybegin(ELEMENT);
            }
          case 62: break;
          case 25: 
            { System.out.println("(EQUATION)(equation omitted)"); return symbol(LabParserSym.LATEXSTRING, "(equation omitted)");
            }
          case 63: break;
          case 26: 
            { System.out.println("(LATEX_HREF)"+yytext()); return symbol(LabParserSym.LATEX_HREF, yytext());
            }
          case 64: break;
          case 27: 
            { System.out.println("(LATEX_FOOTNOTE)"+yytext()); return symbol(LabParserSym.LATEX_FOOTNOTE, yytext());
            }
          case 65: break;
          case 28: 
            { yybegin(ELEMENT); System.out.println("(CMD_TEXT)text"); return symbol(LabParserSym.CMD_TEXT);
            }
          case 66: break;
          case 29: 
            { yybegin(TITLE); System.out.println("(CMD_TITLE)title"); return symbol(LabParserSym.CMD_TITLE);
            }
          case 67: break;
          case 30: 
            { yybegin(SHEET); System.out.println("(CMD_SHEET)sheet"); return symbol(LabParserSym.CMD_SHEET);
            }
          case 68: break;
          case 31: 
            { yybegin(ELEMENT); System.out.println("(CMD_CHECK)check"); return symbol(LabParserSym.CMD_CHECK);
            }
          case 69: break;
          case 32: 
            { yybegin(ELEMENT); System.out.println("(CMD_VIDEO)video"); return symbol(LabParserSym.CMD_VIDEO);
            }
          case 70: break;
          case 33: 
            { yybegin(ELEMENT); System.out.println("(CMD_EXPORT)export"); return symbol(LabParserSym.CMD_EXPORT);
            }
          case 71: break;
          case 34: 
            { yybegin(ELEMENT); System.out.println("(CMD_HEADER)header"); return symbol(LabParserSym.CMD_HEADER);
            }
          case 72: break;
          case 35: 
            { yybegin(SHEET); System.out.println("(CMD_CALCYSHEET)calcysheet"); return symbol(LabParserSym.CMD_CALCYSHEET);
            }
          case 73: break;
          case 36: 
            { yybegin(SHEET); System.out.println("(CMD_MOTIONSHEET)motionsheet"); return symbol(LabParserSym.CMD_MOTIONSHEET);
            }
          case 74: break;
          case 37: 
            { System.out.println("(FIGURE)(figure omitted)"); return symbol(LabParserSym.LATEXSTRING, "(figure omitted)");
            }
          case 75: break;
          case 38: 
            { yybegin(ELEMENT); System.out.println("(CMD_MOTIONANALYSISGRAPH)"); return symbol(LabParserSym.CMD_MOTIONANALYSISGRAPH);
            }
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
