/* The following code was generated by JFlex 1.6.1 */

/* JFlex file: Labtex language lexer specification */
/* http://www.jflex.de/manual.html#CUPWork */

package nz.ac.auckland.labtex.generated;
import java_cup.runtime.*;

/**
 * A lexer class for the custom Labtex language used by Lablet
 */

public class LabLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TITLE = 2;
  public static final int TITLED = 4;
  public static final int SHEET = 6;
  public static final int ELEMENT = 8;
  public static final int ELEMENTS = 10;
  public static final int TITLE_COMMENT = 12;
  public static final int SHEET_COMMENT = 14;
  public static final int ELEMENT_COMMENT = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  2,  2,  5,  5,  6,  6, 
     7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\2\1\50\1\3\1\1\22\0\1\5\2\0\1\43"+
    "\1\42\1\4\1\41\5\0\1\47\15\0\1\14\3\0\1\6\2\0"+
    "\32\46\1\32\1\21\1\33\1\20\1\44\1\0\1\10\1\11\1\37"+
    "\1\31\1\12\1\34\1\22\1\17\1\15\1\46\1\40\1\7\1\46"+
    "\1\23\1\27\1\46\1\25\1\35\1\16\1\13\1\26\2\46\1\36"+
    "\2\46\1\24\1\0\1\30\1\45\6\0\1\50\u1fa2\0\1\50\1\50"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\3\1\1\2\3\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\3\16\3\3"+
    "\1\17\1\20\1\6\10\0\1\21\1\22\1\23\1\24"+
    "\5\25\1\0\4\26\2\0\4\27\2\0\4\30\4\0"+
    "\2\25\1\26\1\0\1\27\1\0\1\30\3\0\1\31"+
    "\2\25\1\26\1\0\1\27\1\0\1\30\3\0\1\25"+
    "\1\32\5\0\1\25\130\0\1\33\6\0\1\33\4\0"+
    "\1\33\4\0\1\33\4\0\1\34\1\35\1\0\1\36"+
    "\2\0\1\34\1\35\1\0\1\36\1\34\1\35\1\0"+
    "\1\36\1\34\1\35\1\0\1\36\1\37\2\0\3\37"+
    "\23\0\1\40\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0171"+
    "\0\u0148\0\u0267\0\u0148\0\u0148\0\u0148\0\u0148\0\u0148\0\u0148"+
    "\0\u0148\0\u0148\0\u0171\0\u019a\0\u0290\0\u02b9\0\u02e2\0\u0171"+
    "\0\u0171\0\u030b\0\u0334\0\u019a\0\u035d\0\u0386\0\u0171\0\u03af"+
    "\0\u03d8\0\u0401\0\u042a\0\u0148\0\u0148\0\u0453\0\u047c\0\u04a5"+
    "\0\u04ce\0\u0401\0\u0148\0\u04f7\0\u0520\0\u0549\0\u0572\0\u0334"+
    "\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u035d\0\u0668\0\u0691"+
    "\0\u06ba\0\u06e3\0\u070c\0\u0386\0\u0735\0\u075e\0\u0787\0\u07b0"+
    "\0\u07d9\0\u0802\0\u04f7\0\u082b\0\u05c4\0\u0854\0\u0691\0\u087d"+
    "\0\u08a6\0\u08cf\0\u0148\0\u08f8\0\u0921\0\u082b\0\u094a\0\u0854"+
    "\0\u0973\0\u087d\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u047c\0\u0a40"+
    "\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88"+
    "\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0"+
    "\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18"+
    "\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60"+
    "\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8"+
    "\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0"+
    "\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338"+
    "\0\u1361\0\u138a\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480"+
    "\0\u14a9\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8"+
    "\0\u15f1\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710"+
    "\0\u1739\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f\0\u1858"+
    "\0\u1881\0\u18aa\0\u18d3\0\u18fc\0\u1925\0\u0148\0\u194e\0\u1977"+
    "\0\u19a0\0\u19c9\0\u19f2\0\u1a1b\0\u04f7\0\u1a44\0\u1a6d\0\u1a96"+
    "\0\u1abf\0\u05c4\0\u1ae8\0\u1b11\0\u1b3a\0\u1b63\0\u0691\0\u1b8c"+
    "\0\u1bb5\0\u1bde\0\u1c07\0\u0148\0\u0148\0\u1c30\0\u0148\0\u1c59"+
    "\0\u1c82\0\u04f7\0\u04f7\0\u1cab\0\u04f7\0\u05c4\0\u05c4\0\u1cd4"+
    "\0\u05c4\0\u0691\0\u0691\0\u1cfd\0\u0691\0\u0148\0\u1d26\0\u1d4f"+
    "\0\u04f7\0\u05c4\0\u0691\0\u1d78\0\u1da1\0\u1dca\0\u1df3\0\u1e1c"+
    "\0\u1e45\0\u1e6e\0\u1e97\0\u1ec0\0\u1ee9\0\u1f12\0\u1f3b\0\u1f64"+
    "\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008\0\u2031\0\u205a\0\u0148\0\u2083"+
    "\0\u20ac\0\u20d5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\4\11\1\12\14\11\1\13\27\11\1\14\1\15\1\16"+
    "\1\17\1\20\1\17\12\14\1\21\1\22\2\14\1\23"+
    "\3\14\1\24\10\14\1\25\1\26\1\27\1\30\1\31"+
    "\3\14\4\32\1\33\14\32\1\34\27\32\1\14\1\35"+
    "\1\36\1\37\1\40\1\37\12\14\1\21\1\22\2\14"+
    "\1\23\3\14\1\24\10\14\1\25\1\26\1\27\1\30"+
    "\1\31\4\14\1\15\1\16\1\17\1\41\1\17\12\14"+
    "\1\21\1\42\2\14\1\23\3\14\1\24\10\14\1\25"+
    "\1\26\1\27\1\30\1\31\3\14\4\0\1\43\14\0"+
    "\1\44\33\0\1\45\14\0\1\44\33\0\1\46\14\0"+
    "\1\44\105\0\1\47\1\50\53\0\1\51\20\0\1\52"+
    "\16\0\1\14\5\0\12\14\2\0\2\14\1\0\3\14"+
    "\1\0\10\14\5\0\3\14\1\0\1\53\2\16\1\0"+
    "\1\16\44\0\2\53\1\16\1\0\1\16\44\0\1\15"+
    "\1\16\1\17\1\0\1\17\47\0\1\54\4\0\1\51"+
    "\7\0\1\55\10\0\1\52\17\0\1\56\2\36\1\0"+
    "\1\36\44\0\2\56\1\36\1\0\1\36\44\0\1\35"+
    "\1\36\1\37\1\0\1\37\47\0\1\54\2\0\2\57"+
    "\1\60\2\57\1\0\2\57\1\61\1\0\1\55\2\57"+
    "\1\0\3\57\1\0\1\57\1\62\1\63\5\57\3\0"+
    "\1\57\1\0\1\57\1\63\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\70\1\71\41\64\1\0\1\72\1\73"+
    "\1\74\1\75\1\72\1\76\1\77\41\72\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\104\1\105\41\100\7\0"+
    "\1\106\54\0\1\107\36\0\21\52\1\110\27\52\1\0"+
    "\3\53\1\0\1\53\44\0\3\56\1\0\1\56\52\0"+
    "\5\57\1\0\3\57\2\0\2\57\1\0\3\57\1\0"+
    "\1\57\2\0\5\57\3\0\1\57\1\0\1\57\11\0"+
    "\3\57\1\111\1\57\1\0\3\57\2\0\2\57\1\0"+
    "\3\57\1\0\1\57\2\0\5\57\3\0\1\57\1\0"+
    "\1\57\11\0\5\57\1\0\3\57\2\0\2\57\1\0"+
    "\3\57\1\0\1\57\2\0\1\57\1\112\3\57\3\0"+
    "\1\57\1\0\1\57\2\0\1\64\1\65\1\66\1\67"+
    "\1\64\1\113\42\64\3\0\2\66\1\0\1\66\46\0"+
    "\1\66\1\0\1\66\44\0\1\65\1\66\1\67\1\0"+
    "\1\67\43\0\1\64\1\65\1\66\1\67\1\64\1\113"+
    "\1\114\41\64\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\42\72\3\0\2\74\1\0\1\74\46\0\1\74"+
    "\1\0\1\74\44\0\1\73\1\74\1\75\1\0\1\75"+
    "\43\0\1\72\1\73\1\74\1\75\1\72\1\115\1\116"+
    "\41\72\1\0\1\100\1\101\1\102\1\103\1\100\1\117"+
    "\42\100\3\0\2\102\1\0\1\102\46\0\1\102\1\0"+
    "\1\102\44\0\1\101\1\102\1\103\1\0\1\103\43\0"+
    "\1\100\1\101\1\102\1\103\1\100\1\117\1\120\41\100"+
    "\6\0\1\106\1\0\1\121\63\0\1\122\26\0\21\52"+
    "\1\110\11\52\1\123\15\52\7\0\5\57\1\0\3\57"+
    "\2\0\1\124\1\57\1\0\3\57\1\0\1\57\2\0"+
    "\5\57\3\0\1\57\1\0\1\57\11\0\3\57\1\125"+
    "\1\57\1\0\3\57\2\0\2\57\1\0\3\57\1\0"+
    "\1\57\2\0\5\57\3\0\1\57\1\0\1\57\2\0"+
    "\1\64\1\65\1\66\1\67\1\64\1\126\1\64\1\127"+
    "\40\64\1\0\1\72\1\73\1\74\1\75\1\72\1\130"+
    "\1\72\1\131\40\72\1\0\1\100\1\101\1\102\1\103"+
    "\1\100\1\132\1\100\1\133\40\100\11\0\1\134\55\0"+
    "\1\135\42\0\5\57\1\0\1\136\2\57\2\0\2\57"+
    "\1\0\3\57\1\0\1\57\2\0\5\57\3\0\1\57"+
    "\1\0\1\57\11\0\5\57\1\0\3\57\2\0\2\57"+
    "\1\0\3\57\1\0\1\57\2\0\1\137\4\57\3\0"+
    "\1\57\1\0\1\57\2\0\1\64\1\65\1\66\1\67"+
    "\1\64\1\113\2\64\1\140\37\64\1\0\1\72\1\73"+
    "\1\74\1\75\1\72\1\115\2\72\1\141\37\72\1\0"+
    "\1\100\1\101\1\102\1\103\1\100\1\117\2\100\1\142"+
    "\37\100\12\0\1\143\62\0\1\144\34\0\5\57\1\0"+
    "\3\57\2\0\1\57\1\145\1\0\3\57\1\0\1\57"+
    "\2\0\5\57\3\0\1\57\1\0\1\57\2\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\3\64\1\146\36\64"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\3\72"+
    "\1\147\36\72\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\3\100\1\150\36\100\10\0\1\151\65\0\1\152"+
    "\33\0\5\57\1\0\3\57\2\0\2\57\1\152\3\57"+
    "\1\0\1\57\2\0\5\57\3\0\1\57\1\0\1\57"+
    "\2\0\1\64\1\65\1\66\1\67\1\64\1\113\1\64"+
    "\1\153\40\64\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\1\72\1\154\40\72\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\1\100\1\155\40\100\13\0\1\156"+
    "\50\0\1\157\21\0\1\160\14\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\4\64\1\161\35\64\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\4\72\1\162\35\72"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\4\100"+
    "\1\163\35\100\14\0\1\164\62\0\1\165\40\0\1\166"+
    "\33\0\1\64\1\65\1\66\1\67\1\64\1\113\5\64"+
    "\1\167\34\64\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\5\72\1\170\34\72\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\5\100\1\171\34\100\15\0\1\172"+
    "\62\0\1\173\44\0\1\174\26\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\6\64\1\175\33\64\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\6\72\1\176\33\72"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\6\100"+
    "\1\177\33\100\14\0\1\200\2\0\1\201\1\202\17\0"+
    "\1\203\21\0\1\204\66\0\1\205\22\0\1\64\1\65"+
    "\1\66\1\67\1\64\1\113\5\64\1\206\2\64\1\207"+
    "\1\210\17\64\1\211\10\64\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\5\72\1\212\2\72\1\213\1\214"+
    "\17\72\1\215\10\72\1\0\1\100\1\101\1\102\1\103"+
    "\1\100\1\117\5\100\1\216\2\100\1\217\1\220\17\100"+
    "\1\221\10\100\13\0\1\222\2\0\1\223\52\0\1\224"+
    "\43\0\1\225\55\0\1\226\44\0\1\227\72\0\1\230"+
    "\13\0\1\64\1\65\1\66\1\67\1\64\1\113\4\64"+
    "\1\231\2\64\1\232\32\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\11\64\1\233\30\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\4\64\1\234\35\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\11\64"+
    "\1\235\30\64\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\4\72\1\236\2\72\1\237\32\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\11\72\1\240\30\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\4\72"+
    "\1\241\35\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\11\72\1\242\30\72\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\4\100\1\243\2\100\1\244\32\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\11\100"+
    "\1\245\30\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\4\100\1\246\35\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\11\100\1\247\30\100\37\0\1\250"+
    "\25\0\1\251\47\0\1\252\46\0\1\253\52\0\1\254"+
    "\53\0\1\255\45\0\1\256\36\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\30\64\1\257\11\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\5\64\1\260\34\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\4\64"+
    "\1\261\35\64\1\0\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\2\64\1\262\37\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\4\64\1\263\35\64\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\30\72\1\264\11\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\5\72"+
    "\1\265\34\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\4\72\1\266\35\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\2\72\1\267\37\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\4\72\1\270\35\72"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\30\100"+
    "\1\271\11\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\5\100\1\272\34\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\4\100\1\273\35\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\2\100\1\274\37\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\4\100"+
    "\1\275\35\100\14\0\1\276\44\0\1\277\53\0\1\300"+
    "\67\0\1\301\56\0\1\302\40\0\1\303\51\0\1\304"+
    "\20\0\1\64\1\65\1\66\1\67\1\64\1\113\5\64"+
    "\1\305\34\64\1\0\1\64\1\65\1\66\1\67\1\64"+
    "\1\113\1\64\1\306\40\64\1\0\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\4\64\1\307\35\64\1\0\1\64"+
    "\1\65\1\66\1\67\1\64\1\113\23\64\1\310\16\64"+
    "\1\0\1\64\1\65\1\66\1\67\1\64\1\113\31\64"+
    "\1\311\10\64\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\5\72\1\312\34\72\1\0\1\72\1\73\1\74"+
    "\1\75\1\72\1\115\1\72\1\313\40\72\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\4\72\1\314\35\72"+
    "\1\0\1\72\1\73\1\74\1\75\1\72\1\115\23\72"+
    "\1\315\16\72\1\0\1\72\1\73\1\74\1\75\1\72"+
    "\1\115\31\72\1\316\10\72\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\5\100\1\317\34\100\1\0\1\100"+
    "\1\101\1\102\1\103\1\100\1\117\1\100\1\320\40\100"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\4\100"+
    "\1\321\35\100\1\0\1\100\1\101\1\102\1\103\1\100"+
    "\1\117\23\100\1\322\16\100\1\0\1\100\1\101\1\102"+
    "\1\103\1\100\1\117\31\100\1\323\10\100\13\0\1\324"+
    "\51\0\1\325\47\0\1\326\76\0\1\327\33\0\1\330"+
    "\25\0\21\304\1\331\27\304\1\64\1\65\1\66\1\67"+
    "\1\64\1\113\4\64\1\332\35\64\1\0\1\64\1\65"+
    "\1\66\1\67\1\64\1\113\5\64\1\333\34\64\1\0"+
    "\1\64\1\65\1\66\1\67\1\64\1\113\4\64\1\334"+
    "\35\64\1\0\1\64\1\65\1\66\1\67\1\64\1\113"+
    "\32\64\1\335\7\64\1\0\1\72\1\73\1\74\1\75"+
    "\1\72\1\115\4\72\1\336\35\72\1\0\1\72\1\73"+
    "\1\74\1\75\1\72\1\115\5\72\1\337\34\72\1\0"+
    "\1\72\1\73\1\74\1\75\1\72\1\115\4\72\1\340"+
    "\35\72\1\0\1\72\1\73\1\74\1\75\1\72\1\115"+
    "\32\72\1\341\7\72\1\0\1\100\1\101\1\102\1\103"+
    "\1\100\1\117\4\100\1\342\35\100\1\0\1\100\1\101"+
    "\1\102\1\103\1\100\1\117\5\100\1\343\34\100\1\0"+
    "\1\100\1\101\1\102\1\103\1\100\1\117\4\100\1\344"+
    "\35\100\1\0\1\100\1\101\1\102\1\103\1\100\1\117"+
    "\32\100\1\345\7\100\36\0\1\346\43\0\1\347\20\0"+
    "\12\304\1\350\6\304\1\331\27\304\1\64\1\65\1\66"+
    "\1\67\1\64\1\113\27\64\1\351\12\64\1\0\1\72"+
    "\1\73\1\74\1\75\1\72\1\115\27\72\1\352\12\72"+
    "\1\0\1\100\1\101\1\102\1\103\1\100\1\117\27\100"+
    "\1\353\12\100\1\0\21\347\1\354\27\347\21\304\1\331"+
    "\1\304\1\355\25\304\12\347\1\356\6\347\1\354\27\347"+
    "\21\304\1\331\7\304\1\357\17\304\21\347\1\354\1\347"+
    "\1\360\25\347\21\304\1\331\2\304\1\361\24\304\21\347"+
    "\1\354\7\347\1\362\17\347\21\304\1\331\12\304\1\363"+
    "\14\304\21\347\1\354\2\347\1\364\24\347\15\304\1\365"+
    "\3\304\1\331\27\304\12\347\1\366\6\347\1\354\27\347"+
    "\21\304\1\331\1\367\26\304\21\347\1\354\3\347\1\370"+
    "\23\347\21\304\1\331\4\304\1\371\22\304\21\347\1\354"+
    "\4\347\1\372\22\347\21\304\1\331\13\304\1\373\13\304"+
    "\10\347\1\374\10\347\1\354\27\347\12\304\1\375\6\304"+
    "\1\331\27\304\13\347\1\376\5\347\1\354\27\347\21\304"+
    "\1\331\6\304\1\377\20\304\15\347\1\u0100\3\347\1\354"+
    "\50\347\1\354\5\347\1\u0101\42\347\1\354\1\347\1\u0102"+
    "\46\347\1\354\6\347\1\123\20\347";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8446];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\7\1\1\11\1\1\10\11\10\1\10\0"+
    "\1\1\2\11\5\1\1\11\1\0\4\1\2\0\4\1"+
    "\2\0\4\1\4\0\3\1\1\0\1\1\1\0\1\1"+
    "\3\0\1\11\3\1\1\0\1\1\1\0\1\1\3\0"+
    "\2\1\5\0\1\1\130\0\1\11\6\0\1\1\4\0"+
    "\1\1\4\0\1\1\4\0\2\11\1\0\1\11\2\0"+
    "\2\1\1\0\3\1\1\0\3\1\1\0\1\1\1\11"+
    "\2\0\3\1\23\0\1\11\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();
	int prior_state = 0;

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	private String escapeForLua(String str) {
	    return str.replace("\"", "\\\"")
	              .replace("\'", "\\\'")
	              .replace("[", "\\[")
	              .replace("]", "\\]")
	              .replace("``", "\\\"");
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LabLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(LabParserSym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* System.out.println("(IGNORE)"+yytext()); */
            }
          case 33: break;
          case 2: 
            { System.out.println("(LATEXSTRING)"+yytext().replaceAll("(\\r|\\n)", ""));
                              return symbol(LabParserSym.LATEXSTRING, escapeForLua(yytext()));
            }
          case 34: break;
          case 3: 
            { System.out.println("(WHITESPACE)"); return symbol(LabParserSym.WHITESPACE);
            }
          case 35: break;
          case 4: 
            { yypushback(1); yybegin(TITLE_COMMENT);
            }
          case 36: break;
          case 5: 
            { System.out.println("(CARROT)"+yytext()); return symbol(LabParserSym.CARROT);
            }
          case 37: break;
          case 6: 
            { System.out.println("(BACKSLASH)"+yytext()); return symbol(LabParserSym.BACKSLASH);
            }
          case 38: break;
          case 7: 
            { System.out.println("(LEFTCURLYBRACE)"+yytext()); return symbol(LabParserSym.LEFTCURLYBRACE);
            }
          case 39: break;
          case 8: 
            { System.out.println("(RIGHTCURLYBRACE)"+yytext()); return symbol(LabParserSym.RIGHTCURLYBRACE);
            }
          case 40: break;
          case 9: 
            { System.out.println("(AMPERSAND)"+yytext()); return symbol(LabParserSym.AMPERSAND);
            }
          case 41: break;
          case 10: 
            { System.out.println("(DOLLARSIGN)"+yytext()); return symbol(LabParserSym.DOLLARSIGN);
            }
          case 42: break;
          case 11: 
            { System.out.println("(HASHMARK)"+yytext()); return symbol(LabParserSym.HASHMARK);
            }
          case 43: break;
          case 12: 
            { System.out.println("(UNDERSCORE)"+yytext()); return symbol(LabParserSym.UNDERSCORE);
            }
          case 44: break;
          case 13: 
            { System.out.println("(TILDE)"+yytext()); return symbol(LabParserSym.TILDE);
            }
          case 45: break;
          case 14: 
            { /* ignore */
            }
          case 46: break;
          case 15: 
            { yypushback(1); yybegin(SHEET_COMMENT);
            }
          case 47: break;
          case 16: 
            { yypushback(1); yybegin(ELEMENT_COMMENT);
            }
          case 48: break;
          case 17: 
            { yybegin(TITLED); System.out.println("(BLANKLINE)"); return symbol(LabParserSym.BLANKLINE);
            }
          case 49: break;
          case 18: 
            { System.out.println("(PERCENT)"+yytext()); return symbol(LabParserSym.PERCENT);
            }
          case 50: break;
          case 19: 
            { System.out.println("(ESCAPED_BACKSLASH)"+yytext()); return symbol(LabParserSym.ESCAPED_BACKSLASH);
            }
          case 51: break;
          case 20: 
            { yybegin(ELEMENTS); System.out.println("(BLANKLINE)");
            }
          case 52: break;
          case 21: 
            { System.out.println("(LATEX_CMD)"+yytext()); return symbol(LabParserSym.LATEX_CMD, yytext());
            }
          case 53: break;
          case 22: 
            { yybegin(TITLE);
            }
          case 54: break;
          case 23: 
            { yybegin(SHEET);
            }
          case 55: break;
          case 24: 
            { yybegin(ELEMENT);
            }
          case 56: break;
          case 25: 
            { System.out.println("(EQUATION)(equation omitted)"); return symbol(LabParserSym.LATEXSTRING, "(equation omitted)");
            }
          case 57: break;
          case 26: 
            { System.out.println("(LATEX_HREF)"+yytext()); return symbol(LabParserSym.LATEX_HREF, yytext());
            }
          case 58: break;
          case 27: 
            { yybegin(ELEMENT); System.out.println("(CMD_TEXT)text"); return symbol(LabParserSym.CMD_TEXT);
            }
          case 59: break;
          case 28: 
            { yybegin(TITLE); System.out.println("(CMD_TITLE)title"); return symbol(LabParserSym.CMD_TITLE);
            }
          case 60: break;
          case 29: 
            { yybegin(SHEET); System.out.println("(CMD_SHEET)sheet"); return symbol(LabParserSym.CMD_SHEET);
            }
          case 61: break;
          case 30: 
            { yybegin(ELEMENT); System.out.println("(CMD_CHECK)check"); return symbol(LabParserSym.CMD_CHECK);
            }
          case 62: break;
          case 31: 
            { yybegin(ELEMENT); System.out.println("(CMD_HEADER)header"); return symbol(LabParserSym.CMD_HEADER);
            }
          case 63: break;
          case 32: 
            { System.out.println("(FIGURE)(figure omitted)"); return symbol(LabParserSym.LATEXSTRING, "(figure omitted)");
            }
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
