
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nz.ac.auckland.labtex.generated;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LabParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LabParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public LabParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LabParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LabParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\003\004\000\002\002\004\000\002\005" +
    "\004\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\027\005\000" +
    "\002\025\004\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\030\006" +
    "\000\002\030\005\000\002\031\004\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\007\000\002\034" +
    "\004\000\002\034\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\065\002\000\002\004\007\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\002\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\002\000\002\007\007\000\002\010\007\000" +
    "\002\011\013\000\002\012\013\000\002\021\004\000\002" +
    "\021\003\000\002\022\005\000\002\022\003\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\003" +
    "\000\002\023\007\000\002\023\011\000\002\017\004\000" +
    "\002\017\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\063\006\000\002\064\004\000\002\064\004\000" +
    "\002\064\003\000\002\040\005\000\002\041\005\000\002" +
    "\043\005\000\002\044\005\000\002\045\004\000\002\046" +
    "\004\000\002\047\004\000\002\050\004\000\002\036\004" +
    "\000\002\037\004\000\002\002\004\000\002\057\004\000" +
    "\002\060\004\000\002\061\004\000\002\062\004\000\002" +
    "\051\004\000\002\056\003\000\002\056\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\004\012\004\001\002\000\012\004\uffdb\006" +
    "\uffdb\034\uffdb\040\uffdb\001\002\000\022\006\041\007\027" +
    "\010\031\030\026\031\051\034\045\036\032\041\036\001" +
    "\002\000\004\002\241\001\002\000\010\013\017\015\011" +
    "\016\023\001\002\000\012\002\ufffb\013\ufffb\015\ufffb\016" +
    "\ufffb\001\002\000\012\004\uffdb\006\uffdb\034\uffdb\040\uffdb" +
    "\001\002\000\022\006\041\007\027\010\031\030\026\031" +
    "\051\034\045\036\032\041\036\001\002\000\012\002\ufffd" +
    "\013\ufffd\015\ufffd\016\ufffd\001\002\000\012\002\ufffc\013" +
    "\ufffc\015\ufffc\016\ufffc\001\002\000\022\006\041\007\027" +
    "\010\031\030\026\031\051\034\045\036\032\041\036\001" +
    "\002\000\012\002\001\013\017\015\011\016\023\001\002" +
    "\000\012\004\uffdb\006\uffdb\034\uffdb\040\uffdb\001\002\000" +
    "\012\002\ufffe\013\ufffe\015\ufffe\016\ufffe\001\002\000\012" +
    "\002\ufffa\013\ufffa\015\ufffa\016\ufffa\001\002\000\022\006" +
    "\041\007\027\010\031\030\026\031\051\034\045\036\032" +
    "\041\036\001\002\000\012\004\uffdb\006\uffdb\034\uffdb\040" +
    "\uffdb\001\002\000\022\006\041\007\027\010\031\030\026" +
    "\031\051\034\045\036\032\041\036\001\002\000\052\002" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\013\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\026" +
    "\uffbd\030\uffbd\031\uffbd\034\uffbd\035\uffbd\036\uffbd\041\uffbd" +
    "\001\002\000\054\002\uffa5\004\054\005\uffa5\006\uffa5\007" +
    "\uffa5\010\uffa5\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\023\uffa5\026\uffa5\030\uffa5\031\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\041\uffa5\001\002\000\060\002\uffa5" +
    "\004\054\005\uffa5\006\uffa5\007\uffa5\010\uffa5\013\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5" +
    "\026\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\041\uffa5\001\002\000\052\002\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\013\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\026\uffc0\030\uffc0" +
    "\031\uffc0\034\uffc0\035\uffc0\036\uffc0\041\uffc0\001\002\000" +
    "\004\034\131\001\002\000\054\002\uffa5\004\054\005\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\013\uffa5\015\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\026\uffa5\030\uffa5" +
    "\031\uffa5\034\uffa5\035\uffa5\036\uffa5\041\uffa5\001\002\000" +
    "\052\002\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\013\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\026\uffc3\030\uffc3\031\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\041\uffc3\001\002\000\052\002\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\026\uffbf\030\uffbf\031\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\041\uffbf\001\002\000\052\002\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\013\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\026\uffc4" +
    "\030\uffc4\031\uffc4\034\uffc4\035\uffc4\036\uffc4\041\uffc4\001" +
    "\002\000\054\002\uffa5\004\054\005\uffa5\006\uffa5\007\uffa5" +
    "\010\uffa5\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\026\uffa5\030\uffa5\031\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\041\uffa5\001\002\000\024\006\041\007" +
    "\027\010\031\030\026\031\051\034\045\035\114\036\032" +
    "\041\036\001\002\000\052\002\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\013\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\026\uffc2\030\uffc2\031\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\041\uffc2\001\002\000\060\002\uffa5" +
    "\004\054\005\uffa5\006\uffa5\007\uffa5\010\uffa5\013\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5" +
    "\026\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\041\uffa5\001\002\000\052\002\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\013\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\026\uffbc\030\uffbc" +
    "\031\uffbc\034\uffbc\035\uffbc\036\uffbc\041\uffbc\001\002\000" +
    "\016\006\041\007\027\031\051\033\111\034\045\037\101" +
    "\001\002\000\052\002\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\013\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\026\uffbb\030\uffbb\031\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\041\uffbb\001\002\000\030\004\054\006\uffa5" +
    "\007\uffa5\010\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5\036" +
    "\uffa5\037\uffa5\041\uffa5\001\002\000\052\002\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\013\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\026\uffbe\030\uffbe" +
    "\031\uffbe\034\uffbe\035\uffbe\036\uffbe\041\uffbe\001\002\000" +
    "\014\006\041\007\027\033\074\034\045\037\066\001\002" +
    "\000\052\002\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\013" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\026\uffc1\030\uffc1\031\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\041\uffc1\001\002\000\020\004\054\006\uffa5\007\uffa5" +
    "\031\055\033\uffa5\034\uffa5\037\uffa5\001\002\000\056\002" +
    "\uffab\005\uffab\006\uffab\007\uffab\010\uffab\013\uffab\015\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\026" +
    "\uffab\030\uffab\031\uffab\033\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\041\uffab\001\002\000\010\006\041\007\027\034" +
    "\045\001\002\000\056\002\uffa6\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\013\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\026\uffa6\030\uffa6\031\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\041\uffa6\001\002\000" +
    "\060\002\uffa5\004\054\005\uffa5\006\uffa5\007\uffa5\010\uffa5" +
    "\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\026\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\041\uffa5\001\002\000\012\006" +
    "\041\007\027\031\064\034\045\001\002\000\012\006\uffe1" +
    "\007\uffe1\031\uffe1\034\uffe1\001\002\000\012\006\uffe4\007" +
    "\uffe4\031\uffe4\034\uffe4\001\002\000\012\006\uffe2\007\uffe2" +
    "\031\uffe2\034\uffe2\001\002\000\012\006\uffe3\007\uffe3\031" +
    "\uffe3\034\uffe3\001\002\000\012\006\uffe5\007\uffe5\031\uffe5" +
    "\034\uffe5\001\002\000\004\031\055\001\002\000\056\002" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\013\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\026" +
    "\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\041\uffe6\001\002\000\016\006\uffe7\007\uffe7\031" +
    "\uffe7\033\uffe7\034\uffe7\037\uffe7\001\002\000\016\006\uffec" +
    "\007\uffec\031\uffec\033\uffec\034\uffec\037\uffec\001\002\000" +
    "\016\006\041\007\027\031\076\033\074\034\045\037\066" +
    "\001\002\000\016\006\uffe9\007\uffe9\031\uffe9\033\uffe9\034" +
    "\uffe9\037\uffe9\001\002\000\016\006\uffea\007\uffea\031\uffea" +
    "\033\uffea\034\uffea\037\uffea\001\002\000\016\006\uffeb\007" +
    "\uffeb\031\uffeb\033\uffeb\034\uffeb\037\uffeb\001\002\000\016" +
    "\006\uffe8\007\uffe8\031\uffe8\033\uffe8\034\uffe8\037\uffe8\001" +
    "\002\000\016\006\uffed\007\uffed\031\uffed\033\uffed\034\uffed" +
    "\037\uffed\001\002\000\060\002\uffee\004\077\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\013\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\026\uffee\030\uffee\031" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\041\uffee" +
    "\001\002\000\056\002\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\013\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\026\uffef\030\uffef\031\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\041\uffef\001\002\000\026" +
    "\006\uffae\007\uffae\010\uffae\030\uffae\031\uffae\033\uffae\034" +
    "\uffae\036\uffae\037\uffae\041\uffae\001\002\000\020\006\ufff0" +
    "\007\ufff0\031\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0\001" +
    "\002\000\020\006\ufff4\007\ufff4\031\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\037\ufff4\001\002\000\020\006\ufff5\007\ufff5\031" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\037\ufff5\001\002\000\020" +
    "\006\ufff2\007\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\037" +
    "\ufff2\001\002\000\020\006\ufff6\007\ufff6\031\ufff6\033\ufff6" +
    "\034\ufff6\035\ufff6\037\ufff6\001\002\000\020\006\ufff7\007" +
    "\ufff7\031\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7\001\002" +
    "\000\020\006\ufff3\007\ufff3\031\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\037\ufff3\001\002\000\020\006\041\007\027\031\051" +
    "\033\111\034\045\035\114\037\101\001\002\000\020\006" +
    "\ufff1\007\ufff1\031\ufff1\033\ufff1\034\ufff1\035\ufff1\037\ufff1" +
    "\001\002\000\056\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\026\ufff9\030\ufff9\031\ufff9\033\ufff9\034" +
    "\ufff9\035\ufff9\036\ufff9\037\ufff9\041\ufff9\001\002\000\020" +
    "\006\ufff8\007\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8\037" +
    "\ufff8\001\002\000\060\002\uffa5\004\054\005\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\026\uffa5\030\uffa5\031\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\041\uffa5\001" +
    "\002\000\056\002\uffad\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\013\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022" +
    "\uffad\023\uffad\026\uffad\030\uffad\031\uffad\033\uffad\034\uffad" +
    "\035\uffad\036\uffad\037\uffad\041\uffad\001\002\000\056\002" +
    "\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\013\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\026" +
    "\uffa7\030\uffa7\031\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7" +
    "\037\uffa7\041\uffa7\001\002\000\004\034\045\001\002\000" +
    "\052\002\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\013\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\026\uffc5\030\uffc5\031\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\041\uffc5\001\002\000\022\006\041\007\027\010\031\030" +
    "\026\031\051\034\045\036\032\041\036\001\002\000\024" +
    "\006\041\007\027\010\031\030\026\031\051\034\045\035" +
    "\114\036\032\041\036\001\002\000\004\034\045\001\002" +
    "\000\022\006\041\007\027\010\031\030\026\031\051\034" +
    "\045\036\032\041\036\001\002\000\024\006\041\007\027" +
    "\010\031\030\026\031\051\034\045\035\114\036\032\041" +
    "\036\001\002\000\012\002\uffd0\013\uffd0\015\uffd0\016\uffd0" +
    "\001\002\000\052\002\uffa8\005\uffa8\006\uffa8\007\uffa8\010" +
    "\uffa8\013\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\026\uffa8\030\uffa8\031\uffa8\034\uffa8\035" +
    "\uffa8\036\uffa8\041\uffa8\001\002\000\052\002\uffaa\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\013\uffaa\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\026\uffaa\030\uffaa" +
    "\031\uffaa\034\uffaa\035\uffaa\036\uffaa\041\uffaa\001\002\000" +
    "\004\006\041\001\002\000\010\006\uffb7\033\uffb7\035\uffb7" +
    "\001\002\000\010\006\041\033\135\035\134\001\002\000" +
    "\052\002\uffba\005\uffba\006\uffba\007\uffba\010\uffba\013\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023" +
    "\uffba\026\uffba\030\uffba\031\uffba\034\uffba\035\uffba\036\uffba" +
    "\041\uffba\001\002\000\010\006\uffb8\033\uffb8\035\uffb8\001" +
    "\002\000\010\006\uffb9\033\uffb9\035\uffb9\001\002\000\056" +
    "\002\uffac\005\uffac\006\uffac\007\uffac\010\uffac\013\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\026\uffac\030\uffac\031\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\041\uffac\001\002\000\052\002\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\010\uffa9\013\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\026\uffa9\030\uffa9" +
    "\031\uffa9\034\uffa9\035\uffa9\036\uffa9\041\uffa9\001\002\000" +
    "\012\004\144\006\142\034\045\040\143\001\002\000\012" +
    "\004\uffdd\006\uffdd\034\uffdd\040\uffdd\001\002\000\012\004" +
    "\uffde\006\uffde\034\uffde\040\uffde\001\002\000\012\004\uffdc" +
    "\006\uffdc\034\uffdc\040\uffdc\001\002\000\022\006\uffb3\007" +
    "\uffb3\010\uffb3\030\uffb3\031\uffb3\034\uffb3\036\uffb3\041\uffb3" +
    "\001\002\000\024\006\041\007\027\010\031\030\026\031" +
    "\051\034\045\035\147\036\032\041\036\001\002\000\032" +
    "\004\uffd4\005\uffd4\006\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\026\uffd4\034\uffd4\035\uffd4\040\uffd4\001\002" +
    "\000\032\004\170\005\156\006\164\017\157\020\154\021" +
    "\160\022\153\023\173\026\161\034\167\035\165\040\163" +
    "\001\002\000\022\006\041\007\027\010\031\030\026\031" +
    "\051\034\045\036\032\041\036\001\002\000\026\002\uffce" +
    "\013\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022" +
    "\uffce\023\uffce\026\uffce\001\002\000\006\004\054\034\uffa5" +
    "\001\002\000\024\004\054\006\uffa5\007\uffa5\010\uffa5\030" +
    "\uffa5\031\uffa5\034\uffa5\036\uffa5\041\uffa5\001\002\000\030" +
    "\002\uffcc\005\213\013\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\026\uffcc\001\002\000\042" +
    "\002\uffd5\004\uffd5\005\uffd5\006\uffd5\013\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\026\uffd5" +
    "\034\uffd5\035\uffd5\040\uffd5\001\002\000\024\004\054\006" +
    "\uffa5\007\uffa5\010\uffa5\030\uffa5\031\uffa5\034\uffa5\036\uffa5" +
    "\041\uffa5\001\002\000\024\004\054\006\uffa5\007\uffa5\010" +
    "\uffa5\030\uffa5\031\uffa5\034\uffa5\036\uffa5\041\uffa5\001\002" +
    "\000\030\002\uffc8\005\uffc8\013\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\026\uffc8\001\002" +
    "\000\026\002\uffd2\013\uffd2\015\uffd2\016\uffd2\017\157\020" +
    "\154\021\160\022\153\023\173\026\161\001\002\000\042" +
    "\002\uffd7\004\uffd7\005\uffd7\006\uffd7\013\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\026\uffd7" +
    "\034\uffd7\035\uffd7\040\uffd7\001\002\000\042\002\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\013\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\026\uffd8\034\uffd8\035" +
    "\uffd8\040\uffd8\001\002\000\042\002\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\013\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\026\uffd9\034\uffd9\035\uffd9\040\uffd9" +
    "\001\002\000\022\006\041\007\027\010\031\030\026\031" +
    "\051\034\045\036\032\041\036\001\002\000\042\002\uffda" +
    "\004\uffda\005\uffda\006\uffda\013\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\026\uffda\034\uffda" +
    "\035\uffda\040\uffda\001\002\000\042\002\uffd6\004\uffd6\005" +
    "\uffd6\006\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\026\uffd6\034\uffd6\035\uffd6\040" +
    "\uffd6\001\002\000\022\006\041\007\027\010\031\030\026" +
    "\031\051\034\045\036\032\041\036\001\002\000\004\034" +
    "\045\001\002\000\004\034\045\001\002\000\004\006\041" +
    "\001\002\000\004\035\114\001\002\000\004\034\045\001" +
    "\002\000\004\006\041\001\002\000\004\035\114\001\002" +
    "\000\030\002\uffc6\005\uffc6\013\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\026\uffc6\001\002" +
    "\000\004\006\041\001\002\000\004\035\114\001\002\000" +
    "\022\006\041\007\027\010\031\030\026\031\051\034\045" +
    "\036\032\041\036\001\002\000\050\002\uffc7\005\uffc7\006" +
    "\041\007\027\010\031\013\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\026\uffc7\030\026\031" +
    "\051\034\045\036\032\041\036\001\002\000\050\002\uffca" +
    "\005\uffca\006\041\007\027\010\031\013\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\026\uffca" +
    "\030\026\031\051\034\045\036\032\041\036\001\002\000" +
    "\050\002\uffcb\005\uffcb\006\041\007\027\010\031\013\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\026\uffcb\030\026\031\051\034\045\036\032\041\036" +
    "\001\002\000\026\002\uffcf\013\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\026\uffcf\001\002" +
    "\000\022\006\uffb2\007\uffb2\010\uffb2\030\uffb2\031\uffb2\034" +
    "\uffb2\036\uffb2\041\uffb2\001\002\000\022\006\uffb1\007\uffb1" +
    "\010\uffb1\030\uffb1\031\uffb1\034\uffb1\036\uffb1\041\uffb1\001" +
    "\002\000\042\002\uffd4\004\uffd4\005\uffd4\006\uffd4\013\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\026\uffd4\034\uffd4\035\uffd4\040\uffd4\001\002\000\042" +
    "\002\uffcd\004\170\005\156\006\164\013\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\026\uffcd" +
    "\034\167\035\165\040\163\001\002\000\022\006\uffb0\007" +
    "\uffb0\010\uffb0\030\uffb0\031\uffb0\034\uffb0\036\uffb0\041\uffb0" +
    "\001\002\000\004\034\uffaf\001\002\000\050\002\uffc9\005" +
    "\uffc9\006\041\007\027\010\031\013\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\026\uffc9\030" +
    "\026\031\051\034\045\036\032\041\036\001\002\000\012" +
    "\004\144\006\142\034\045\040\143\001\002\000\022\006" +
    "\uffb5\007\uffb5\010\uffb5\030\uffb5\031\uffb5\034\uffb5\036\uffb5" +
    "\041\uffb5\001\002\000\012\002\uffff\013\uffff\015\uffff\016" +
    "\uffff\001\002\000\024\006\041\007\027\010\031\030\026" +
    "\031\051\034\045\035\114\036\032\041\036\001\002\000" +
    "\004\034\045\001\002\000\022\006\041\007\027\010\031" +
    "\030\026\031\051\034\045\036\032\041\036\001\002\000" +
    "\024\006\041\007\027\010\031\030\026\031\051\034\045" +
    "\035\114\036\032\041\036\001\002\000\004\034\045\001" +
    "\002\000\022\006\041\007\027\010\031\030\026\031\051" +
    "\034\045\036\032\041\036\001\002\000\024\006\041\007" +
    "\027\010\031\030\026\031\051\034\045\035\114\036\032" +
    "\041\036\001\002\000\012\002\uffd1\013\uffd1\015\uffd1\016" +
    "\uffd1\001\002\000\024\006\041\007\027\010\031\030\026" +
    "\031\051\034\045\035\234\036\032\041\036\001\002\000" +
    "\032\004\uffd4\005\uffd4\006\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\026\uffd4\034\uffd4\035\uffd4\040\uffd4\001" +
    "\002\000\032\004\170\005\156\006\164\017\157\020\154" +
    "\021\160\022\153\023\173\026\161\034\167\035\165\040" +
    "\163\001\002\000\026\002\uffd3\013\uffd3\015\uffd3\016\uffd3" +
    "\017\157\020\154\021\160\022\153\023\173\026\161\001" +
    "\002\000\012\004\144\006\142\034\045\040\143\001\002" +
    "\000\022\006\uffb4\007\uffb4\010\uffb4\030\uffb4\031\uffb4\034" +
    "\uffb4\036\uffb4\041\uffb4\001\002\000\004\002\000\001\002" +
    "\000\024\006\041\007\027\010\031\030\026\031\051\034" +
    "\045\035\uffe0\036\032\041\036\001\002\000\004\035\244" +
    "\001\002\000\024\004\uffd4\005\uffd4\006\uffd4\013\uffd4\015" +
    "\uffd4\016\uffd4\034\uffd4\035\uffd4\040\uffd4\001\002\000\024" +
    "\004\170\005\156\006\164\013\uffdf\015\uffdf\016\uffdf\034" +
    "\167\035\165\040\163\001\002\000\012\004\144\006\142" +
    "\034\045\040\143\001\002\000\022\006\uffb6\007\uffb6\010" +
    "\uffb6\030\uffb6\031\uffb6\034\uffb6\036\uffb6\041\uffb6\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\010\003\005\004\006\040\004\001\001\000" +
    "\004\015\245\001\001\000\034\002\037\017\241\020\034" +
    "\027\033\030\047\033\027\036\042\051\032\057\046\060" +
    "\045\061\024\062\041\063\043\001\001\000\002\001\001" +
    "\000\026\005\015\006\017\007\012\010\013\011\007\012" +
    "\020\041\011\042\021\043\014\044\023\001\001\000\002" +
    "\001\001\000\004\015\236\001\001\000\034\002\037\017" +
    "\232\020\034\027\033\030\047\033\027\036\042\051\032" +
    "\057\046\060\045\061\024\062\041\063\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\037\017\222" +
    "\020\034\027\033\030\047\033\027\036\042\051\032\057" +
    "\046\060\045\061\024\062\041\063\043\001\001\000\024" +
    "\006\221\007\012\010\013\011\007\012\020\041\011\042" +
    "\021\043\014\044\023\001\001\000\004\015\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\037\017" +
    "\145\020\034\027\033\030\047\033\027\036\042\051\032" +
    "\057\046\060\045\061\024\062\041\063\043\001\001\000" +
    "\004\015\140\001\001\000\034\002\037\017\036\020\034" +
    "\027\033\030\047\033\027\036\042\051\032\057\046\060" +
    "\045\061\024\062\041\063\043\001\001\000\002\001\001" +
    "\000\004\056\137\001\001\000\004\056\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\126\001\001\000\034\002\037\020\117\027\033" +
    "\030\047\033\027\036\042\037\116\051\032\057\046\060" +
    "\045\061\024\062\041\063\043\001\001\000\002\001\001" +
    "\000\004\056\115\001\001\000\002\001\001\000\024\002" +
    "\103\025\107\026\105\027\102\030\101\033\106\036\042" +
    "\051\104\057\046\001\001\000\002\001\001\000\004\056" +
    "\077\001\001\000\002\001\001\000\016\002\071\027\070" +
    "\031\067\032\066\036\042\051\072\001\001\000\002\001" +
    "\001\000\006\056\051\057\052\001\001\000\002\001\001" +
    "\000\016\002\060\027\056\034\055\035\057\036\042\051" +
    "\061\001\001\000\002\001\001\000\004\056\051\001\001" +
    "\000\014\002\060\027\056\035\062\036\042\051\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\071\027\070\032\074\036\042\051\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\103" +
    "\026\112\027\102\030\101\033\106\036\042\037\111\051" +
    "\104\057\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\120\001\001\000\002" +
    "\001\001\000\034\002\037\017\121\020\034\027\033\030" +
    "\047\033\027\036\042\051\032\057\046\060\045\061\024" +
    "\062\041\063\043\001\001\000\034\002\037\020\117\027" +
    "\033\030\047\033\027\036\042\037\122\051\032\057\046" +
    "\060\045\061\024\062\041\063\043\001\001\000\004\036" +
    "\123\001\001\000\034\002\037\017\124\020\034\027\033" +
    "\030\047\033\027\036\042\051\032\057\046\060\045\061" +
    "\024\062\041\063\043\001\001\000\034\002\037\020\117" +
    "\027\033\030\047\033\027\036\042\037\125\051\032\057" +
    "\046\060\045\061\024\062\041\063\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\131\064\132\001\001\000\002\001\001\000\004\051\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\037\020\117\027\033" +
    "\030\047\033\027\036\042\051\032\057\046\060\045\061" +
    "\024\062\041\063\043\001\001\000\004\013\147\001\001" +
    "\000\020\021\161\022\151\023\154\045\165\046\170\047" +
    "\150\050\171\001\001\000\034\002\037\017\216\020\034" +
    "\027\033\030\047\033\027\036\042\051\032\057\046\060" +
    "\045\061\024\062\041\063\043\001\001\000\002\001\001" +
    "\000\004\056\215\001\001\000\004\056\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\211\001\001" +
    "\000\004\056\210\001\001\000\002\001\001\000\016\022" +
    "\207\023\154\045\165\046\170\047\150\050\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\037\017\206\020\034\027\033\030\047\033\027" +
    "\036\042\051\032\057\046\060\045\061\024\062\041\063" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\037\017\205\020\034\027\033\030\047\033\027\036" +
    "\042\051\032\057\046\060\045\061\024\062\041\063\043" +
    "\001\001\000\004\036\201\001\001\000\004\036\173\001" +
    "\001\000\004\051\174\001\001\000\004\037\175\001\001" +
    "\000\004\036\176\001\001\000\004\051\177\001\001\000" +
    "\004\037\200\001\001\000\002\001\001\000\004\051\202" +
    "\001\001\000\004\037\203\001\001\000\034\002\037\017" +
    "\204\020\034\027\033\030\047\033\027\036\042\051\032" +
    "\057\046\060\045\061\024\062\041\063\043\001\001\000" +
    "\032\002\037\020\117\027\033\030\047\033\027\036\042" +
    "\051\032\057\046\060\045\061\024\062\041\063\043\001" +
    "\001\000\032\002\037\020\117\027\033\030\047\033\027" +
    "\036\042\051\032\057\046\060\045\061\024\062\041\063" +
    "\043\001\001\000\032\002\037\020\117\027\033\030\047" +
    "\033\027\036\042\051\032\057\046\060\045\061\024\062" +
    "\041\063\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\037" +
    "\020\117\027\033\030\047\033\027\036\042\051\032\057" +
    "\046\060\045\061\024\062\041\063\043\001\001\000\004" +
    "\036\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\037\020\117\027\033\030\047\033\027\036\042" +
    "\037\223\051\032\057\046\060\045\061\024\062\041\063" +
    "\043\001\001\000\004\036\224\001\001\000\034\002\037" +
    "\017\225\020\034\027\033\030\047\033\027\036\042\051" +
    "\032\057\046\060\045\061\024\062\041\063\043\001\001" +
    "\000\034\002\037\020\117\027\033\030\047\033\027\036" +
    "\042\037\226\051\032\057\046\060\045\061\024\062\041" +
    "\063\043\001\001\000\004\036\227\001\001\000\034\002" +
    "\037\017\230\020\034\027\033\030\047\033\027\036\042" +
    "\051\032\057\046\060\045\061\024\062\041\063\043\001" +
    "\001\000\034\002\037\020\117\027\033\030\047\033\027" +
    "\036\042\037\231\051\032\057\046\060\045\061\024\062" +
    "\041\063\043\001\001\000\002\001\001\000\032\002\037" +
    "\020\117\027\033\030\047\033\027\036\042\051\032\057" +
    "\046\060\045\061\024\062\041\063\043\001\001\000\004" +
    "\013\234\001\001\000\020\021\235\022\151\023\154\045" +
    "\165\046\170\047\150\050\171\001\001\000\016\022\207" +
    "\023\154\045\165\046\170\047\150\050\171\001\001\000" +
    "\004\036\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\002\037\020\117\027\033\030\047\033\027\036" +
    "\042\051\032\057\046\060\045\061\024\062\041\063\043" +
    "\065\242\001\001\000\002\001\001\000\004\013\244\001" +
    "\001\000\002\001\001\000\004\036\246\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LabParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LabParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LabParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LabParser$actions {


    Integer sheetnumber = 0;
    String element = null;

  private final LabParser parser;

  /** Constructor */
  CUP$LabParser$actions(LabParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LabParser$do_action_part00000000(
    int                        CUP$LabParser$act_num,
    java_cup.runtime.lr_parser CUP$LabParser$parser,
    java.util.Stack            CUP$LabParser$stack,
    int                        CUP$LabParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LabParser$result;

      /* select the action based on the action number */
      switch (CUP$LabParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // tex_file ::= title sheets 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = t + "\n" + xs + "\nend"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("tex_file",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= tex_file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		RESULT = start_val;
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LabParser$parser.done_parsing();
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sheets ::= sheets sheet 
            {
              String RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = xs + "\n\n" + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheets",3, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sheets ::= sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheets",3, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sheet ::= normal_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sheet ::= video_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sheet ::= motion_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sheet ::= calc_y_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // curly_braced ::= left_curly_brace curly_elems right_curly_brace 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s + w; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_braced",21, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // curly_elems ::= curly_elems curly_elem 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elems",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // curly_elems ::= curly_elem 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elems",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // curly_elem ::= basic_string 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",20, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // curly_elem ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",20, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // curly_elem ::= dollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",20, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // curly_elem ::= ddollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",20, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // curly_elem ::= latex_cmd 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",20, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // curly_elem ::= UNDERSCORE 
            {
              String RESULT =null;
		 RESULT = "_"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",20, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // curly_elem ::= CARROT 
            {
              String RESULT =null;
		 RESULT = "^"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",20, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dollar_env ::= dollarsign dollar_string DOLLARSIGN WHITESPACE 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		 RESULT = ls + " "; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_env",22, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dollar_env ::= dollarsign dollar_string DOLLARSIGN 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_env",22, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dollar_string ::= dollar_string dollar_piece 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + " " + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_string",23, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dollar_string ::= dollar_piece 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_string",23, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dollar_piece ::= basic_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",24, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dollar_piece ::= latex_cmd 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",24, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dollar_piece ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",24, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dollar_piece ::= UNDERSCORE 
            {
              String RESULT =null;
		 RESULT = "_"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",24, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dollar_piece ::= CARROT 
            {
              String RESULT =null;
		 RESULT = "^"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",24, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ddollar_env ::= DOLLARSIGN dollarsign ddollar_string DOLLARSIGN dollarsign 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_env",25, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ddollar_string ::= ddollar_string ddollar_piece 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + " " + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_string",26, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ddollar_string ::= ddollar_piece 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_string",26, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ddollar_piece ::= basic_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_piece",27, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ddollar_piece ::= latex_cmd 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_piece",27, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ddollar_piece ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_piece",27, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$0 ::= 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
  RESULT =
                            "Lablet = {\n\tinterface = 1.0,\n\ttitle = " +
                            "\"(TeX) " + ls + "\"\n}\n\n\n" +
                            "function Lablet.buildActivity(builder)"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // title ::= cmd_title latex_string NT$0 RIGHTCURLYBRACE find_cmd 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("title",2, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // find_left ::= find_left BACKSLASH 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // find_left ::= find_left LATEXSTRING 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // find_left ::= find_left WHITESPACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // find_left ::= 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // find_cmd ::= find_cmd LEFTCURLYBRACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // find_cmd ::= find_cmd RIGHTCURLYBRACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // find_cmd ::= find_cmd LATEXSTRING 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // find_cmd ::= find_cmd BACKSLASH 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // find_cmd ::= find_cmd WHITESPACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // find_cmd ::= find_cmd BLANKLINE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // find_cmd ::= 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // normal_sheet ::= cmd_sheet latex_string RIGHTCURLYBRACE find_cmd sheet_elems 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		  ++sheetnumber;
                            RESULT =
                            "    -- SHEET " + sheetnumber + "\n" +
                            "    local sheet = builder:create(\"Sheet\")\n" +
                            "    builder:add(sheet)\n" +
                            "    sheet:setTitle(\"" + ls + "\")\n" +
                            xs; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("normal_sheet",5, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // video_sheet ::= cmd_videosheet latex_string RIGHTCURLYBRACE find_cmd sheet_elems 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		  ++sheetnumber;
                            RESULT =
                            "    -- SHEET " + sheetnumber + "\n" +
                            "    local sheet = builder:create(\"Sheet\")\n" +
                            "    builder:add(sheet)\n" +
                            "    sheet:setTitle(\"" + ls + "\")\n" +
                            xs; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("video_sheet",6, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // motion_sheet ::= cmd_motionsheet latex_string right_curly_brace left_curly_brace latex_string right_curly_brace left_curly_brace latex_string right_curly_brace 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).value;
		int l3left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		  ++sheetnumber;
                            RESULT =
                            "    -- SHEET " + sheetnumber + "\n" +
                            "    local sheet = builder:create(\"MotionAnalysis\")\n" +
                            "    builder:add(sheet)\n" +
                            "    sheet:setTitle(\"" + l1 + "\")\n" +
                            "    sheet:setExperiment(" + l2 + ")\n" +
                            "    sheet:setDescriptionText(\"" + l3 + "\")\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("motion_sheet",7, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-8)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // calc_y_sheet ::= cmd_calcysheet latex_string right_curly_brace left_curly_brace latex_string right_curly_brace left_curly_brace latex_string right_curly_brace 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).value;
		int l3left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		  ++sheetnumber;
                            RESULT =
                            "    -- SHEET " + sheetnumber + "\n" +
                            "    local sheet = builder:create(\"CalculateYSpeed\")\n" +
                            "    builder:add(sheet)\n" +
                            "    sheet:setTitle(\"" + l1 + "\")\n" +
                            "    sheet:setExperiment(" + l2 + ")\n" +
                            "    sheet:setHeader(\"" + l3 + "\")\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("calc_y_sheet",8, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-8)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sheet_elems ::= sheet_elems sheet_elem 
            {
              String RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = xs + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elems",15, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sheet_elems ::= sheet_elem 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elems",15, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sheet_elem ::= sheet_elem_opt BLANKLINE find_cmd 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem",16, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sheet_elem ::= sheet_elem_opt 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem",16, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sheet_elem_opt ::= cmd_text latex_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = "    sheet:addText(\"" + ls + "\")\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem_opt",17, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sheet_elem_opt ::= cmd_header latex_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = "    sheet:addHeader(\"" + ls + "\")\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem_opt",17, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sheet_elem_opt ::= cmd_check latex_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = "    sheet:addCheckQuestion(\"" + ls + "\")\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem_opt",17, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sheet_elem_opt ::= CMD_EXPORT 
            {
              String RESULT =null;
		 RESULT = "    local exportButton = sheet:addExportButton()\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem_opt",17, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sheet_elem_opt ::= cmd_video left_curly_brace basic_string right_curly_brace latex_string 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT =
                               "    local video = sheet:addCameraExperiment()\n" +
                               "    video:setDescriptionText(\"" + ls + "\")\n" +
                               "    local " + name + " = video:getExperiment()\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem_opt",17, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sheet_elem_opt ::= CMD_MOTIONANALYSISGRAPH left_curly_brace basic_string right_curly_brace left_curly_brace basic_string right_curly_brace 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		 RESULT = "    sheet:addMotionAnalysisGraph(" + exp + "):" + type + "()\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem_opt",17, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-6)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // latex_string ::= latex_string string_piece 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("latex_string",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // latex_string ::= string_piece 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("latex_string",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // string_piece ::= basic_string 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // string_piece ::= latex_cmd 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // string_piece ::= dollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // string_piece ::= ddollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // string_piece ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // string_piece ::= tilde 
            {
              String RESULT =null;
		 RESULT = " "; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // string_piece ::= percent 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // string_piece ::= escaped_backslash 
            {
              String RESULT =null;
		 RESULT = "\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // string_piece ::= href 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // href ::= LATEX_HREF LEFTCURLYBRACE href_string RIGHTCURLYBRACE 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href",49, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // href_string ::= href_string basic_string 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href_string",50, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // href_string ::= href_string UNDERSCORE 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href_string",50, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // href_string ::= basic_string 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href_string",50, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cmd_title ::= CMD_TITLE find_left left_curly_brace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_title",30, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cmd_sheet ::= CMD_SHEET find_left left_curly_brace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_sheet",31, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cmd_motionsheet ::= CMD_MOTIONSHEET find_left left_curly_brace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_motionsheet",33, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cmd_calcysheet ::= CMD_CALCYSHEET find_left left_curly_brace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_calcysheet",34, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cmd_text ::= CMD_TEXT opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_text",35, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cmd_header ::= CMD_HEADER opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_header",36, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cmd_check ::= CMD_CHECK opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_check",37, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cmd_video ::= CMD_VIDEO opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_video",38, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // left_curly_brace ::= LEFTCURLYBRACE opt_whitespace 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("left_curly_brace",28, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // right_curly_brace ::= RIGHTCURLYBRACE opt_whitespace 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("right_curly_brace",29, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // latex_cmd ::= LATEX_CMD opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("latex_cmd",0, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dollarsign ::= DOLLARSIGN opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollarsign",45, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tilde ::= TILDE opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("tilde",46, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // percent ::= PERCENT opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("percent",47, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // escaped_backslash ::= ESCAPED_BACKSLASH opt_whitespace 
            {
              String RESULT =null;
		 RESULT = "\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("escaped_backslash",48, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // basic_string ::= LATEXSTRING opt_whitespace 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("basic_string",39, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // opt_whitespace ::= WHITESPACE 
            {
              String RESULT =null;
		 RESULT = " "; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("opt_whitespace",44, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // opt_whitespace ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("opt_whitespace",44, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LabParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LabParser$do_action(
    int                        CUP$LabParser$act_num,
    java_cup.runtime.lr_parser CUP$LabParser$parser,
    java.util.Stack            CUP$LabParser$stack,
    int                        CUP$LabParser$top)
    throws java.lang.Exception
    {
              return CUP$LabParser$do_action_part00000000(
                               CUP$LabParser$act_num,
                               CUP$LabParser$parser,
                               CUP$LabParser$stack,
                               CUP$LabParser$top);
    }
}

}
