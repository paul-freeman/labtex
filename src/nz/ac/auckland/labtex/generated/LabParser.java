
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nz.ac.auckland.labtex.generated;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LabParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LabParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public LabParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LabParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LabParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\003\004\000\002\002\004\000\002\005" +
    "\004\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\026\005\000" +
    "\002\024\004\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\027" +
    "\005\000\002\030\004\000\002\030\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\032\007\000" +
    "\002\033\004\000\002\033\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\054\002\000\002\004" +
    "\007\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\002\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\002\000\002\007\007\000\002\021" +
    "\004\000\002\021\003\000\002\022\004\000\002\017\004" +
    "\000\002\017\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\052\006\000\002\053\004\000\002\053" +
    "\004\000\002\053\003\000\002\037\005\000\002\040\005" +
    "\000\002\041\004\000\002\035\004\000\002\036\004\000" +
    "\002\002\004\000\002\050\004\000\002\051\004\000\002" +
    "\042\004\000\002\042\003\000\002\047\003\000\002\047" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\004\012\004\001\002\000\012\004\uffe1\006" +
    "\uffe1\022\uffe1\026\uffe1\001\002\000\016\006\037\007\026" +
    "\010\033\017\035\022\024\024\034\001\002\000\004\002" +
    "\135\001\002\000\004\013\012\001\002\000\006\002\ufffc" +
    "\013\ufffc\001\002\000\006\002\ufffe\013\ufffe\001\002\000" +
    "\012\004\uffe1\006\uffe1\022\uffe1\026\uffe1\001\002\000\016" +
    "\006\037\007\026\010\033\017\035\022\024\024\034\001" +
    "\002\000\006\002\001\013\012\001\002\000\006\002\ufffb" +
    "\013\ufffb\001\002\000\006\002\ufffd\013\ufffd\001\002\000" +
    "\006\002\ufffa\013\ufffa\001\002\000\006\002\uffff\013\uffff" +
    "\001\002\000\026\002\uffd1\006\uffd1\007\uffd1\010\uffd1\013" +
    "\uffd1\015\uffd1\017\uffd1\022\uffd1\023\uffd1\024\uffd1\001\002" +
    "\000\026\002\uffd4\006\uffd4\007\uffd4\010\uffd4\013\uffd4\015" +
    "\uffd4\017\uffd4\022\uffd4\023\uffd4\024\uffd4\001\002\000\026" +
    "\002\uffce\006\uffce\007\uffce\010\uffce\013\uffce\015\uffce\017" +
    "\uffce\022\uffce\023\uffce\024\uffce\001\002\000\020\004\061" +
    "\006\uffbe\007\uffbe\010\uffbe\017\uffbe\022\uffbe\024\uffbe\001" +
    "\002\000\026\002\uffd0\006\uffd0\007\uffd0\010\uffd0\013\uffd0" +
    "\015\uffd0\017\uffd0\022\uffd0\023\uffd0\024\uffd0\001\002\000" +
    "\030\002\uffbe\004\061\006\uffbe\007\uffbe\010\uffbe\013\uffbe" +
    "\015\uffbe\017\uffbe\022\uffbe\023\uffbe\024\uffbe\001\002\000" +
    "\010\006\037\007\026\017\106\001\002\000\026\002\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\013\uffd2\015\uffd2\017\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\001\002\000\026\002\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\013\uffd3\015\uffd3\017\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\001\002\000\010\006\037\007\026\022\024" +
    "\001\002\000\004\022\065\001\002\000\030\002\uffbe\004" +
    "\061\006\uffbe\007\uffbe\010\uffbe\013\uffbe\015\uffbe\017\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\001\002\000\030\002\uffbe\004" +
    "\061\006\uffbe\007\uffbe\010\uffbe\013\uffbe\015\uffbe\017\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\001\002\000\026\002\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\013\uffcf\015\uffcf\017\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\001\002\000\032\002\uffc0\004\062\006" +
    "\uffc0\007\uffc0\010\uffc0\013\uffc0\015\uffc0\017\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\001\002\000\020\006\037\007" +
    "\026\010\033\017\035\022\024\023\042\024\034\001\002" +
    "\000\026\002\uffd5\006\uffd5\007\uffd5\010\uffd5\013\uffd5\015" +
    "\uffd5\017\uffd5\022\uffd5\023\uffd5\024\uffd5\001\002\000\020" +
    "\004\uffda\005\uffda\006\uffda\015\uffda\022\uffda\023\uffda\026" +
    "\uffda\001\002\000\020\004\047\005\052\006\054\015\045" +
    "\022\046\023\055\026\044\001\002\000\022\004\uffdd\005" +
    "\uffdd\006\uffdd\013\uffdd\015\uffdd\022\uffdd\023\uffdd\026\uffdd" +
    "\001\002\000\020\004\061\006\uffbe\007\uffbe\010\uffbe\017" +
    "\uffbe\022\uffbe\024\uffbe\001\002\000\022\004\uffe0\005\uffe0" +
    "\006\uffe0\013\uffe0\015\uffe0\022\uffe0\023\uffe0\026\uffe0\001" +
    "\002\000\022\004\uffdc\005\uffdc\006\uffdc\013\uffdc\015\uffdc" +
    "\022\uffdc\023\uffdc\026\uffdc\001\002\000\010\002\uffd9\013" +
    "\uffd9\015\045\001\002\000\010\002\uffd7\013\uffd7\015\uffd7" +
    "\001\002\000\022\004\uffdb\005\uffdb\006\uffdb\013\uffdb\015" +
    "\uffdb\022\uffdb\023\uffdb\026\uffdb\001\002\000\016\006\037" +
    "\007\026\010\033\017\035\022\024\024\034\001\002\000" +
    "\022\004\uffde\005\uffde\006\uffde\013\uffde\015\uffde\022\uffde" +
    "\023\uffde\026\uffde\001\002\000\022\004\uffdf\005\uffdf\006" +
    "\uffdf\013\uffdf\015\uffdf\022\uffdf\023\uffdf\026\uffdf\001\002" +
    "\000\024\002\uffd6\006\037\007\026\010\033\013\uffd6\015" +
    "\uffd6\017\035\022\024\024\034\001\002\000\010\002\uffd8" +
    "\013\uffd8\015\uffd8\001\002\000\016\006\uffc7\007\uffc7\010" +
    "\uffc7\017\uffc7\022\uffc7\024\uffc7\001\002\000\026\002\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\013\uffbf\015\uffbf\017\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\001\002\000\030\002\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\013\uffc1\015\uffc1\017\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\001\002\000\026\002\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\013\uffc3\015\uffc3\017\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\001\002\000\026\002\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\013\uffc2\015\uffc2\017\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\001\002\000\004\006\037\001\002\000\010\006\uffca" +
    "\021\uffca\023\uffca\001\002\000\010\006\037\021\071\023" +
    "\070\001\002\000\026\002\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\013\uffcd\015\uffcd\017\uffcd\022\uffcd\023\uffcd\024\uffcd\001" +
    "\002\000\010\006\uffcb\021\uffcb\023\uffcb\001\002\000\010" +
    "\006\uffcc\021\uffcc\023\uffcc\001\002\000\012\006\ufff0\007" +
    "\ufff0\017\ufff0\022\ufff0\001\002\000\012\006\037\007\026" +
    "\017\035\022\024\001\002\000\012\006\uffed\007\uffed\017" +
    "\uffed\022\uffed\001\002\000\012\006\uffee\007\uffee\017\uffee" +
    "\022\uffee\001\002\000\012\006\uffef\007\uffef\017\uffef\022" +
    "\uffef\001\002\000\012\006\ufff1\007\ufff1\017\ufff1\022\ufff1" +
    "\001\002\000\026\002\ufff2\006\ufff2\007\ufff2\010\ufff2\013" +
    "\ufff2\015\ufff2\017\ufff2\022\ufff2\023\ufff2\024\ufff2\001\002" +
    "\000\012\006\ufff5\007\ufff5\017\ufff5\023\ufff5\001\002\000" +
    "\012\006\ufff3\007\ufff3\017\ufff3\023\ufff3\001\002\000\012" +
    "\006\ufff6\007\ufff6\017\ufff6\023\ufff6\001\002\000\012\006" +
    "\ufff7\007\ufff7\017\ufff7\023\ufff7\001\002\000\014\004\061" +
    "\006\uffbe\007\uffbe\017\035\022\uffbe\001\002\000\012\006" +
    "\ufff4\007\ufff4\017\ufff4\023\ufff4\001\002\000\012\006\037" +
    "\007\026\017\106\023\113\001\002\000\026\002\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\013\ufff9\015\ufff9\017\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\001\002\000\012\006\ufff8\007\ufff8\017" +
    "\ufff8\023\ufff8\001\002\000\030\002\uffbe\004\061\006\uffbe" +
    "\007\uffbe\010\uffbe\013\uffbe\015\uffbe\017\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\001\002\000\026\002\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\013\uffc5\015\uffc5\017\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\001\002\000\010\006\037\007\026\022\024\001\002" +
    "\000\012\006\037\007\026\017\124\022\024\001\002\000" +
    "\012\006\uffe7\007\uffe7\017\uffe7\022\uffe7\001\002\000\012" +
    "\006\uffea\007\uffea\017\uffea\022\uffea\001\002\000\012\006" +
    "\uffe8\007\uffe8\017\uffe8\022\uffe8\001\002\000\012\006\uffe9" +
    "\007\uffe9\017\uffe9\022\uffe9\001\002\000\012\006\uffeb\007" +
    "\uffeb\017\uffeb\022\uffeb\001\002\000\004\017\035\001\002" +
    "\000\012\006\uffec\007\uffec\017\uffec\023\uffec\001\002\000" +
    "\026\002\uffc4\006\uffc4\007\uffc4\010\uffc4\013\uffc4\015\uffc4" +
    "\017\uffc4\022\uffc4\023\uffc4\024\uffc4\001\002\000\016\006" +
    "\uffc6\007\uffc6\010\uffc6\017\uffc6\022\uffc6\024\uffc6\001\002" +
    "\000\012\004\133\006\131\022\024\026\132\001\002\000" +
    "\012\004\uffe3\006\uffe3\022\uffe3\026\uffe3\001\002\000\012" +
    "\004\uffe4\006\uffe4\022\uffe4\026\uffe4\001\002\000\012\004" +
    "\uffe2\006\uffe2\022\uffe2\026\uffe2\001\002\000\016\006\uffc8" +
    "\007\uffc8\010\uffc8\017\uffc8\022\uffc8\024\uffc8\001\002\000" +
    "\004\002\000\001\002\000\020\006\037\007\026\010\033" +
    "\017\035\022\024\023\uffe6\024\034\001\002\000\004\023" +
    "\140\001\002\000\020\004\uffda\005\uffda\006\uffda\013\uffda" +
    "\022\uffda\023\uffda\026\uffda\001\002\000\020\004\047\005" +
    "\052\006\054\013\uffe5\022\046\023\055\026\044\001\002" +
    "\000\012\004\133\006\131\022\024\026\132\001\002\000" +
    "\016\006\uffc9\007\uffc9\010\uffc9\017\uffc9\022\uffc9\024\uffc9" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\010\003\005\004\006\037\004\001\001\000" +
    "\004\015\141\001\001\000\026\002\027\017\135\020\021" +
    "\026\024\027\020\035\026\042\030\050\031\051\035\052" +
    "\022\001\001\000\002\001\001\000\020\005\013\006\010" +
    "\007\015\010\007\011\014\012\016\040\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\127\001\001" +
    "\000\026\002\027\017\037\020\021\026\024\027\020\035" +
    "\026\042\030\050\031\051\035\052\022\001\001\000\016" +
    "\006\017\007\015\010\007\011\014\012\016\040\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\126\001\001\000\002\001\001" +
    "\000\004\047\125\001\001\000\020\002\102\024\107\025" +
    "\104\027\101\032\106\042\103\050\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\002\075\026\074\030" +
    "\073\031\072\035\026\042\076\001\001\000\002\001\001" +
    "\000\004\047\063\001\001\000\004\047\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\027\020\040" +
    "\026\024\027\020\035\026\042\030\050\031\051\035\052" +
    "\022\001\001\000\002\001\001\000\004\013\042\001\001" +
    "\000\010\021\047\022\050\041\052\001\001\000\002\001" +
    "\001\000\004\047\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\056\041\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\027\017\055\020\021" +
    "\026\024\027\020\035\026\042\030\050\031\051\035\052" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\027\020\040\026\024\027\020\035\026\042\030\050" +
    "\031\051\035\052\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\065\053\066\001\001" +
    "\000\002\001\001\000\004\042\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\075\026\074\031\077\035\026\042\076\050" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\047\062\050\114\001\001\000\002\001\001\000" +
    "\020\002\102\025\111\027\101\032\106\036\110\042\103" +
    "\050\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\113\001\001\000\002\001\001\000\016\002\120" +
    "\026\116\033\115\034\117\035\026\042\121\001\001\000" +
    "\014\002\120\026\116\034\122\035\026\042\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\002\027\020\040\026\024\027\020\035\026\042\030" +
    "\050\031\051\035\052\022\054\136\001\001\000\002\001" +
    "\001\000\004\013\140\001\001\000\002\001\001\000\004" +
    "\035\142\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LabParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LabParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LabParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LabParser$actions {


    Integer sheetnumber = 0;
    String element = null;

  private final LabParser parser;

  /** Constructor */
  CUP$LabParser$actions(LabParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LabParser$do_action_part00000000(
    int                        CUP$LabParser$act_num,
    java_cup.runtime.lr_parser CUP$LabParser$parser,
    java.util.Stack            CUP$LabParser$stack,
    int                        CUP$LabParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LabParser$result;

      /* select the action based on the action number */
      switch (CUP$LabParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // tex_file ::= title sheets 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 System.out.println(t + "\n" + xs + "\nend"); 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("tex_file",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= tex_file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		RESULT = start_val;
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LabParser$parser.done_parsing();
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sheets ::= sheets sheet 
            {
              String RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = xs + "\n\n" + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheets",3, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sheets ::= sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheets",3, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sheet ::= normal_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sheet ::= video_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sheet ::= motion_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sheet ::= calc_y_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // curly_braced ::= left_curly_brace curly_elems right_curly_brace 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_braced",20, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // curly_elems ::= curly_elems curly_elem 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elems",18, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // curly_elems ::= curly_elem 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elems",18, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // curly_elem ::= basic_string 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // curly_elem ::= dollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // curly_elem ::= ddollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // curly_elem ::= latex_cmd 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dollar_env ::= dollarsign dollar_string dollarsign 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_env",21, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dollar_string ::= dollar_string dollar_piece 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + " " + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_string",22, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dollar_string ::= dollar_piece 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_string",22, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dollar_piece ::= basic_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",23, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dollar_piece ::= latex_cmd 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",23, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dollar_piece ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",23, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ddollar_env ::= DOLLARSIGN dollarsign ddollar_string DOLLARSIGN dollarsign 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_env",24, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ddollar_string ::= ddollar_string ddollar_piece 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + " " + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_string",25, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ddollar_string ::= ddollar_piece 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_string",25, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ddollar_piece ::= basic_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_piece",26, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ddollar_piece ::= latex_cmd 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_piece",26, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ddollar_piece ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_piece",26, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$0 ::= 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
  RESULT =
                            "Lablet = {\n\tinterface = 1.0,\n\ttitle = " +
                            "\"(TeX) " + ls + "\"\n}\n\n\n" +
                            "function Lablet.buildActivity(builder)"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // title ::= cmd_title latex_string NT$0 RIGHTCURLYBRACE find_cmd 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("title",2, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // find_left ::= find_left BACKSLASH 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // find_left ::= find_left LATEXSTRING 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // find_left ::= find_left WHITESPACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // find_left ::= 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // find_cmd ::= find_cmd LEFTCURLYBRACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // find_cmd ::= find_cmd RIGHTCURLYBRACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // find_cmd ::= find_cmd LATEXSTRING 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // find_cmd ::= find_cmd BACKSLASH 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // find_cmd ::= find_cmd WHITESPACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // find_cmd ::= find_cmd BLANKLINE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // find_cmd ::= 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // normal_sheet ::= cmd_sheet latex_string RIGHTCURLYBRACE find_cmd sheet_elems 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		  ++sheetnumber;
                            RESULT =
                            "    -- SHEET " + sheetnumber + "\n" +
                            "    local sheet = builder:create(\"Sheet\")\n" +
                            "    builder:add(sheet)\n" +
                            "    sheet:setTitle(\"" + ls + "\")\n" +
                            xs; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("normal_sheet",5, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sheet_elems ::= sheet_elems sheet_elem 
            {
              String RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = xs + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elems",15, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sheet_elems ::= sheet_elem 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elems",15, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sheet_elem ::= cmd_text latex_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = "    sheet:addText(\"" + ls + "\")"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem",16, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // latex_string ::= latex_string string_piece 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("latex_string",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // latex_string ::= string_piece 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("latex_string",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // string_piece ::= basic_string 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // string_piece ::= latex_cmd 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // string_piece ::= dollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // string_piece ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // string_piece ::= tilde 
            {
              String RESULT =null;
		 RESULT = " "; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // string_piece ::= href 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // href ::= LATEX_HREF LEFTCURLYBRACE href_string RIGHTCURLYBRACE 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href",40, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // href_string ::= href_string basic_string 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href_string",41, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // href_string ::= href_string UNDERSCORE 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href_string",41, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // href_string ::= basic_string 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href_string",41, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cmd_title ::= CMD_TITLE find_left left_curly_brace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_title",29, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cmd_sheet ::= CMD_SHEET find_left left_curly_brace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_sheet",30, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cmd_text ::= CMD_TEXT opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_text",31, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // left_curly_brace ::= LEFTCURLYBRACE opt_whitespace 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("left_curly_brace",27, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // right_curly_brace ::= RIGHTCURLYBRACE opt_whitespace 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("right_curly_brace",28, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // latex_cmd ::= LATEX_CMD opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("latex_cmd",0, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dollarsign ::= DOLLARSIGN opt_whitespace 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollarsign",38, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tilde ::= TILDE opt_whitespace 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("tilde",39, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // basic_string ::= LATEXSTRING WHITESPACE 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		 RESULT = ls + " "; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("basic_string",32, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // basic_string ::= LATEXSTRING 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("basic_string",32, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // opt_whitespace ::= WHITESPACE 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("opt_whitespace",37, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // opt_whitespace ::= 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("opt_whitespace",37, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LabParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LabParser$do_action(
    int                        CUP$LabParser$act_num,
    java_cup.runtime.lr_parser CUP$LabParser$parser,
    java.util.Stack            CUP$LabParser$stack,
    int                        CUP$LabParser$top)
    throws java.lang.Exception
    {
              return CUP$LabParser$do_action_part00000000(
                               CUP$LabParser$act_num,
                               CUP$LabParser$parser,
                               CUP$LabParser$stack,
                               CUP$LabParser$top);
    }
}

}
