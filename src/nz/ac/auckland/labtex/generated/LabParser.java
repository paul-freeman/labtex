
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nz.ac.auckland.labtex.generated;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LabParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LabParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public LabParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LabParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LabParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\005\004\000\002\010\004\000\002\010\003" +
    "\000\002\007\004\000\002\007\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\006\007\000\002\022\002\000\002\012\011\000\002\020" +
    "\004\000\002\020\003\000\002\021\004\000\002\002\004" +
    "\000\002\002\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\016\004\000\002\016\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\030\004\020\006\013\012\023\013\014\014" +
    "\016\015\022\016\006\017\021\020\011\021\004\022\005" +
    "\001\002\000\032\004\uffe6\006\uffe6\007\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\001\002\000\032\004\uffe5\006\uffe5\007\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\001\002\000\032\004\uffe9\006\uffe9\007" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\001\002\000\032\004\uffee\006" +
    "\uffee\007\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\001\002\000\004\002" +
    "\uffff\001\002\000\032\004\uffe7\006\uffe7\007\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\001\002\000\030\004\020\006\013\012\023" +
    "\013\014\014\016\015\022\016\006\017\021\020\011\021" +
    "\004\022\005\001\002\000\022\004\045\012\046\013\042" +
    "\014\044\015\047\020\040\021\036\022\037\001\002\000" +
    "\032\004\uffec\006\uffec\007\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\001" +
    "\002\000\030\004\020\007\033\012\023\013\014\014\016" +
    "\015\022\016\006\017\021\020\011\021\004\022\005\001" +
    "\002\000\032\004\uffeb\006\uffeb\007\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\001\002\000\004\002\024\001\002\000\032\004\uffe4" +
    "\006\uffe4\007\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\001\002\000\032" +
    "\004\uffe8\006\uffe8\007\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\001\002" +
    "\000\032\004\uffea\006\uffea\007\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\001\002\000\032\004\uffed\006\uffed\007\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\001\002\000\004\002\000\001\002\000\032\002" +
    "\ufff6\004\ufff6\007\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\001\002\000" +
    "\030\004\020\007\033\012\023\013\014\014\016\015\022" +
    "\016\006\017\021\020\011\021\004\022\005\001\002\000" +
    "\032\002\ufff7\004\ufff7\007\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\001" +
    "\002\000\032\002\ufffa\004\ufffa\007\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\001\002\000\004\002\ufffe\001\002\000\032\002\ufffc" +
    "\004\020\007\033\012\023\013\014\014\016\015\022\016" +
    "\006\017\021\020\011\021\004\022\005\001\002\000\022" +
    "\004\045\012\046\013\042\014\044\015\047\020\040\021" +
    "\036\022\037\001\002\000\032\002\ufff8\004\ufff8\007\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\001\002\000\032\002\ufff9\004\ufff9" +
    "\007\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\001\002\000\024\004\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\001\002\000\024\004\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\020\uffdb\021\uffdb\022\uffdb\001" +
    "\002\000\024\004\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\020\uffdd\021\uffdd\022\uffdd\001\002\000\024\004" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\001\002\000\024\004\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\001\002\000\024\004\045\012\046\013\042\014\044\015" +
    "\047\016\050\020\040\021\036\022\037\001\002\000\024" +
    "\004\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\001\002\000\024\004\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda\021\uffda\022" +
    "\uffda\001\002\000\024\004\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\020\uffe1\021\uffe1\022\uffe1\001\002\000" +
    "\024\004\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\020\uffde\021\uffde\022\uffde\001\002\000\004\004\052\001" +
    "\002\000\024\004\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\020\uffe3\021\uffe3\022\uffe3\001\002\000\004\017" +
    "\053\001\002\000\004\011\ufff4\001\002\000\004\011\056" +
    "\001\002\000\034\002\ufff3\004\ufff3\007\ufff3\011\056\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\001\002\000\004\004\060\001\002\000" +
    "\034\002\ufff1\004\ufff1\007\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\001\002\000\034\002\ufff0\004\ufff0\007\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\001\002\000\034\002\ufff2\004\ufff2" +
    "\007\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\001\002\000\004" +
    "\002\ufffd\001\002\000\032\004\uffef\006\uffef\007\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\001\002\000\032\002\ufffb\004\ufffb\007" +
    "\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\001\002\000\024\004\045\012" +
    "\046\013\042\014\044\015\047\016\066\020\040\021\036" +
    "\022\037\001\002\000\004\004\067\001\002\000\004\017" +
    "\070\001\002\000\030\004\ufff5\007\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\014\002\011\003\006\004\016\005\007\006" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\062\005\070\006\014\001\001\000\006" +
    "\016\064\017\040\001\001\000\002\001\001\000\024\002" +
    "\025\003\006\007\031\010\030\011\027\012\034\013\033" +
    "\014\026\015\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\062\011\063\012\034\013\033\014\026\015\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\025\003\006\007\031\010\061\011\027" +
    "\012\034\013\033\014\026\015\024\001\001\000\006\016" +
    "\042\017\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\053\001\001\000\006\020\054\021" +
    "\056\001\001\000\004\021\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LabParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LabParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LabParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LabParser$actions {


    Integer sheetnumber = 0;
    String element = null;

  private final LabParser parser;

  /** Constructor */
  CUP$LabParser$actions(LabParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LabParser$do_action_part00000000(
    int                        CUP$LabParser$act_num,
    java_cup.runtime.lr_parser CUP$LabParser$parser,
    java.util.Stack            CUP$LabParser$stack,
    int                        CUP$LabParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LabParser$result;

      /* select the action based on the action number */
      switch (CUP$LabParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // tex ::= tex_stuff lab 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("tex",2, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= tex EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		RESULT = start_val;
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LabParser$parser.done_parsing();
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tex ::= lab 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("tex",2, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lab ::= title sheets 
            {
              Object RESULT =null;
		 System.out.println("end"); 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("lab",3, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sheets ::= section sheets 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheets",6, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sheets ::= section 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheets",6, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // section ::= tex_stuff sheet 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("section",5, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // section ::= sheet 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("section",5, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sheet ::= normal_sheet 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",7, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sheet ::= video_sheet 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",7, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sheet ::= motion_sheet 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",7, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sheet ::= calc_y_sheet 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",7, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // title ::= CMD_TITLE find_left LEFTCURLYBRACE LATEXSTRING RIGHTCURLYBRACE 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		  System.out.print("Lablet = {\n\tinterface = 1.0,\n\ttitle = ");
                    System.out.print("\"(TeX) " + ls + "\"\n}\n\n\n");
                    System.out.println("function Lablet.buildActivity(builder)"); 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("title",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
  ++sheetnumber;
                        System.out.println();
                        System.out.println("\t-- SHEET "+sheetnumber);
                        System.out.println("\tlocal sheet = builder:create(\"Sheet\")");
                        System.out.println("\tbuilder:add(sheet)");
                        System.out.println("\tsheet:setTitle(\"" + ls + "\")"); 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // normal_sheet ::= CMD_SHEET find_left LEFTCURLYBRACE LATEXSTRING RIGHTCURLYBRACE NT$0 elems 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("normal_sheet",8, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-6)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // elems ::= elems elem 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("elems",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // elems ::= elem 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("elems",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // elem ::= CMD_TEXT LATEXSTRING 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 System.out.println("\tsheet:addText(\"" + ls + "\")"); 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("elem",15, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tex_stuff ::= tex_stuff symbol 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("tex_stuff",0, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tex_stuff ::= symbol 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("tex_stuff",0, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // symbol ::= AMPERSAND 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("symbol",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // symbol ::= DOLLARSIGN 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("symbol",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // symbol ::= HASHMARK 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("symbol",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // symbol ::= UNDERSCORE 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("symbol",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // symbol ::= LEFTCURLYBRACE 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("symbol",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // symbol ::= RIGHTCURLYBRACE 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("symbol",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // symbol ::= TILDE 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("symbol",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // symbol ::= CARROT 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("symbol",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // symbol ::= BACKSLASH 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("symbol",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // symbol ::= LATEXSTRING 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("symbol",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // find_left ::= find_left find_left_sym 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",12, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // find_left ::= find_left_sym 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",12, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // find_left_sym ::= AMPERSAND 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left_sym",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // find_left_sym ::= DOLLARSIGN 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left_sym",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // find_left_sym ::= HASHMARK 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left_sym",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // find_left_sym ::= UNDERSCORE 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left_sym",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // find_left_sym ::= TILDE 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left_sym",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // find_left_sym ::= CARROT 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left_sym",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // find_left_sym ::= BACKSLASH 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left_sym",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // find_left_sym ::= LATEXSTRING 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left_sym",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LabParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LabParser$do_action(
    int                        CUP$LabParser$act_num,
    java_cup.runtime.lr_parser CUP$LabParser$parser,
    java.util.Stack            CUP$LabParser$stack,
    int                        CUP$LabParser$top)
    throws java.lang.Exception
    {
              return CUP$LabParser$do_action_part00000000(
                               CUP$LabParser$act_num,
                               CUP$LabParser$parser,
                               CUP$LabParser$stack,
                               CUP$LabParser$top);
    }
}

}
