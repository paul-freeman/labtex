
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nz.ac.auckland.labtex.generated;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LabParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LabParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public LabParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LabParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LabParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\003\004\000\002\002\004\000\002\005" +
    "\004\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\026\005\000" +
    "\002\024\004\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\027\006" +
    "\000\002\027\005\000\002\030\004\000\002\030\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\007\000\002\033" +
    "\004\000\002\033\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\060\002\000\002\004\007\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\002\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\002\000\002\007\007\000\002\021\004\000" +
    "\002\021\003\000\002\022\006\000\002\022\006\000\002" +
    "\022\006\000\002\017\004\000\002\017\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\056\006\000\002" +
    "\057\004\000\002\057\004\000\002\057\003\000\002\037" +
    "\005\000\002\040\005\000\002\041\004\000\002\042\004" +
    "\000\002\043\004\000\002\035\004\000\002\036\004\000" +
    "\002\036\003\000\002\002\004\000\002\052\004\000\002" +
    "\053\004\000\002\054\004\000\002\055\004\000\002\044" +
    "\004\000\002\044\003\000\002\051\003\000\002\051\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\012\004\001\002\000\012\004\uffdb\006" +
    "\uffdb\024\uffdb\030\uffdb\001\002\000\022\006\035\007\023" +
    "\010\025\020\022\021\045\024\041\026\026\031\032\001" +
    "\002\000\004\002\170\001\002\000\004\013\012\001\002" +
    "\000\006\002\ufffc\013\ufffc\001\002\000\006\002\ufffe\013" +
    "\ufffe\001\002\000\012\004\uffdb\006\uffdb\024\uffdb\030\uffdb" +
    "\001\002\000\022\006\035\007\023\010\025\020\022\021" +
    "\045\024\041\026\026\031\032\001\002\000\006\002\001" +
    "\013\012\001\002\000\006\002\ufffb\013\ufffb\001\002\000" +
    "\006\002\ufffd\013\ufffd\001\002\000\006\002\ufffa\013\ufffa" +
    "\001\002\000\006\002\uffff\013\uffff\001\002\000\026\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\020\uffc5\021\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\031\uffc5\001\002\000\030\004\051\005" +
    "\uffae\006\uffae\007\uffae\010\uffae\020\uffae\021\uffae\024\uffae" +
    "\025\uffae\026\uffae\031\uffae\001\002\000\034\004\051\005" +
    "\uffae\006\uffae\007\uffae\010\uffae\020\uffae\021\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\031\uffae\001\002\000" +
    "\026\005\uffc8\006\uffc8\007\uffc8\010\uffc8\020\uffc8\021\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\031\uffc8\001\002\000\004\024" +
    "\153\001\002\000\030\004\051\005\uffae\006\uffae\007\uffae" +
    "\010\uffae\020\uffae\021\uffae\024\uffae\025\uffae\026\uffae\031" +
    "\uffae\001\002\000\026\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\020\uffcb\021\uffcb\024\uffcb\025\uffcb\026\uffcb\031\uffcb\001" +
    "\002\000\026\005\uffc7\006\uffc7\007\uffc7\010\uffc7\020\uffc7" +
    "\021\uffc7\024\uffc7\025\uffc7\026\uffc7\031\uffc7\001\002\000" +
    "\026\005\uffcc\006\uffcc\007\uffcc\010\uffcc\020\uffcc\021\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\031\uffcc\001\002\000\030\004" +
    "\051\005\uffae\006\uffae\007\uffae\010\uffae\020\uffae\021\uffae" +
    "\024\uffae\025\uffae\026\uffae\031\uffae\001\002\000\024\006" +
    "\035\007\023\010\025\020\022\021\045\024\041\025\114" +
    "\026\026\031\032\001\002\000\026\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\020\uffca\021\uffca\024\uffca\025\uffca\026\uffca" +
    "\031\uffca\001\002\000\034\004\112\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\020\uffb0\021\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\031\uffb0\001\002\000\026\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\020\uffc4\021\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\031\uffc4\001\002\000\016\006\035\007\023\021" +
    "\045\023\105\024\041\027\075\001\002\000\026\005\uffc3" +
    "\006\uffc3\007\uffc3\010\uffc3\020\uffc3\021\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\031\uffc3\001\002\000\030\004\051\006\uffae" +
    "\007\uffae\010\uffae\020\uffae\021\uffae\023\uffae\024\uffae\026" +
    "\uffae\027\uffae\031\uffae\001\002\000\026\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\020\uffc6\021\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\031\uffc6\001\002\000\014\006\035\007\023\023\070" +
    "\024\041\027\062\001\002\000\026\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\020\uffc9\021\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\031\uffc9\001\002\000\020\004\051\006\uffae\007\uffae\021" +
    "\050\023\uffae\024\uffae\027\uffae\001\002\000\032\005\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\020\uffb5\021\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\031\uffb5\001\002\000\010" +
    "\006\035\007\023\024\041\001\002\000\034\004\051\005" +
    "\uffae\006\uffae\007\uffae\010\uffae\020\uffae\021\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\031\uffae\001\002\000" +
    "\032\005\uffaf\006\uffaf\007\uffaf\010\uffaf\020\uffaf\021\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\031\uffaf\001" +
    "\002\000\012\006\035\007\023\021\060\024\041\001\002" +
    "\000\012\006\uffe1\007\uffe1\021\uffe1\024\uffe1\001\002\000" +
    "\012\006\uffe4\007\uffe4\021\uffe4\024\uffe4\001\002\000\012" +
    "\006\uffe2\007\uffe2\021\uffe2\024\uffe2\001\002\000\012\006" +
    "\uffe3\007\uffe3\021\uffe3\024\uffe3\001\002\000\012\006\uffe5" +
    "\007\uffe5\021\uffe5\024\uffe5\001\002\000\004\021\050\001" +
    "\002\000\032\005\uffe6\006\uffe6\007\uffe6\010\uffe6\020\uffe6" +
    "\021\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\031" +
    "\uffe6\001\002\000\016\006\uffe7\007\uffe7\021\uffe7\023\uffe7" +
    "\024\uffe7\027\uffe7\001\002\000\016\006\uffec\007\uffec\021" +
    "\uffec\023\uffec\024\uffec\027\uffec\001\002\000\016\006\035" +
    "\007\023\021\072\023\070\024\041\027\062\001\002\000" +
    "\016\006\uffe9\007\uffe9\021\uffe9\023\uffe9\024\uffe9\027\uffe9" +
    "\001\002\000\016\006\uffea\007\uffea\021\uffea\023\uffea\024" +
    "\uffea\027\uffea\001\002\000\016\006\uffeb\007\uffeb\021\uffeb" +
    "\023\uffeb\024\uffeb\027\uffeb\001\002\000\016\006\uffe8\007" +
    "\uffe8\021\uffe8\023\uffe8\024\uffe8\027\uffe8\001\002\000\016" +
    "\006\uffed\007\uffed\021\uffed\023\uffed\024\uffed\027\uffed\001" +
    "\002\000\034\004\073\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\020\uffee\021\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\031\uffee\001\002\000\032\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\020\uffef\021\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\031\uffef\001\002\000\026\006\uffb9\007\uffb9" +
    "\010\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9\026\uffb9\027" +
    "\uffb9\031\uffb9\001\002\000\020\006\ufff0\007\ufff0\021\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\027\ufff0\001\002\000\020\006" +
    "\ufff4\007\ufff4\021\ufff4\023\ufff4\024\ufff4\025\ufff4\027\ufff4" +
    "\001\002\000\020\006\ufff5\007\ufff5\021\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\027\ufff5\001\002\000\020\006\ufff2\007\ufff2" +
    "\021\ufff2\023\ufff2\024\ufff2\025\ufff2\027\ufff2\001\002\000" +
    "\020\006\ufff6\007\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\027\ufff6\001\002\000\020\006\ufff7\007\ufff7\021\ufff7\023" +
    "\ufff7\024\ufff7\025\ufff7\027\ufff7\001\002\000\020\006\ufff3" +
    "\007\ufff3\021\ufff3\023\ufff3\024\ufff3\025\ufff3\027\ufff3\001" +
    "\002\000\020\006\035\007\023\021\045\023\105\024\041" +
    "\025\110\027\075\001\002\000\020\006\ufff1\007\ufff1\021" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\027\ufff1\001\002\000\032" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\020\ufff9\021\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\031\ufff9\001\002" +
    "\000\020\006\ufff8\007\ufff8\021\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\027\ufff8\001\002\000\034\004\111\005\uffb7\006\uffb7" +
    "\007\uffb7\010\uffb7\020\uffb7\021\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\031\uffb7\001\002\000\032\005\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\020\uffb8\021\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\031\uffb8\001\002\000\032" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\020\uffb1\021\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\031\uffb1\001\002" +
    "\000\026\005\uffcd\006\uffcd\007\uffcd\010\uffcd\020\uffcd\021" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\031\uffcd\001\002\000\024" +
    "\004\uffd4\005\uffd4\006\uffd4\014\uffd4\015\uffd4\016\uffd4\024" +
    "\uffd4\025\uffd4\030\uffd4\001\002\000\024\004\121\005\124" +
    "\006\130\014\123\015\133\016\117\024\120\025\131\030" +
    "\116\001\002\000\030\002\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\024\uffd7\025\uffd7\030" +
    "\uffd7\001\002\000\024\004\051\006\uffae\007\uffae\010\uffae" +
    "\020\uffae\021\uffae\024\uffae\026\uffae\031\uffae\001\002\000" +
    "\030\002\uffda\004\uffda\005\uffda\006\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\024\uffda\025\uffda\030\uffda\001\002\000" +
    "\030\002\uffd6\004\uffd6\005\uffd6\006\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\024\uffd6\025\uffd6\030\uffd6\001\002\000" +
    "\014\002\uffd3\013\uffd3\014\123\015\133\016\117\001\002" +
    "\000\024\004\051\006\uffae\007\uffae\010\uffae\020\uffae\021" +
    "\uffae\024\uffae\026\uffae\031\uffae\001\002\000\030\002\uffd5" +
    "\004\uffd5\005\uffd5\006\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\024\uffd5\025\uffd5\030\uffd5\001\002\000\014\002\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\001\002\000\022\006" +
    "\035\007\023\010\025\020\022\021\045\024\041\026\026" +
    "\031\032\001\002\000\022\006\035\007\023\010\025\020" +
    "\022\021\045\024\041\026\026\031\032\001\002\000\030" +
    "\002\uffd8\004\uffd8\005\uffd8\006\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\024\uffd8\025\uffd8\030\uffd8\001\002\000\030" +
    "\002\uffd9\004\uffd9\005\uffd9\006\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\024\uffd9\025\uffd9\030\uffd9\001\002\000\022" +
    "\006\035\007\023\010\025\020\022\021\045\024\041\026" +
    "\026\031\032\001\002\000\024\004\051\006\uffae\007\uffae" +
    "\010\uffae\020\uffae\021\uffae\024\uffae\026\uffae\031\uffae\001" +
    "\002\000\022\006\uffba\007\uffba\010\uffba\020\uffba\021\uffba" +
    "\024\uffba\026\uffba\031\uffba\001\002\000\024\005\136\006" +
    "\035\007\023\010\025\020\022\021\045\024\041\026\026" +
    "\031\032\001\002\000\030\002\uffd4\004\uffd4\005\uffd4\006" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\024\uffd4\025\uffd4" +
    "\030\uffd4\001\002\000\030\002\uffcf\004\121\005\124\006" +
    "\130\013\uffcf\014\uffcf\015\uffcf\016\uffcf\024\120\025\131" +
    "\030\116\001\002\000\024\005\141\006\035\007\023\010" +
    "\025\020\022\021\045\024\041\026\026\031\032\001\002" +
    "\000\030\002\uffd4\004\uffd4\005\uffd4\006\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\024\uffd4\025\uffd4\030\uffd4\001\002" +
    "\000\030\002\uffce\004\121\005\124\006\130\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\024\120\025\131\030\116\001\002" +
    "\000\024\005\144\006\035\007\023\010\025\020\022\021" +
    "\045\024\041\026\026\031\032\001\002\000\030\002\uffd4" +
    "\004\uffd4\005\uffd4\006\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\024\uffd4\025\uffd4\030\uffd4\001\002\000\030\002\uffd0" +
    "\004\121\005\124\006\130\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\024\120\025\131\030\116\001\002\000\022\006\uffbb" +
    "\007\uffbb\010\uffbb\020\uffbb\021\uffbb\024\uffbb\026\uffbb\031" +
    "\uffbb\001\002\000\014\002\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\001\002\000\022\006\uffbc\007\uffbc\010\uffbc\020" +
    "\uffbc\021\uffbc\024\uffbc\026\uffbc\031\uffbc\001\002\000\026" +
    "\005\uffb2\006\uffb2\007\uffb2\010\uffb2\020\uffb2\021\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\031\uffb2\001\002\000\026\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\020\uffb4\021\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\031\uffb4\001\002\000\004\006\035\001\002" +
    "\000\010\006\uffbf\023\uffbf\025\uffbf\001\002\000\010\006" +
    "\035\023\157\025\156\001\002\000\026\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\020\uffc2\021\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\031\uffc2\001\002\000\010\006\uffc0\023\uffc0\025\uffc0" +
    "\001\002\000\010\006\uffc1\023\uffc1\025\uffc1\001\002\000" +
    "\032\005\uffb6\006\uffb6\007\uffb6\010\uffb6\020\uffb6\021\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\031\uffb6\001" +
    "\002\000\026\005\uffb3\006\uffb3\007\uffb3\010\uffb3\020\uffb3" +
    "\021\uffb3\024\uffb3\025\uffb3\026\uffb3\031\uffb3\001\002\000" +
    "\012\004\166\006\164\024\041\030\165\001\002\000\012" +
    "\004\uffdd\006\uffdd\024\uffdd\030\uffdd\001\002\000\012\004" +
    "\uffde\006\uffde\024\uffde\030\uffde\001\002\000\012\004\uffdc" +
    "\006\uffdc\024\uffdc\030\uffdc\001\002\000\022\006\uffbd\007" +
    "\uffbd\010\uffbd\020\uffbd\021\uffbd\024\uffbd\026\uffbd\031\uffbd" +
    "\001\002\000\004\002\000\001\002\000\024\006\035\007" +
    "\023\010\025\020\022\021\045\024\041\025\uffe0\026\026" +
    "\031\032\001\002\000\004\025\173\001\002\000\020\004" +
    "\uffd4\005\uffd4\006\uffd4\013\uffd4\024\uffd4\025\uffd4\030\uffd4" +
    "\001\002\000\020\004\121\005\124\006\130\013\uffdf\024" +
    "\120\025\131\030\116\001\002\000\012\004\166\006\164" +
    "\024\041\030\165\001\002\000\022\006\uffbe\007\uffbe\010" +
    "\uffbe\020\uffbe\021\uffbe\024\uffbe\026\uffbe\031\uffbe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\010\003\005\004\006\037\004\001\001\000" +
    "\004\015\174\001\001\000\034\002\033\017\170\020\030" +
    "\026\027\027\043\032\023\035\036\044\026\052\042\053" +
    "\041\054\020\055\035\056\037\001\001\000\002\001\001" +
    "\000\020\005\013\006\010\007\015\010\007\011\014\012" +
    "\016\040\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\162\001\001\000\034\002\033\017\032\020" +
    "\030\026\027\027\043\032\023\035\036\044\026\052\042" +
    "\053\041\054\020\055\035\056\037\001\001\000\016\006" +
    "\017\007\015\010\007\011\014\012\016\040\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\161\001\001" +
    "\000\004\051\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\150\001\001\000" +
    "\032\002\033\020\112\026\027\027\043\032\023\035\036" +
    "\044\026\052\042\053\041\054\020\055\035\056\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\077\024\103\025\101\026\076\027\075\032" +
    "\102\035\036\044\100\052\042\001\001\000\002\001\001" +
    "\000\004\051\073\001\001\000\002\001\001\000\016\002" +
    "\065\026\064\030\063\031\062\035\036\044\066\001\001" +
    "\000\002\001\001\000\006\051\045\052\046\001\001\000" +
    "\002\001\001\000\016\002\054\026\052\033\051\034\053" +
    "\035\036\044\055\001\001\000\004\051\045\001\001\000" +
    "\002\001\001\000\014\002\054\026\052\034\056\035\036" +
    "\044\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\065\026\064\031\070\035\036" +
    "\044\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\077\025\106\026\076\027\075\032\102\035\036" +
    "\036\105\044\100\052\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\114\001\001\000\014\021\121\022\124\041\125\042\131" +
    "\043\126\001\001\000\002\001\001\000\004\051\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\146" +
    "\041\125\042\131\043\126\001\001\000\004\051\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\033" +
    "\017\142\020\030\026\027\027\043\032\023\035\036\044" +
    "\026\052\042\053\041\054\020\055\035\056\037\001\001" +
    "\000\034\002\033\017\137\020\030\026\027\027\043\032" +
    "\023\035\036\044\026\052\042\053\041\054\020\055\035" +
    "\056\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\033\017\134\020\030\026\027\027\043\032\023" +
    "\035\036\044\026\052\042\053\041\054\020\055\035\056" +
    "\037\001\001\000\004\051\133\001\001\000\002\001\001" +
    "\000\032\002\033\020\112\026\027\027\043\032\023\035" +
    "\036\044\026\052\042\053\041\054\020\055\035\056\037" +
    "\001\001\000\004\013\136\001\001\000\002\001\001\000" +
    "\032\002\033\020\112\026\027\027\043\032\023\035\036" +
    "\044\026\052\042\053\041\054\020\055\035\056\037\001" +
    "\001\000\004\013\141\001\001\000\002\001\001\000\032" +
    "\002\033\020\112\026\027\027\043\032\023\035\036\044" +
    "\026\052\042\053\041\054\020\055\035\056\037\001\001" +
    "\000\004\013\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\153\057\154\001\001\000" +
    "\002\001\001\000\004\044\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\033\020\112\026\027\027\043" +
    "\032\023\035\036\044\026\052\042\053\041\054\020\055" +
    "\035\056\037\060\171\001\001\000\002\001\001\000\004" +
    "\013\173\001\001\000\002\001\001\000\004\035\175\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LabParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LabParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LabParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LabParser$actions {


    Integer sheetnumber = 0;
    String element = null;

  private final LabParser parser;

  /** Constructor */
  CUP$LabParser$actions(LabParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LabParser$do_action_part00000000(
    int                        CUP$LabParser$act_num,
    java_cup.runtime.lr_parser CUP$LabParser$parser,
    java.util.Stack            CUP$LabParser$stack,
    int                        CUP$LabParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LabParser$result;

      /* select the action based on the action number */
      switch (CUP$LabParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // tex_file ::= title sheets 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = t + "\n" + xs + "\nend"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("tex_file",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= tex_file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		RESULT = start_val;
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LabParser$parser.done_parsing();
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sheets ::= sheets sheet 
            {
              String RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = xs + "\n\n" + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheets",3, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sheets ::= sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheets",3, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sheet ::= normal_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sheet ::= video_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sheet ::= motion_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sheet ::= calc_y_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // curly_braced ::= left_curly_brace curly_elems right_curly_brace 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s + w; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_braced",20, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // curly_elems ::= curly_elems curly_elem 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elems",18, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // curly_elems ::= curly_elem 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elems",18, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // curly_elem ::= basic_string 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // curly_elem ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // curly_elem ::= dollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // curly_elem ::= ddollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // curly_elem ::= latex_cmd 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // curly_elem ::= UNDERSCORE 
            {
              String RESULT =null;
		 RESULT = "_"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // curly_elem ::= CARROT 
            {
              String RESULT =null;
		 RESULT = "^"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dollar_env ::= dollarsign dollar_string DOLLARSIGN WHITESPACE 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		 RESULT = ls + " "; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_env",21, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dollar_env ::= dollarsign dollar_string DOLLARSIGN 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_env",21, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dollar_string ::= dollar_string dollar_piece 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + " " + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_string",22, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dollar_string ::= dollar_piece 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_string",22, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dollar_piece ::= basic_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",23, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dollar_piece ::= latex_cmd 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",23, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dollar_piece ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",23, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dollar_piece ::= UNDERSCORE 
            {
              String RESULT =null;
		 RESULT = "_"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",23, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dollar_piece ::= CARROT 
            {
              String RESULT =null;
		 RESULT = "^"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",23, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ddollar_env ::= DOLLARSIGN dollarsign ddollar_string DOLLARSIGN dollarsign 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_env",24, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ddollar_string ::= ddollar_string ddollar_piece 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + " " + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_string",25, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ddollar_string ::= ddollar_piece 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_string",25, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ddollar_piece ::= basic_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_piece",26, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ddollar_piece ::= latex_cmd 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_piece",26, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ddollar_piece ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_piece",26, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$0 ::= 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
  RESULT =
                            "Lablet = {\n\tinterface = 1.0,\n\ttitle = " +
                            "\"(TeX) " + ls + "\"\n}\n\n\n" +
                            "function Lablet.buildActivity(builder)"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // title ::= cmd_title latex_string NT$0 RIGHTCURLYBRACE find_cmd 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("title",2, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // find_left ::= find_left BACKSLASH 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // find_left ::= find_left LATEXSTRING 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // find_left ::= find_left WHITESPACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // find_left ::= 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // find_cmd ::= find_cmd LEFTCURLYBRACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // find_cmd ::= find_cmd RIGHTCURLYBRACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // find_cmd ::= find_cmd LATEXSTRING 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // find_cmd ::= find_cmd BACKSLASH 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // find_cmd ::= find_cmd WHITESPACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // find_cmd ::= find_cmd BLANKLINE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // find_cmd ::= 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // normal_sheet ::= cmd_sheet latex_string RIGHTCURLYBRACE find_cmd sheet_elems 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		  ++sheetnumber;
                            RESULT =
                            "    -- SHEET " + sheetnumber + "\n" +
                            "    local sheet = builder:create(\"Sheet\")\n" +
                            "    builder:add(sheet)\n" +
                            "    sheet:setTitle(\"" + ls + "\")\n" +
                            xs; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("normal_sheet",5, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sheet_elems ::= sheet_elems sheet_elem 
            {
              String RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = xs + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elems",15, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sheet_elems ::= sheet_elem 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elems",15, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sheet_elem ::= cmd_text latex_string BLANKLINE find_cmd 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		 RESULT = "    sheet:addText(\"" + ls + "\")\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem",16, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sheet_elem ::= cmd_header latex_string BLANKLINE find_cmd 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		 RESULT = "    sheet:addHeader(\"" + ls + "\")\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem",16, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sheet_elem ::= cmd_check latex_string BLANKLINE find_cmd 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		 RESULT = "    sheet:addCheckQuestion(\"" + ls + "\")\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem",16, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // latex_string ::= latex_string string_piece 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("latex_string",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // latex_string ::= string_piece 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("latex_string",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // string_piece ::= basic_string 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // string_piece ::= latex_cmd 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // string_piece ::= dollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // string_piece ::= ddollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // string_piece ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // string_piece ::= tilde 
            {
              String RESULT =null;
		 RESULT = " "; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // string_piece ::= percent 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // string_piece ::= escaped_backslash 
            {
              String RESULT =null;
		 RESULT = "\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // string_piece ::= href 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // href ::= LATEX_HREF LEFTCURLYBRACE href_string RIGHTCURLYBRACE 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href",44, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // href_string ::= href_string basic_string 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href_string",45, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // href_string ::= href_string UNDERSCORE 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href_string",45, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // href_string ::= basic_string 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href_string",45, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cmd_title ::= CMD_TITLE find_left left_curly_brace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_title",29, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cmd_sheet ::= CMD_SHEET find_left left_curly_brace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_sheet",30, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cmd_text ::= CMD_TEXT opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_text",31, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cmd_header ::= CMD_HEADER opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_header",32, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cmd_check ::= CMD_CHECK opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_check",33, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // left_curly_brace ::= LEFTCURLYBRACE opt_whitespace 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("left_curly_brace",27, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // right_curly_brace ::= RIGHTCURLYBRACE WHITESPACE 
            {
              Object RESULT =null;
		 RESULT = " "; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("right_curly_brace",28, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // right_curly_brace ::= RIGHTCURLYBRACE 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("right_curly_brace",28, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // latex_cmd ::= LATEX_CMD opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("latex_cmd",0, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // dollarsign ::= DOLLARSIGN opt_whitespace 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollarsign",40, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tilde ::= TILDE opt_whitespace 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("tilde",41, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // percent ::= PERCENT opt_whitespace 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("percent",42, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // escaped_backslash ::= ESCAPED_BACKSLASH opt_whitespace 
            {
              Object RESULT =null;
		 RESULT = "\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("escaped_backslash",43, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // basic_string ::= LATEXSTRING WHITESPACE 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		 RESULT = ls + " "; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("basic_string",34, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // basic_string ::= LATEXSTRING 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("basic_string",34, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // opt_whitespace ::= WHITESPACE 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("opt_whitespace",39, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // opt_whitespace ::= 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("opt_whitespace",39, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LabParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LabParser$do_action(
    int                        CUP$LabParser$act_num,
    java_cup.runtime.lr_parser CUP$LabParser$parser,
    java.util.Stack            CUP$LabParser$stack,
    int                        CUP$LabParser$top)
    throws java.lang.Exception
    {
              return CUP$LabParser$do_action_part00000000(
                               CUP$LabParser$act_num,
                               CUP$LabParser$parser,
                               CUP$LabParser$stack,
                               CUP$LabParser$top);
    }
}

}
