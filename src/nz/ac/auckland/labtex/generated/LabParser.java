
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nz.ac.auckland.labtex.generated;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LabParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LabParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public LabParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LabParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LabParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\003\004\000\002\002\004\000\002\005" +
    "\004\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\024\005\000" +
    "\002\022\004\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\025\006" +
    "\000\002\025\005\000\002\026\004\000\002\026\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\007\000\002\031" +
    "\004\000\002\031\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\057\002\000\002\004\007\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\002\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\002\000\002\007\007\000\002\010\007\000" +
    "\002\011\013\000\002\012\013\000\002\017\004\000\002" +
    "\017\003\000\002\020\005\000\002\020\003\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\003" +
    "\000\002\021\007\000\002\021\011\000\002\015\004\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\052\006\000\002\053\004\000" +
    "\002\053\004\000\002\053\003\000\002\054\006\000\002" +
    "\033\005\000\002\034\005\000\002\036\005\000\002\037" +
    "\005\000\002\040\004\000\002\041\004\000\002\042\004" +
    "\000\002\043\004\000\002\055\004\000\002\056\004\000" +
    "\002\002\004\000\002\046\004\000\002\047\004\000\002" +
    "\050\004\000\002\051\004\000\002\044\004\000\002\045" +
    "\004\000\002\045\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\012\004\001\002\000\012\004\uffdb\006" +
    "\uffdb\031\uffdb\035\uffdb\001\002\000\024\006\043\007\027" +
    "\010\031\011\042\025\026\026\053\031\047\033\032\036" +
    "\037\001\002\000\004\002\246\001\002\000\010\013\017" +
    "\014\011\015\023\001\002\000\012\002\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\001\002\000\012\004\uffdb\006\uffdb\031\uffdb" +
    "\035\uffdb\001\002\000\024\006\043\007\027\010\031\011" +
    "\042\025\026\026\053\031\047\033\032\036\037\001\002" +
    "\000\012\002\ufffd\013\ufffd\014\ufffd\015\ufffd\001\002\000" +
    "\012\002\ufffc\013\ufffc\014\ufffc\015\ufffc\001\002\000\024" +
    "\006\043\007\027\010\031\011\042\025\026\026\053\031" +
    "\047\033\032\036\037\001\002\000\012\002\001\013\017" +
    "\014\011\015\023\001\002\000\012\004\uffdb\006\uffdb\031" +
    "\uffdb\035\uffdb\001\002\000\012\002\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\001\002\000\012\002\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\001\002\000\024\006\043\007\027\010\031\011\042" +
    "\025\026\026\053\031\047\033\032\036\037\001\002\000" +
    "\012\004\uffdb\006\uffdb\031\uffdb\035\uffdb\001\002\000\024" +
    "\006\043\007\027\010\031\011\042\025\026\026\053\031" +
    "\047\033\032\036\037\001\002\000\054\002\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\025\uffbd\026\uffbd\031\uffbd\032\uffbd\033\uffbd\036\uffbd\001" +
    "\002\000\056\002\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\011\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\025\uffa3\026\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\036\uffa3\001\002\000\062\002" +
    "\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3" +
    "\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\025\uffa3\026\uffa3\030\uffa3\031\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\036\uffa3\001\002\000\054\002" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\025\uffc0\026\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\036\uffc0\001\002\000\004\031\136\001\002\000\056\002" +
    "\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3" +
    "\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\025\uffa3\026\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\036\uffa3\001\002\000\054\002\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\025" +
    "\uffc3\026\uffc3\031\uffc3\032\uffc3\033\uffc3\036\uffc3\001\002" +
    "\000\054\002\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\025\uffba\026\uffba\031\uffba\032" +
    "\uffba\033\uffba\036\uffba\001\002\000\054\002\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\025\uffbf\026\uffbf\031\uffbf\032\uffbf\033\uffbf\036\uffbf\001" +
    "\002\000\054\002\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\025\uffc4\026\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\036\uffc4\001\002\000\056\002\uffa3\004" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\013\uffa3" +
    "\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\025\uffa3\026\uffa3\031\uffa3\032\uffa3\033\uffa3" +
    "\036\uffa3\001\002\000\026\006\043\007\027\010\031\011" +
    "\042\025\026\026\053\031\047\032\116\033\032\036\037" +
    "\001\002\000\054\002\uffc2\005\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\025\uffc2\026\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\036\uffc2\001\002\000\004\031\121" +
    "\001\002\000\062\002\uffa3\004\uffa3\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3" +
    "\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\025\uffa3\026" +
    "\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\036\uffa3" +
    "\001\002\000\054\002\uffbc\005\uffbc\006\uffbc\007\uffbc\010" +
    "\uffbc\011\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\025\uffbc\026\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\036\uffbc\001\002\000\016\006\043" +
    "\007\027\026\053\030\113\031\047\034\103\001\002\000" +
    "\054\002\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\025\uffbb\026\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\036\uffbb\001\002\000\032\004\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\025\uffa3\026\uffa3\030\uffa3\031\uffa3" +
    "\033\uffa3\034\uffa3\036\uffa3\001\002\000\054\002\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\013\uffbe\014\uffbe" +
    "\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\025\uffbe\026\uffbe\031\uffbe\032\uffbe\033\uffbe\036\uffbe" +
    "\001\002\000\014\006\043\007\027\030\076\031\047\034" +
    "\070\001\002\000\054\002\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\025\uffc1\026\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\036\uffc1\001\002\000\020\004" +
    "\uffa3\006\uffa3\007\uffa3\026\056\030\uffa3\031\uffa3\034\uffa3" +
    "\001\002\000\062\002\uffa9\004\067\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\025\uffa9\026" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\036\uffa9" +
    "\001\002\000\010\006\043\007\027\031\047\001\002\000" +
    "\062\002\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\025\uffa3\026\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\036\uffa3\001\002\000" +
    "\012\006\043\007\027\026\065\031\047\001\002\000\012" +
    "\006\uffe1\007\uffe1\026\uffe1\031\uffe1\001\002\000\012\006" +
    "\uffe4\007\uffe4\026\uffe4\031\uffe4\001\002\000\012\006\uffe2" +
    "\007\uffe2\026\uffe2\031\uffe2\001\002\000\012\006\uffe3\007" +
    "\uffe3\026\uffe3\031\uffe3\001\002\000\012\006\uffe5\007\uffe5" +
    "\026\uffe5\031\uffe5\001\002\000\004\026\056\001\002\000" +
    "\060\002\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\025\uffe6\026\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\036\uffe6\001\002\000\062\002" +
    "\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\025\uffa4\026\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\036\uffa4\001\002\000\016\006" +
    "\uffe7\007\uffe7\026\uffe7\030\uffe7\031\uffe7\034\uffe7\001\002" +
    "\000\016\006\uffec\007\uffec\026\uffec\030\uffec\031\uffec\034" +
    "\uffec\001\002\000\016\006\043\007\027\026\100\030\076" +
    "\031\047\034\070\001\002\000\016\006\uffe9\007\uffe9\026" +
    "\uffe9\030\uffe9\031\uffe9\034\uffe9\001\002\000\016\006\uffea" +
    "\007\uffea\026\uffea\030\uffea\031\uffea\034\uffea\001\002\000" +
    "\016\006\uffeb\007\uffeb\026\uffeb\030\uffeb\031\uffeb\034\uffeb" +
    "\001\002\000\016\006\uffe8\007\uffe8\026\uffe8\030\uffe8\031" +
    "\uffe8\034\uffe8\001\002\000\016\006\uffed\007\uffed\026\uffed" +
    "\030\uffed\031\uffed\034\uffed\001\002\000\062\002\uffee\004" +
    "\101\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\025\uffee\026\uffee\030\uffee\031\uffee\032\uffee" +
    "\033\uffee\034\uffee\036\uffee\001\002\000\060\002\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\025\uffef\026\uffef\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\036\uffef\001\002\000\032\004\067\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\025\uffac\026\uffac\030\uffac\031\uffac" +
    "\033\uffac\034\uffac\036\uffac\001\002\000\020\006\ufff0\007" +
    "\ufff0\026\ufff0\030\ufff0\031\ufff0\032\ufff0\034\ufff0\001\002" +
    "\000\020\006\ufff4\007\ufff4\026\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\034\ufff4\001\002\000\020\006\ufff5\007\ufff5\026\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\034\ufff5\001\002\000\020\006" +
    "\ufff2\007\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2\034\ufff2" +
    "\001\002\000\020\006\ufff6\007\ufff6\026\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\034\ufff6\001\002\000\020\006\ufff7\007\ufff7" +
    "\026\ufff7\030\ufff7\031\ufff7\032\ufff7\034\ufff7\001\002\000" +
    "\020\006\ufff3\007\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3" +
    "\034\ufff3\001\002\000\020\006\043\007\027\026\053\030" +
    "\113\031\047\032\116\034\103\001\002\000\020\006\ufff1" +
    "\007\ufff1\026\ufff1\030\ufff1\031\ufff1\032\ufff1\034\ufff1\001" +
    "\002\000\060\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\025\ufff9\026\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9\001\002\000" +
    "\020\006\ufff8\007\ufff8\026\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\034\ufff8\001\002\000\062\002\uffa3\004\uffa3\005\uffa3\006" +
    "\uffa3\007\uffa3\010\uffa3\011\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\025" +
    "\uffa3\026\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\036\uffa3\001\002\000\062\002\uffab\004\067\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\013\uffab\014\uffab\015\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\025" +
    "\uffab\026\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab" +
    "\036\uffab\001\002\000\062\002\uffa5\004\067\005\uffa5\006" +
    "\uffa5\007\uffa5\010\uffa5\011\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\025" +
    "\uffa5\026\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5" +
    "\036\uffa5\001\002\000\024\006\043\007\027\010\031\011" +
    "\042\025\026\026\053\031\047\033\032\036\037\001\002" +
    "\000\026\006\043\007\027\010\031\011\042\025\026\026" +
    "\053\031\047\032\116\033\032\036\037\001\002\000\054" +
    "\002\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\025\uffb5\026\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\036\uffb5\001\002\000\054\002\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\025\uffc5" +
    "\026\uffc5\031\uffc5\032\uffc5\033\uffc5\036\uffc5\001\002\000" +
    "\004\031\047\001\002\000\024\006\043\007\027\010\031" +
    "\011\042\025\026\026\053\031\047\033\032\036\037\001" +
    "\002\000\026\006\043\007\027\010\031\011\042\025\026" +
    "\026\053\031\047\032\116\033\032\036\037\001\002\000" +
    "\004\031\047\001\002\000\024\006\043\007\027\010\031" +
    "\011\042\025\026\026\053\031\047\033\032\036\037\001" +
    "\002\000\026\006\043\007\027\010\031\011\042\025\026" +
    "\026\053\031\047\032\116\033\032\036\037\001\002\000" +
    "\012\002\uffd0\013\uffd0\014\uffd0\015\uffd0\001\002\000\056" +
    "\002\uffa6\004\067\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\025\uffa6\026\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\036\uffa6\001\002\000\056\002\uffa8\004\067" +
    "\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\013\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\025\uffa8\026\uffa8\031\uffa8\032\uffa8\033\uffa8\036" +
    "\uffa8\001\002\000\004\006\043\001\002\000\010\006\uffb6" +
    "\030\uffb6\032\uffb6\001\002\000\010\006\043\030\142\032" +
    "\141\001\002\000\054\002\uffb9\005\uffb9\006\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\025\uffb9\026\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\036\uffb9\001\002\000\010\006" +
    "\uffb7\030\uffb7\032\uffb7\001\002\000\010\006\uffb8\030\uffb8" +
    "\032\uffb8\001\002\000\062\002\uffaa\004\067\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\011\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\025" +
    "\uffaa\026\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\036\uffaa\001\002\000\056\002\uffa7\004\067\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\011\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\025" +
    "\uffa7\026\uffa7\031\uffa7\032\uffa7\033\uffa7\036\uffa7\001\002" +
    "\000\012\004\151\006\147\031\047\035\150\001\002\000" +
    "\012\004\uffdd\006\uffdd\031\uffdd\035\uffdd\001\002\000\012" +
    "\004\uffde\006\uffde\031\uffde\035\uffde\001\002\000\012\004" +
    "\uffdc\006\uffdc\031\uffdc\035\uffdc\001\002\000\024\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\025\uffb1\026\uffb1\031\uffb1\033" +
    "\uffb1\036\uffb1\001\002\000\026\006\043\007\027\010\031" +
    "\011\042\025\026\026\053\031\047\032\154\033\032\036" +
    "\037\001\002\000\032\004\uffd4\005\uffd4\006\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\031\uffd4\032" +
    "\uffd4\035\uffd4\001\002\000\032\004\175\005\163\006\171" +
    "\016\164\017\161\020\166\021\160\022\200\023\165\031" +
    "\174\032\172\035\170\001\002\000\024\006\043\007\027" +
    "\010\031\011\042\025\026\026\053\031\047\033\032\036" +
    "\037\001\002\000\026\002\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\001" +
    "\002\000\006\004\uffa3\031\uffa3\001\002\000\026\004\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\011\uffa3\025\uffa3\026\uffa3\031" +
    "\uffa3\033\uffa3\036\uffa3\001\002\000\030\002\uffcc\005\220" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\001\002\000\042\002\uffd5\004\uffd5" +
    "\005\uffd5\006\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\031\uffd5\032\uffd5" +
    "\035\uffd5\001\002\000\026\004\uffa3\006\uffa3\007\uffa3\010" +
    "\uffa3\011\uffa3\025\uffa3\026\uffa3\031\uffa3\033\uffa3\036\uffa3" +
    "\001\002\000\030\002\uffc8\005\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\001\002\000\026\004\uffa3\006\uffa3\007\uffa3\010\uffa3\011" +
    "\uffa3\025\uffa3\026\uffa3\031\uffa3\033\uffa3\036\uffa3\001\002" +
    "\000\026\002\uffd2\013\uffd2\014\uffd2\015\uffd2\016\164\017" +
    "\161\020\166\021\160\022\200\023\165\001\002\000\042" +
    "\002\uffd7\004\uffd7\005\uffd7\006\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\031\uffd7\032\uffd7\035\uffd7\001\002\000\042\002\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\031\uffd8\032" +
    "\uffd8\035\uffd8\001\002\000\042\002\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\031\uffd9\032\uffd9\035\uffd9" +
    "\001\002\000\024\006\043\007\027\010\031\011\042\025" +
    "\026\026\053\031\047\033\032\036\037\001\002\000\042" +
    "\002\uffda\004\uffda\005\uffda\006\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\031\uffda\032\uffda\035\uffda\001\002\000\042\002\uffd6\004" +
    "\uffd6\005\uffd6\006\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\031\uffd6\032" +
    "\uffd6\035\uffd6\001\002\000\024\006\043\007\027\010\031" +
    "\011\042\025\026\026\053\031\047\033\032\036\037\001" +
    "\002\000\004\031\047\001\002\000\004\031\047\001\002" +
    "\000\004\006\043\001\002\000\004\032\116\001\002\000" +
    "\004\031\047\001\002\000\004\006\043\001\002\000\004" +
    "\032\116\001\002\000\030\002\uffc6\005\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\001\002\000\004\006\043\001\002\000\004\032" +
    "\116\001\002\000\024\006\043\007\027\010\031\011\042" +
    "\025\026\026\053\031\047\033\032\036\037\001\002\000" +
    "\052\002\uffc7\005\uffc7\006\043\007\027\010\031\011\042" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\025\026\026\053\031\047\033\032" +
    "\036\037\001\002\000\052\002\uffca\005\uffca\006\043\007" +
    "\027\010\031\011\042\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\025\026\026" +
    "\053\031\047\033\032\036\037\001\002\000\052\002\uffcb" +
    "\005\uffcb\006\043\007\027\010\031\011\042\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\025\026\026\053\031\047\033\032\036\037\001" +
    "\002\000\026\002\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\001\002\000" +
    "\026\004\067\006\uffb0\007\uffb0\010\uffb0\011\uffb0\025\uffb0" +
    "\026\uffb0\031\uffb0\033\uffb0\036\uffb0\001\002\000\026\004" +
    "\067\006\uffaf\007\uffaf\010\uffaf\011\uffaf\025\uffaf\026\uffaf" +
    "\031\uffaf\033\uffaf\036\uffaf\001\002\000\042\002\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\031\uffd4\032" +
    "\uffd4\035\uffd4\001\002\000\042\002\uffcd\004\175\005\163" +
    "\006\171\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\031\174\032\172\035\170" +
    "\001\002\000\026\004\067\006\uffae\007\uffae\010\uffae\011" +
    "\uffae\025\uffae\026\uffae\031\uffae\033\uffae\036\uffae\001\002" +
    "\000\006\004\067\031\uffad\001\002\000\052\002\uffc9\005" +
    "\uffc9\006\043\007\027\010\031\011\042\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\025\026\026\053\031\047\033\032\036\037\001\002" +
    "\000\012\004\151\006\147\031\047\035\150\001\002\000" +
    "\024\006\uffb3\007\uffb3\010\uffb3\011\uffb3\025\uffb3\026\uffb3" +
    "\031\uffb3\033\uffb3\036\uffb3\001\002\000\012\002\uffff\013" +
    "\uffff\014\uffff\015\uffff\001\002\000\026\006\043\007\027" +
    "\010\031\011\042\025\026\026\053\031\047\032\116\033" +
    "\032\036\037\001\002\000\004\031\047\001\002\000\024" +
    "\006\043\007\027\010\031\011\042\025\026\026\053\031" +
    "\047\033\032\036\037\001\002\000\026\006\043\007\027" +
    "\010\031\011\042\025\026\026\053\031\047\032\116\033" +
    "\032\036\037\001\002\000\004\031\047\001\002\000\024" +
    "\006\043\007\027\010\031\011\042\025\026\026\053\031" +
    "\047\033\032\036\037\001\002\000\026\006\043\007\027" +
    "\010\031\011\042\025\026\026\053\031\047\032\116\033" +
    "\032\036\037\001\002\000\012\002\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\001\002\000\026\006\043\007\027\010\031\011" +
    "\042\025\026\026\053\031\047\032\241\033\032\036\037" +
    "\001\002\000\032\004\uffd4\005\uffd4\006\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\031\uffd4\032\uffd4" +
    "\035\uffd4\001\002\000\032\004\175\005\163\006\171\016" +
    "\164\017\161\020\166\021\160\022\200\023\165\031\174" +
    "\032\172\035\170\001\002\000\026\002\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\164\017\161\020\166\021\160\022\200" +
    "\023\165\001\002\000\012\004\151\006\147\031\047\035" +
    "\150\001\002\000\024\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\025\uffb2\026\uffb2\031\uffb2\033\uffb2\036\uffb2\001\002\000" +
    "\004\002\000\001\002\000\026\006\043\007\027\010\031" +
    "\011\042\025\026\026\053\031\047\032\uffe0\033\032\036" +
    "\037\001\002\000\004\032\251\001\002\000\024\004\uffd4" +
    "\005\uffd4\006\uffd4\013\uffd4\014\uffd4\015\uffd4\031\uffd4\032" +
    "\uffd4\035\uffd4\001\002\000\024\004\175\005\163\006\171" +
    "\013\uffdf\014\uffdf\015\uffdf\031\174\032\172\035\170\001" +
    "\002\000\012\004\151\006\147\031\047\035\150\001\002" +
    "\000\024\006\uffb4\007\uffb4\010\uffb4\011\uffb4\025\uffb4\026" +
    "\uffb4\031\uffb4\033\uffb4\036\uffb4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\010\003\005\004\006\033\004\001\001\000" +
    "\004\014\252\001\001\000\036\002\040\015\246\016\035" +
    "\024\034\025\051\030\027\044\032\046\050\047\047\050" +
    "\024\051\043\052\045\054\033\055\044\001\001\000\002" +
    "\001\001\000\026\005\015\006\017\007\012\010\013\011" +
    "\007\012\020\034\011\035\021\036\014\037\023\001\001" +
    "\000\002\001\001\000\004\014\243\001\001\000\036\002" +
    "\040\015\237\016\035\024\034\025\051\030\027\044\032" +
    "\046\050\047\047\050\024\051\043\052\045\054\033\055" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\002\040\015\227\016\035\024\034\025\051\030\027\044" +
    "\032\046\050\047\047\050\024\051\043\052\045\054\033" +
    "\055\044\001\001\000\024\006\226\007\012\010\013\011" +
    "\007\012\020\034\011\035\021\036\014\037\023\001\001" +
    "\000\004\014\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\002\040\015\152\016\035\024\034\025\051" +
    "\030\027\044\032\046\050\047\047\050\024\051\043\052" +
    "\045\054\033\055\044\001\001\000\004\014\145\001\001" +
    "\000\036\002\040\015\037\016\035\024\034\025\051\030" +
    "\027\044\032\046\050\047\047\050\024\051\043\052\045" +
    "\054\033\055\044\001\001\000\002\001\001\000\004\045" +
    "\144\001\001\000\004\045\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\133\001\001\000\036\002\040\016\123\024" +
    "\034\025\051\030\027\044\032\046\050\047\047\050\024" +
    "\051\043\052\045\054\033\055\044\056\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\117\001\001" +
    "\000\002\001\001\000\024\002\105\022\111\023\107\024" +
    "\104\025\103\030\110\044\106\046\050\055\044\001\001" +
    "\000\002\001\001\000\004\045\101\001\001\000\002\001" +
    "\001\000\016\002\073\024\072\026\071\027\070\044\074" +
    "\055\044\001\001\000\002\001\001\000\006\045\053\046" +
    "\054\001\001\000\002\001\001\000\016\002\061\024\057" +
    "\031\056\032\060\044\062\055\044\001\001\000\004\045" +
    "\053\001\001\000\014\002\061\024\057\032\063\044\062" +
    "\055\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\073\024\072" +
    "\027\076\044\074\055\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\105\023\114\024\104\025\103" +
    "\030\110\044\106\046\050\055\044\056\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\002\040\015\121\016\035\024\034\025\051\030\027" +
    "\044\032\046\050\047\047\050\024\051\043\052\045\054" +
    "\033\055\044\001\001\000\036\002\040\016\123\024\034" +
    "\025\051\030\027\044\032\046\050\047\047\050\024\051" +
    "\043\052\045\054\033\055\044\056\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\125\001\001\000" +
    "\036\002\040\015\126\016\035\024\034\025\051\030\027" +
    "\044\032\046\050\047\047\050\024\051\043\052\045\054" +
    "\033\055\044\001\001\000\036\002\040\016\123\024\034" +
    "\025\051\030\027\044\032\046\050\047\047\050\024\051" +
    "\043\052\045\054\033\055\044\056\127\001\001\000\004" +
    "\055\130\001\001\000\036\002\040\015\131\016\035\024" +
    "\034\025\051\030\027\044\032\046\050\047\047\050\024" +
    "\051\043\052\045\054\033\055\044\001\001\000\036\002" +
    "\040\016\123\024\034\025\051\030\027\044\032\046\050" +
    "\047\047\050\024\051\043\052\045\054\033\055\044\056" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\044\136\053\137\001\001\000\002\001" +
    "\001\000\004\044\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\040\016\123\024\034\025\051\030\027\044\032\046\050" +
    "\047\047\050\024\051\043\052\045\054\033\055\044\001" +
    "\001\000\004\013\154\001\001\000\020\017\166\020\156" +
    "\021\161\040\172\041\175\042\155\043\176\001\001\000" +
    "\036\002\040\015\223\016\035\024\034\025\051\030\027" +
    "\044\032\046\050\047\047\050\024\051\043\052\045\054" +
    "\033\055\044\001\001\000\002\001\001\000\004\045\222" +
    "\001\001\000\004\045\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\216\001\001\000\002\001\001" +
    "\000\004\045\215\001\001\000\016\020\214\021\161\040" +
    "\172\041\175\042\155\043\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\002\040\015" +
    "\213\016\035\024\034\025\051\030\027\044\032\046\050" +
    "\047\047\050\024\051\043\052\045\054\033\055\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\002\040" +
    "\015\212\016\035\024\034\025\051\030\027\044\032\046" +
    "\050\047\047\050\024\051\043\052\045\054\033\055\044" +
    "\001\001\000\004\055\206\001\001\000\004\055\200\001" +
    "\001\000\004\044\201\001\001\000\004\056\202\001\001" +
    "\000\004\055\203\001\001\000\004\044\204\001\001\000" +
    "\004\056\205\001\001\000\002\001\001\000\004\044\207" +
    "\001\001\000\004\056\210\001\001\000\036\002\040\015" +
    "\211\016\035\024\034\025\051\030\027\044\032\046\050" +
    "\047\047\050\024\051\043\052\045\054\033\055\044\001" +
    "\001\000\034\002\040\016\123\024\034\025\051\030\027" +
    "\044\032\046\050\047\047\050\024\051\043\052\045\054" +
    "\033\055\044\001\001\000\034\002\040\016\123\024\034" +
    "\025\051\030\027\044\032\046\050\047\047\050\024\051" +
    "\043\052\045\054\033\055\044\001\001\000\034\002\040" +
    "\016\123\024\034\025\051\030\027\044\032\046\050\047" +
    "\047\050\024\051\043\052\045\054\033\055\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\040\016\123\024\034\025" +
    "\051\030\027\044\032\046\050\047\047\050\024\051\043" +
    "\052\045\054\033\055\044\001\001\000\004\055\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\002\040" +
    "\016\123\024\034\025\051\030\027\044\032\046\050\047" +
    "\047\050\024\051\043\052\045\054\033\055\044\056\230" +
    "\001\001\000\004\055\231\001\001\000\036\002\040\015" +
    "\232\016\035\024\034\025\051\030\027\044\032\046\050" +
    "\047\047\050\024\051\043\052\045\054\033\055\044\001" +
    "\001\000\036\002\040\016\123\024\034\025\051\030\027" +
    "\044\032\046\050\047\047\050\024\051\043\052\045\054" +
    "\033\055\044\056\233\001\001\000\004\055\234\001\001" +
    "\000\036\002\040\015\235\016\035\024\034\025\051\030" +
    "\027\044\032\046\050\047\047\050\024\051\043\052\045" +
    "\054\033\055\044\001\001\000\036\002\040\016\123\024" +
    "\034\025\051\030\027\044\032\046\050\047\047\050\024" +
    "\051\043\052\045\054\033\055\044\056\236\001\001\000" +
    "\002\001\001\000\034\002\040\016\123\024\034\025\051" +
    "\030\027\044\032\046\050\047\047\050\024\051\043\052" +
    "\045\054\033\055\044\001\001\000\004\013\241\001\001" +
    "\000\020\017\242\020\156\021\161\040\172\041\175\042" +
    "\155\043\176\001\001\000\016\020\214\021\161\040\172" +
    "\041\175\042\155\043\176\001\001\000\004\055\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\002\040" +
    "\016\123\024\034\025\051\030\027\044\032\046\050\047" +
    "\047\050\024\051\043\052\045\054\033\055\044\057\247" +
    "\001\001\000\002\001\001\000\004\013\251\001\001\000" +
    "\002\001\001\000\004\055\253\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LabParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LabParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LabParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LabParser$actions {


    Integer sheetnumber = 0;
    String element = null;

  private final LabParser parser;

  /** Constructor */
  CUP$LabParser$actions(LabParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LabParser$do_action_part00000000(
    int                        CUP$LabParser$act_num,
    java_cup.runtime.lr_parser CUP$LabParser$parser,
    java.util.Stack            CUP$LabParser$stack,
    int                        CUP$LabParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LabParser$result;

      /* select the action based on the action number */
      switch (CUP$LabParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // tex_file ::= title sheets 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = t + "\n" + xs + "\nend"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("tex_file",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= tex_file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		RESULT = start_val;
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LabParser$parser.done_parsing();
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sheets ::= sheets sheet 
            {
              String RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = xs + "\n\n" + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheets",3, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sheets ::= sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheets",3, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sheet ::= normal_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sheet ::= video_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sheet ::= motion_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sheet ::= calc_y_sheet 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // curly_braced ::= left_curly_brace curly_elems right_curly_brace 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s + w; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_braced",18, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // curly_elems ::= curly_elems curly_elem 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elems",16, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // curly_elems ::= curly_elem 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elems",16, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // curly_elem ::= basic_string 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",17, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // curly_elem ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",17, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // curly_elem ::= dollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",17, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // curly_elem ::= ddollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",17, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // curly_elem ::= latex_cmd 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",17, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // curly_elem ::= UNDERSCORE 
            {
              String RESULT =null;
		 RESULT = "_"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",17, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // curly_elem ::= CARROT 
            {
              String RESULT =null;
		 RESULT = "^"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("curly_elem",17, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dollar_env ::= dollarsign dollar_string DOLLARSIGN WHITESPACE 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		 RESULT = ls + " "; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_env",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dollar_env ::= dollarsign dollar_string DOLLARSIGN 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_env",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dollar_string ::= dollar_string dollar_piece 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + " " + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_string",20, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dollar_string ::= dollar_piece 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_string",20, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dollar_piece ::= basic_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",21, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dollar_piece ::= latex_cmd 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",21, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dollar_piece ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",21, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dollar_piece ::= UNDERSCORE 
            {
              String RESULT =null;
		 RESULT = "_"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",21, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dollar_piece ::= CARROT 
            {
              String RESULT =null;
		 RESULT = "^"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollar_piece",21, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ddollar_env ::= DOLLARSIGN dollarsign ddollar_string DOLLARSIGN dollarsign 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_env",22, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ddollar_string ::= ddollar_string ddollar_piece 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + " " + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_string",23, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ddollar_string ::= ddollar_piece 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_string",23, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ddollar_piece ::= basic_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_piece",24, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ddollar_piece ::= latex_cmd 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_piece",24, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ddollar_piece ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("ddollar_piece",24, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$0 ::= 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
  RESULT =
                            "Lablet = {\n\tinterface = 1.0,\n\ttitle = " +
                            "\"(TeX) " + ls + "\"\n}\n\n\n" +
                            "function Lablet.buildActivity(builder)"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // title ::= cmd_title latex_string NT$0 RIGHTCURLYBRACE find_cmd 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("title",2, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // find_left ::= find_left BACKSLASH 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",10, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // find_left ::= find_left LATEXSTRING 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",10, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // find_left ::= find_left WHITESPACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",10, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // find_left ::= 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_left",10, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // find_cmd ::= find_cmd LEFTCURLYBRACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // find_cmd ::= find_cmd RIGHTCURLYBRACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // find_cmd ::= find_cmd LATEXSTRING 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // find_cmd ::= find_cmd BACKSLASH 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // find_cmd ::= find_cmd WHITESPACE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // find_cmd ::= find_cmd BLANKLINE 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // find_cmd ::= 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("find_cmd",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // normal_sheet ::= cmd_sheet latex_string RIGHTCURLYBRACE find_cmd sheet_elems 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		  ++sheetnumber;
                            RESULT =
                            "    -- SHEET " + sheetnumber + "\n" +
                            "    local sheet = builder:create(\"Sheet\")\n" +
                            "    builder:add(sheet)\n" +
                            "    sheet:setTitle(\"" + ls + "\")\n" +
                            xs; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("normal_sheet",5, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // video_sheet ::= cmd_videosheet latex_string RIGHTCURLYBRACE find_cmd sheet_elems 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		  ++sheetnumber;
                            RESULT =
                            "    -- SHEET " + sheetnumber + "\n" +
                            "    local sheet = builder:create(\"Sheet\")\n" +
                            "    builder:add(sheet)\n" +
                            "    sheet:setTitle(\"" + ls + "\")\n" +
                            xs; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("video_sheet",6, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // motion_sheet ::= cmd_motionsheet latex_string right_curly_brace left_curly_brace latex_string right_curly_brace left_curly_brace latex_string right_curly_brace 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).value;
		int l3left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		  ++sheetnumber;
                            RESULT =
                            "    -- SHEET " + sheetnumber + "\n" +
                            "    local sheet = builder:create(\"MotionAnalysis\")\n" +
                            "    builder:add(sheet)\n" +
                            "    sheet:setTitle(\"" + l1 + "\")\n" +
                            "    sheet:setExperiment(" + l2 + ")\n" +
                            "    sheet:setDescriptionText(\"" + l3 + "\")\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("motion_sheet",7, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-8)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // calc_y_sheet ::= cmd_calcysheet latex_string right_curly_brace left_curly_brace latex_string right_curly_brace left_curly_brace latex_string right_curly_brace 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).value;
		int l3left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		  ++sheetnumber;
                            RESULT =
                            "    -- SHEET " + sheetnumber + "\n" +
                            "    local sheet = builder:create(\"CalculateYSpeed\")\n" +
                            "    builder:add(sheet)\n" +
                            "    sheet:setTitle(\"" + l1 + "\")\n" +
                            "    sheet:setExperiment(" + l2 + ")\n" +
                            "    sheet:setHeader(\"" + l3 + "\")\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("calc_y_sheet",8, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-8)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sheet_elems ::= sheet_elems sheet_elem 
            {
              String RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = xs + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elems",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sheet_elems ::= sheet_elem 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elems",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sheet_elem ::= sheet_elem_opt BLANKLINE find_cmd 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sheet_elem ::= sheet_elem_opt 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sheet_elem_opt ::= cmd_text latex_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = "    sheet:addText(\"" + ls + "\")\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem_opt",15, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sheet_elem_opt ::= cmd_header latex_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = "    sheet:addHeader(\"" + ls + "\")\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem_opt",15, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sheet_elem_opt ::= cmd_check latex_string 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = "    sheet:addCheckQuestion(\"" + ls + "\")\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem_opt",15, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sheet_elem_opt ::= CMD_EXPORT 
            {
              String RESULT =null;
		 RESULT = "    local exportButton = sheet:addExportButton()\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem_opt",15, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sheet_elem_opt ::= cmd_video left_curly_brace basic_string right_curly_brace latex_string 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT =
                               "    local video = sheet:addCameraExperiment()\n" +
                               "    video:setDescriptionText(\"" + ls + "\")\n" +
                               "    local " + name + " = video:getExperiment()\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem_opt",15, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sheet_elem_opt ::= CMD_MOTIONANALYSISGRAPH left_curly_brace basic_string right_curly_brace left_curly_brace basic_string right_curly_brace 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		 RESULT = "    sheet:addMotionAnalysisGraph(" + exp + "):" + type + "()\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet_elem_opt",15, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-6)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // latex_string ::= latex_string string_piece 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("latex_string",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // latex_string ::= string_piece 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("latex_string",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // string_piece ::= basic_string 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",12, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // string_piece ::= latex_cmd 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",12, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // string_piece ::= dollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",12, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // string_piece ::= ddollar_env 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",12, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // string_piece ::= curly_braced 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",12, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // string_piece ::= tilde 
            {
              String RESULT =null;
		 RESULT = " "; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",12, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // string_piece ::= percent 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",12, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // string_piece ::= escaped_backslash 
            {
              String RESULT =null;
		 RESULT = "\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",12, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // string_piece ::= href 
            {
              String RESULT =null;
		int linkleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int linkright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String link = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ""; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",12, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // string_piece ::= footnote 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("string_piece",12, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // href ::= LATEX_HREF LEFTCURLYBRACE href_string RIGHTCURLYBRACE 
            {
              String RESULT =null;
		int linkleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int linkright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String link = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		 RESULT = link; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href",40, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // href_string ::= href_string basic_string 
            {
              String RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = xs + x; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href_string",41, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // href_string ::= href_string UNDERSCORE 
            {
              String RESULT =null;
		int xsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String xs = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		 RESULT = xs + "_"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href_string",41, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // href_string ::= basic_string 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = x; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("href_string",41, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // footnote ::= LATEX_FOOTNOTE LEFTCURLYBRACE latex_string right_curly_brace 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("footnote",42, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cmd_title ::= CMD_TITLE find_left left_curly_brace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_title",25, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cmd_sheet ::= CMD_SHEET find_left left_curly_brace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_sheet",26, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cmd_motionsheet ::= CMD_MOTIONSHEET find_left left_curly_brace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_motionsheet",28, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cmd_calcysheet ::= CMD_CALCYSHEET find_left left_curly_brace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_calcysheet",29, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cmd_text ::= CMD_TEXT opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_text",30, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cmd_header ::= CMD_HEADER opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_header",31, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cmd_check ::= CMD_CHECK opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_check",32, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cmd_video ::= CMD_VIDEO opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("cmd_video",33, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // left_curly_brace ::= LEFTCURLYBRACE opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("left_curly_brace",43, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // right_curly_brace ::= RIGHTCURLYBRACE opt_whitespace 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("right_curly_brace",44, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // latex_cmd ::= LATEX_CMD opt_whitespace 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("latex_cmd",0, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // dollarsign ::= DOLLARSIGN opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("dollarsign",36, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tilde ::= TILDE opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("tilde",37, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // percent ::= PERCENT opt_whitespace 
            {
              String RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("percent",38, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // escaped_backslash ::= ESCAPED_BACKSLASH opt_whitespace 
            {
              String RESULT =null;
		 RESULT = "\n"; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("escaped_backslash",39, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // basic_string ::= LATEXSTRING opt_whitespace 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
		 RESULT = ls + s; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("basic_string",34, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // opt_whitespace ::= opt_whitespace WHITESPACE 
            {
              String RESULT =null;
		 RESULT = " "; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("opt_whitespace",35, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // opt_whitespace ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("opt_whitespace",35, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LabParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LabParser$do_action(
    int                        CUP$LabParser$act_num,
    java_cup.runtime.lr_parser CUP$LabParser$parser,
    java.util.Stack            CUP$LabParser$stack,
    int                        CUP$LabParser$top)
    throws java.lang.Exception
    {
              return CUP$LabParser$do_action_part00000000(
                               CUP$LabParser$act_num,
                               CUP$LabParser$parser,
                               CUP$LabParser$stack,
                               CUP$LabParser$top);
    }
}

}
