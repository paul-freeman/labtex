
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nz.ac.auckland.labtex.generated;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LabParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LabParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public LabParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LabParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LabParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\004\000\002\020" +
    "\002\000\002\017\007\000\002\003\004\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\021\002\000\002\011\013\000\002" +
    "\022\002\000\002\012\013\000\002\023\002\000\002\012" +
    "\014\000\002\013\014\000\002\014\014\000\002\006\004" +
    "\000\002\006\003\000\002\024\002\000\002\005\007\000" +
    "\002\025\002\000\002\005\007\000\002\026\002\000\002" +
    "\005\007\000\002\027\002\000\002\005\012\000\002\005" +
    "\003\000\002\010\004\000\002\010\003\000\002\030\002" +
    "\000\002\007\007\000\002\031\002\000\002\007\007\000" +
    "\002\032\002\000\002\007\007\000\002\007\003\000\002" +
    "\033\002\000\002\015\012\000\002\034\002\000\002\015" +
    "\015\000\002\035\002\000\002\016\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\004\004\004\001\002\000\004\022\167\001" +
    "\002\000\004\002\166\001\002\000\010\005\017\011\016" +
    "\012\010\001\002\000\012\002\ufff9\005\ufff9\011\ufff9\012" +
    "\ufff9\001\002\000\004\022\155\001\002\000\012\002\ufffb" +
    "\005\ufffb\011\ufffb\012\ufffb\001\002\000\012\002\ufffa\005" +
    "\ufffa\011\ufffa\012\ufffa\001\002\000\004\002\001\001\002" +
    "\000\012\002\ufffc\005\017\011\016\012\010\001\002\000" +
    "\012\002\ufff8\005\ufff8\011\ufff8\012\ufff8\001\002\000\004" +
    "\022\143\001\002\000\004\022\020\001\002\000\006\007" +
    "\021\010\022\001\002\000\004\023\135\001\002\000\004" +
    "\023\023\001\002\000\004\022\024\001\002\000\004\025" +
    "\025\001\002\000\004\023\026\001\002\000\020\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\030\020\ufff5\021\ufff5\001" +
    "\002\000\016\013\041\014\035\015\037\016\036\020\042" +
    "\021\040\001\002\000\016\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\020\ufff3\021\ufff3\001\002\000\016\013\041\014\035" +
    "\015\037\016\036\020\042\021\040\001\002\000\012\002" +
    "\ufff2\005\ufff2\011\ufff2\012\ufff2\001\002\000\026\002\uffe5" +
    "\005\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\020\uffe5\021\uffe5\001\002\000\026\002\uffee\005\uffee" +
    "\011\uffee\012\uffee\013\041\014\035\015\037\016\036\020" +
    "\042\021\040\001\002\000\004\022\127\001\002\000\004" +
    "\022\120\001\002\000\004\022\114\001\002\000\004\022" +
    "\uffd9\001\002\000\004\022\076\001\002\000\004\022\uffdb" +
    "\001\002\000\004\022\044\001\002\000\014\013\uffd7\014" +
    "\uffd7\015\uffd7\020\uffd7\021\uffd7\001\002\000\004\023\072" +
    "\001\002\000\014\013\054\014\051\015\047\020\042\021" +
    "\040\001\002\000\004\022\066\001\002\000\016\013\uffdc" +
    "\014\uffdc\015\uffdc\020\uffdc\021\uffdc\023\uffdc\001\002\000" +
    "\004\022\062\001\002\000\004\023\uffd6\001\002\000\016" +
    "\013\054\014\051\015\047\020\042\021\040\023\uffe3\001" +
    "\002\000\004\022\055\001\002\000\004\025\056\001\002" +
    "\000\004\023\uffe2\001\002\000\004\023\060\001\002\000" +
    "\016\013\uffe1\014\uffe1\015\uffe1\020\uffe1\021\uffe1\023\uffe1" +
    "\001\002\000\004\023\uffe4\001\002\000\004\025\063\001" +
    "\002\000\004\023\uffe0\001\002\000\004\023\065\001\002" +
    "\000\016\013\uffdf\014\uffdf\015\uffdf\020\uffdf\021\uffdf\023" +
    "\uffdf\001\002\000\004\025\067\001\002\000\004\023\uffde" +
    "\001\002\000\004\023\071\001\002\000\016\013\uffdd\014" +
    "\uffdd\015\uffdd\020\uffdd\021\uffdd\023\uffdd\001\002\000\004" +
    "\022\073\001\002\000\014\013\uffd7\014\uffd7\015\uffd7\020" +
    "\uffd7\021\uffd7\001\002\000\004\023\075\001\002\000\030" +
    "\002\uffda\005\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\020\uffda\021\uffda\023\uffda\001\002\000\004" +
    "\025\077\001\002\000\004\023\uffed\001\002\000\004\023" +
    "\101\001\002\000\026\002\uffec\005\uffec\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\020\uffec\021\uffec\001" +
    "\002\000\004\022\103\001\002\000\014\013\uffd7\014\uffd7" +
    "\015\uffd7\020\uffd7\021\uffd7\001\002\000\004\023\105\001" +
    "\002\000\004\022\106\001\002\000\014\013\uffd7\014\uffd7" +
    "\015\uffd7\020\uffd7\021\uffd7\001\002\000\004\023\110\001" +
    "\002\000\004\022\111\001\002\000\014\013\uffd7\014\uffd7" +
    "\015\uffd7\020\uffd7\021\uffd7\001\002\000\004\023\113\001" +
    "\002\000\030\002\uffd8\005\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\023\uffd8\001" +
    "\002\000\004\025\115\001\002\000\004\023\uffe9\001\002" +
    "\000\004\023\117\001\002\000\026\002\uffe8\005\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8" +
    "\021\uffe8\001\002\000\004\025\121\001\002\000\004\023" +
    "\122\001\002\000\004\022\123\001\002\000\004\025\124" +
    "\001\002\000\004\023\uffe7\001\002\000\004\023\126\001" +
    "\002\000\026\002\uffe6\005\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\020\uffe6\021\uffe6\001\002\000" +
    "\004\025\130\001\002\000\004\023\uffeb\001\002\000\004" +
    "\023\132\001\002\000\026\002\uffea\005\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\020\uffea\021\uffea" +
    "\001\002\000\012\002\uffef\005\uffef\011\uffef\012\uffef\001" +
    "\002\000\012\002\ufff4\005\ufff4\011\ufff4\012\ufff4\001\002" +
    "\000\004\022\136\001\002\000\004\025\137\001\002\000" +
    "\004\023\140\001\002\000\016\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\020\ufff7\021\ufff7\001\002\000\016\013\041\014" +
    "\035\015\037\016\036\020\042\021\040\001\002\000\012" +
    "\002\ufff6\005\ufff6\011\ufff6\012\ufff6\001\002\000\004\025" +
    "\144\001\002\000\004\023\145\001\002\000\004\022\146" +
    "\001\002\000\004\025\147\001\002\000\004\023\150\001" +
    "\002\000\004\022\151\001\002\000\004\025\152\001\002" +
    "\000\004\023\153\001\002\000\012\002\ufff1\005\ufff1\011" +
    "\ufff1\012\ufff1\001\002\000\004\002\ufffd\001\002\000\004" +
    "\025\156\001\002\000\004\023\157\001\002\000\004\022" +
    "\160\001\002\000\004\025\161\001\002\000\004\023\162" +
    "\001\002\000\004\022\163\001\002\000\004\025\164\001" +
    "\002\000\004\023\165\001\002\000\012\002\ufff0\005\ufff0" +
    "\011\ufff0\012\ufff0\001\002\000\004\002\000\001\002\000" +
    "\004\025\170\001\002\000\004\023\uffff\001\002\000\004" +
    "\023\172\001\002\000\010\005\ufffe\011\ufffe\012\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\006\002\004\017\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\012\004\013\011\010" +
    "\012\011\013\006\014\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\153\004\013\011\010\012\011\013" +
    "\006\014\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\026\001\001\000\010\005\033\006" +
    "\133\015\032\001\001\000\004\023\030\001\001\000\010" +
    "\005\033\006\031\015\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\033\006\132\015\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\101\001\001\000\002\001\001\000\004\033\042" +
    "\001\001\000\002\001\001\000\006\016\044\035\045\001" +
    "\001\000\002\001\001\000\010\007\052\010\051\015\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\052\010\060\015\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\073\035\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\103\035\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\106\035\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\111\035" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\140\001\001\000" +
    "\010\005\033\006\141\015\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\170\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LabParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LabParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LabParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LabParser$actions {


    Integer sheetnumber = 0;
    Integer horizontalnumber = 0;
    Integer verticalnumber = 0;
    Integer videonumber = 0;
    String element = null;
    String prev = null;

  private final LabParser parser;

  /** Constructor */
  CUP$LabParser$actions(LabParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LabParser$do_action_part00000000(
    int                        CUP$LabParser$act_num,
    java_cup.runtime.lr_parser CUP$LabParser$parser,
    java.util.Stack            CUP$LabParser$stack,
    int                        CUP$LabParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LabParser$result;

      /* select the action based on the action number */
      switch (CUP$LabParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // lab ::= title sheets 
            {
              Object RESULT =null;
		 System.out.println("end"); 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("lab",0, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= lab EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		RESULT = start_val;
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LabParser$parser.done_parsing();
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;
  System.out.print("Lablet = {\n\tinterface = 1.0,\n\ttitle = ");
                System.out.print("\"(TeX) " + ls + "\"\n}\n\n\n");
                System.out.println("function Lablet.buildActivity(builder)"); 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // title ::= KW_TITLE LCURLY LATEXSTRING NT$0 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("title",13, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sheets ::= sheet sheets 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheets",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sheets ::= sheet 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheets",1, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sheet ::= normal_sheet 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",2, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sheet ::= video_sheet 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",2, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sheet ::= motion_sheet 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",2, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sheet ::= calc_y_sheet 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("sheet",2, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
  ++sheetnumber;
                        System.out.println();
                        System.out.println("\t-- SHEET "+sheetnumber);
                        System.out.println("\tlocal sheet = builder:create(\"Sheet\")");
                        System.out.println("\tbuilder:add(sheet)");
                        System.out.println("\tsheet:setTitle(\"" + ls + "\")"); 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // normal_sheet ::= KW_BEGIN LCURLY KW_LABLETSHEET RCURLY LCURLY LATEXSTRING RCURLY NT$1 elems 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("normal_sheet",7, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-8)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
  ++sheetnumber;
                        System.out.println();
                        System.out.println("\t-- SHEET "+sheetnumber);
                        System.out.println("\tlocal sheet = builder:create(\"Sheet\")");
                        System.out.println("\tbuilder:add(sheet)");
                        System.out.println("\tsheet:setTitle(\"" + ls + "\")"); 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$2",16, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // video_sheet ::= KW_BEGIN LCURLY KW_LABLETVIDEOPAGE RCURLY LCURLY LATEXSTRING RCURLY NT$2 elems 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("video_sheet",8, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-8)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;
  ++sheetnumber;
                        System.out.println();
                        System.out.println("\t-- SHEET "+sheetnumber);
                        System.out.println("\tlocal sheet = builder:create(\"Sheet\")");
                        System.out.println("\tbuilder:add(sheet)");
                        System.out.println("\tsheet:setMainLayoutOrientation(\"horizontal\")");
                        System.out.println("\tsheet:setTitle(\"" + ls + "\")"); 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$3",17, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // video_sheet ::= KW_BEGIN LCURLY KW_LABLETVIDEOPAGE RCURLY LCURLY LATEXSTRING RCURLY KW_HORIZONTAL NT$3 elems 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("video_sheet",8, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-9)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // motion_sheet ::= KW_LABLETMOTIONPAGE LCURLY LATEXSTRING RCURLY LCURLY LATEXSTRING RCURLY LCURLY LATEXSTRING RCURLY 
            {
              Object RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).value;
		int l3left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		  ++sheetnumber;
                        System.out.println();
                        System.out.println("\t-- SHEET "+sheetnumber);
                        System.out.println("\tlocal sheet = builder:create(\"MotionAnalysis\")");
                        System.out.println("\tbuilder:add(sheet)");
                        System.out.println("\tsheet:setTitle(\"" + l1 + "\")");
                        System.out.println("\tsheet:setExperiment(" + l2 + ")");
                        System.out.println("\tsheet:setDescriptionText(\"" + l3 + "\")"); 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("motion_sheet",9, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-9)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // calc_y_sheet ::= KW_LABLETCALCYSPEED LCURLY LATEXSTRING RCURLY LCURLY LATEXSTRING RCURLY LCURLY LATEXSTRING RCURLY 
            {
              Object RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)).value;
		int l3left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		  ++sheetnumber;
                        System.out.println();
                        System.out.println("\t-- SHEET "+sheetnumber);
                        System.out.println("\tlocal sheet = builder:create(\"CalculateYSpeed\")");
                        System.out.println("\tbuilder:add(sheet)");
                        System.out.println("\tsheet:setExperiment(" + l2 + ")");
                        System.out.println("\tsheet:setTitle(\"" + l1 + "\")");
                        System.out.println("\tsheet:setHeader(\"" + l3 + "\")"); 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("calc_y_sheet",10, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-9)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // elems ::= elem elems 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("elems",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // elems ::= elem 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("elems",4, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$4 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;

                System.out.println("\tsheet:addText(\""+s+"\")");
            
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$4",18, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elem ::= KW_LABLETTEXT LCURLY LATEXSTRING NT$4 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("elem",3, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$5 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;

                System.out.println("\tsheet:addHeader(\""+s+"\")");
            
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$5",19, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elem ::= KW_LABLETHEADER LCURLY LATEXSTRING NT$5 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("elem",3, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$6 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;

                System.out.println("\tsheet:addCheckQuestion(\""+s+"\")");
            
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$6",20, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // elem ::= KW_LABLETCHECK LCURLY LATEXSTRING NT$6 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("elem",3, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$7 ::= 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;

                ++videonumber;
                System.out.println("\tlocal cameraExperiment"+videonumber+" = sheet:addCameraExperiment()");
                System.out.println("\tcameraExperiment"+videonumber+":setDescriptionText(\""+s2+"\")");
                System.out.println("\tlocal "+s1+" = cameraExperiment"+videonumber+":getExperiment()");
            
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$7",21, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // elem ::= KW_LABLETVIDEO LCURLY LATEXSTRING RCURLY LCURLY LATEXSTRING NT$7 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-5)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("elem",3, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // elem ::= horizontal 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("elem",3, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // named_elems ::= named_elem named_elems 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("named_elems",6, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // named_elems ::= named_elem 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("named_elems",6, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$8 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;

                System.out.println("\tsheet:addText(\""+s+"\", "+element+")");
            
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$8",22, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // named_elem ::= KW_LABLETTEXT LCURLY LATEXSTRING NT$8 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("named_elem",5, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$9 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;

                System.out.println("\tsheet:addHeader(\""+s+"\", "+element+")");
            
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$9",23, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // named_elem ::= KW_LABLETHEADER LCURLY LATEXSTRING NT$9 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("named_elem",5, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$10 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.peek()).value;

                System.out.println("\tsheet:addCheckQuestion(\""+s+"\", "+element+")");
            
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$10",24, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // named_elem ::= KW_LABLETCHECK LCURLY LATEXSTRING NT$10 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-2)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("named_elem",5, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-4)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // named_elem ::= horizontal 
            {
              Object RESULT =null;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("named_elem",5, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$11 ::= 
            {
              Object RESULT =null;

                Integer h = ++horizontalnumber;
                Integer n = sheetnumber;
                element = "horizontalLayout";
                System.out.println();
                System.out.println("\tlocal "+element+" = sheet:addHorizontalGroupLayout()");
            
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$11",25, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // horizontal ::= KW_HORIZONTALTWO NT$11 LCURLY vertical RCURLY LCURLY vertical RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-6)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("horizontal",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-7)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$12 ::= 
            {
              Object RESULT =null;

                Integer h = ++horizontalnumber;
                Integer n = sheetnumber;
                element = "horizontalLayout";
                System.out.println();
                System.out.println("\tlocal "+element+" = sheet:addHorizontalGroupLayout()");
            
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$12",26, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // horizontal ::= KW_HORIZONTALTHREE NT$12 LCURLY vertical RCURLY LCURLY vertical RCURLY LCURLY vertical RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-9)).value;

              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("horizontal",11, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-10)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$13 ::= 
            {
              Object RESULT =null;

                Integer v = ++verticalnumber;
                prev = element;
                element = "verticalLayout";
                System.out.println();
                System.out.println("\tlocal "+element+" = sheet:addVerticalGroupLayout("+prev+")");
            
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("NT$13",27, ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // vertical ::= NT$13 named_elems 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)).value;
		 element = prev; 
              CUP$LabParser$result = parser.getSymbolFactory().newSymbol("vertical",12, ((java_cup.runtime.Symbol)CUP$LabParser$stack.elementAt(CUP$LabParser$top-1)), ((java_cup.runtime.Symbol)CUP$LabParser$stack.peek()), RESULT);
            }
          return CUP$LabParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LabParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LabParser$do_action(
    int                        CUP$LabParser$act_num,
    java_cup.runtime.lr_parser CUP$LabParser$parser,
    java.util.Stack            CUP$LabParser$stack,
    int                        CUP$LabParser$top)
    throws java.lang.Exception
    {
              return CUP$LabParser$do_action_part00000000(
                               CUP$LabParser$act_num,
                               CUP$LabParser$parser,
                               CUP$LabParser$stack,
                               CUP$LabParser$top);
    }
}

}
